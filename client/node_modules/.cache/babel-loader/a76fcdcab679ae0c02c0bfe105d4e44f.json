{"ast":null,"code":"import _objectWithoutProperties from \"/Users/weilyuwang/Documents/crown-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/weilyuwang/Documents/crown-clothing/src/components/with-spinner/with-spinner.component.jsx\";\nimport React from \"react\";\nimport { SpinnerContainer, SpinnerOverlay } from \"./with-spinner.styles\"; // HOC : High Order Component\n// HOC takes some wrapped component as a parameter, then returns back a functional component\n\nconst WithSpinner = WrappedComponent => (_ref) => {\n  let isLoading = _ref.isLoading,\n      otherProps = _objectWithoutProperties(_ref, [\"isLoading\"]);\n\n  return isLoading ? React.createElement(SpinnerOverlay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(SpinnerContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  })) : React.createElement(WrappedComponent, Object.assign({}, otherProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }));\n};\n\nexport default WithSpinner;","map":{"version":3,"sources":["/Users/weilyuwang/Documents/crown-clothing/src/components/with-spinner/with-spinner.component.jsx"],"names":["React","SpinnerContainer","SpinnerOverlay","WithSpinner","WrappedComponent","isLoading","otherProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,uBAAjD,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGC,gBAAgB,IAAI,UAAkC;AAAA,MAA/BC,SAA+B,QAA/BA,SAA+B;AAAA,MAAjBC,UAAiB;;AACxE,SAAOD,SAAS,GACd,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADc,GAKd,oBAAC,gBAAD,oBAAsBC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALF;AAOD,CARD;;AAUA,eAAeH,WAAf","sourcesContent":["import React from \"react\";\nimport { SpinnerContainer, SpinnerOverlay } from \"./with-spinner.styles\";\n\n// HOC : High Order Component\n// HOC takes some wrapped component as a parameter, then returns back a functional component\nconst WithSpinner = WrappedComponent => ({ isLoading, ...otherProps }) => {\n  return isLoading ? (\n    <SpinnerOverlay>\n      <SpinnerContainer />\n    </SpinnerOverlay>\n  ) : (\n    <WrappedComponent {...otherProps} />\n  );\n};\n\nexport default WithSpinner;\n"]},"metadata":{},"sourceType":"module"}