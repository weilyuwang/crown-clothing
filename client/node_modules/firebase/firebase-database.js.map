{"version":3,"file":"firebase-database.js","sources":["../../node_modules/tslib/tslib.es6.js","../util/src/crypt.ts","../util/src/constants.ts","../util/src/assert.ts","../util/src/deepCopy.ts","../util/src/deferred.ts","../util/src/environment.ts","../util/src/errors.ts","../util/src/json.ts","../util/src/jwt.ts","../util/src/obj.ts","../util/src/sha1.ts","../util/src/validation.ts","../util/src/utf8.ts","../logger/src/logger.ts","../database/src/core/storage/DOMStorageWrapper.ts","../database/src/core/storage/MemoryStorage.ts","../database/src/core/storage/storage.ts","../database/src/core/util/util.ts","../database/src/core/util/Path.ts","../database/src/realtime/Constants.ts","../database/src/core/RepoInfo.ts","../database/src/core/util/libs/parser.ts","../database/src/core/util/validation.ts","../database/src/api/onDisconnect.ts","../database/src/api/TransactionResult.ts","../database/src/core/util/NextPushId.ts","../database/src/core/snap/Node.ts","../database/src/core/snap/indexes/Index.ts","../database/src/core/snap/indexes/KeyIndex.ts","../database/src/core/snap/snap.ts","../database/src/core/snap/LeafNode.ts","../database/src/core/snap/indexes/PriorityIndex.ts","../database/src/core/util/SortedMap.ts","../database/src/core/snap/childSet.ts","../database/src/core/snap/IndexMap.ts","../database/src/core/snap/ChildrenNode.ts","../database/src/core/snap/comparators.ts","../database/src/core/snap/nodeFromJSON.ts","../database/src/core/snap/indexes/ValueIndex.ts","../database/src/core/snap/indexes/PathIndex.ts","../database/src/api/DataSnapshot.ts","../database/src/core/view/Event.ts","../database/src/core/view/EventRegistration.ts","../database/src/api/Query.ts","../database/src/core/SparseSnapshotTree.ts","../database/src/core/util/ServerValues.ts","../database/src/core/operation/Operation.ts","../database/src/core/operation/AckUserWrite.ts","../database/src/core/util/ImmutableTree.ts","../database/src/core/operation/ListenComplete.ts","../database/src/core/operation/Overwrite.ts","../database/src/core/operation/Merge.ts","../database/src/core/view/CacheNode.ts","../database/src/core/view/ViewCache.ts","../database/src/core/view/Change.ts","../database/src/core/view/filter/IndexedFilter.ts","../database/src/core/view/ChildChangeAccumulator.ts","../database/src/core/view/CompleteChildSource.ts","../database/src/core/view/ViewProcessor.ts","../database/src/core/view/EventGenerator.ts","../database/src/core/view/View.ts","../database/src/core/SyncPoint.ts","../database/src/core/CompoundWrite.ts","../database/src/core/WriteTree.ts","../database/src/core/SyncTree.ts","../database/src/core/SnapshotHolder.ts","../database/src/core/AuthTokenProvider.ts","../database/src/core/EmulatorAuthTokenProvider.ts","../database/src/core/stats/StatsCollection.ts","../database/src/core/stats/StatsManager.ts","../database/src/core/stats/StatsListener.ts","../database/src/core/stats/StatsReporter.ts","../database/src/core/view/EventQueue.ts","../database/src/core/util/EventEmitter.ts","../database/src/core/util/VisibilityMonitor.ts","../database/src/core/util/OnlineMonitor.ts","../database/src/realtime/polling/PacketReceiver.ts","../database/src/realtime/BrowserPollConnection.ts","../database/src/core/version.ts","../database/src/realtime/WebSocketConnection.ts","../database/src/realtime/TransportManager.ts","../database/src/realtime/Connection.ts","../database/src/core/ServerActions.ts","../database/src/core/PersistentConnection.ts","../database/src/core/ReadonlyRestClient.ts","../util/src/query.ts","../database/src/core/Repo.ts","../database/src/core/view/filter/RangedFilter.ts","../database/src/core/view/filter/LimitedFilter.ts","../database/src/core/view/QueryParams.ts","../database/src/api/Reference.ts","../database/src/core/util/Tree.ts","../database/src/core/Repo_transaction.ts","../database/src/core/RepoManager.ts","../database/src/api/Database.ts","../database/src/api/internal.ts","../database/src/api/test_access.ts","../database/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function(str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function(bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function(str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function(assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function(message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    if (!source.hasOwnProperty(prop)) {\n      continue;\n    }\n    (target as { [key: string]: unknown })[prop] = deepExtend(\n      (target as { [key: string]: unknown })[prop],\n      (source as { [key: string]: unknown })[prop]\n    );\n  }\n\n  return target;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: StringLike | undefined;\n}\n\nexport interface FirebaseError extends Error, ErrorData {\n  // Unique code for error - format is service/error-code-string.\n  readonly code: string;\n\n  // Developer-friendly error message.\n  readonly message: string;\n\n  // Always 'FirebaseError'.\n  readonly name: typeof ERROR_NAME;\n\n  // Where available - stack backtrace in a string.\n  readonly stack?: string;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  readonly name = ERROR_NAME;\n\n  constructor(readonly code: string, message: string) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage);\n\n    // Keys with an underscore at the end of their name are not included in\n    // error.data for some reason.\n    // TODO: Replace with Object.entries when lib is updated to es2017.\n    for (const key of Object.keys(customData)) {\n      if (key.slice(-1) !== '_') {\n        if (key in error) {\n          console.warn(\n            `Overwriting FirebaseError base field \"${key}\" can cause unexpected behavior.`\n          );\n        }\n        error[key] = customData[key];\n      }\n    }\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? value.toString() : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function(token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function(token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function(token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function(token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function(token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: keyof T): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function(\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argumentNumber The index of the argument\n * @param optional Whether or not the argument is optional\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(\n  fnName: string,\n  argumentNumber: number,\n  optional: boolean\n): string {\n  let argName = '';\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n    default:\n      throw new Error(\n        'errorPrefix called with argumentNumber > 4.  Need to update it?'\n      );\n  }\n\n  let error = fnName + ' failed: ';\n\n  error += argName + ' argument ';\n  return error;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  argumentNumber: number,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentNumber: number,\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentNumber: number,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function(str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function(str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  switch (logType) {\n    /**\n     * By default, `console.debug` is not displayed in the developer console (in\n     * chrome). To avoid forcing users to have to opt-in to these logs twice\n     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n     * logs to the `console.log` function.\n     */\n    case LogLevel.DEBUG:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.VERBOSE:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.INFO:\n      console.info(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.WARN:\n      console.warn(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.ERROR:\n      console.error(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    default:\n      throw new Error(\n        `Attempted to log a message with an invalid logType (value: ${logType})`\n      );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError('Invalid value assigned to `logLevel`');\n    }\n    this._logLevel = val;\n  }\n\n  /**\n   * The log handler for the Logger instance.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: any | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): any {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: any } = {};\n\n  set(key: string, value: any | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): any {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: any;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function(\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\n\ndeclare const window: any;\ndeclare const Windows: any;\n\nimport { assert } from '@firebase/util';\nimport { base64 } from '@firebase/util';\nimport { Sha1 } from '@firebase/util';\nimport { stringToByteArray } from '@firebase/util';\nimport { stringify } from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { isNodeSdk } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Environment variable for enabling interaction with the Firebase Realtime Database\n * emulator. If set, the module will present the endpoint with a fake \"owner\" credential\n * (see EmulatorAuthTokenProvider) instead of one belonging to a real account.\n *\n * The expected format for this variable is '<HOST>:<PORT>'. The transfer protocol must be\n * omitted and will default to 'http'.\n */\nexport const FIREBASE_DATABASE_EMULATOR_HOST_VAR =\n  'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: () => number = (function() {\n  let id = 1;\n  return function() {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} var_args\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function(...var_args: any[]): string {\n  let message = '';\n  for (let i = 0; i < var_args.length; i++) {\n    if (\n      Array.isArray(var_args[i]) ||\n      (var_args[i] &&\n        typeof var_args[i] === 'object' &&\n        typeof var_args[i].length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, var_args[i]);\n    } else if (typeof var_args[i] === 'object') {\n      message += stringify(var_args[i]);\n    } else {\n      message += var_args[i];\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function(\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || (logger_ === true || logger_ === false),\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) SessionStorage.set('logging_enabled', true);\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} var_args\n */\nexport const log = function(...var_args: string[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true)\n      enableLogging(true);\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, var_args);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function(\n  prefix: string\n): (...var_args: any[]) => void {\n  return function(...var_args: any[]) {\n    log(prefix, ...var_args);\n  };\n};\n\n/**\n * @param {...string} var_args\n */\nexport const error = function(...var_args: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...var_args);\n  logClient.error(message);\n};\n\n/**\n * @param {...string} var_args\n */\nexport const fatal = function(...var_args: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...var_args)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\n/**\n * @param {...*} var_args\n */\nexport const warn = function(...var_args: any[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...var_args);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function(methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function(data: any): boolean {\n  return (\n    typeof data === 'number' &&\n    (data != data || // NaN\n      data == Number.POSITIVE_INFINITY ||\n      data == Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function(fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    let wrappedFn = function() {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n    } else if ((document as any).attachEvent) {\n      // IE.\n      (document as any).attachEvent('onreadystatechange', function() {\n        if (document.readyState === 'complete') wrappedFn();\n      });\n      // fallback to onload.\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function(\n  key: string,\n  obj: { [k: string]: any }\n): any {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function(obj: any): string {\n  if (typeof obj !== 'object' || obj === null) return stringify(obj);\n\n  const keys = [];\n  for (let k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) key += ',';\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function(\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: any) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function(\n  callback: (a: any) => void,\n  context?: object | null\n): Function {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function(v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  let bias = (1 << (ebits - 1)) - 1,\n    s,\n    e,\n    f,\n    ln,\n    i,\n    bits,\n    str;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) hexByte = '0' + hexByte;\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function(): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function(): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function(code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code == 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code == 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function(str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function(fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function() {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} var_args Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function(\n  callback?: Function | null,\n  ...var_args: any[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(function() {\n      callback(...var_args);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function(): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function(\n  object: Object,\n  name: string,\n  fnGet: () => any\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function(\n  fn: Function,\n  time: number\n): number | Object {\n  const timeout: number | Object = setTimeout(fn, time);\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length)\n      return this.pieces_[this.pieces_.length - 1];\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') pathString += '/' + this.pieces_[i];\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '')\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++)\n      pieces.push(this.pieces_[i]);\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++)\n      pieces.push(this.pieces_[i]);\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) pieces.push(childPieces[i]);\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) return cmp;\n    }\n    if (leftKeys.length === rightKeys.length) return 0;\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length == 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\nexport const FORGE_DOMAIN = 'firebaseio.com';\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public secure: boolean,\n    public namespace: string,\n    public webSocketOnly: boolean,\n    public persistenceKey: string = '',\n    public includeNamespaceInQueryParams: boolean = false\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return (\n      this.host !== this.internalHost ||\n      this.isCustomHost() ||\n      this.includeNamespaceInQueryParams\n    );\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    each(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  let results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\n/**\n *\n * @param {!string} dataURL\n * @return {{repoInfo: !RepoInfo, path: !Path}}\n */\nexport const parseRepoInfo = function(\n  dataURL: string\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace == 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace != parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\n */\nexport const parseDatabaseURL = function(\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    let queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = dataURL.length;\n    }\n\n    const parts = host.split('.');\n    if (parts.length === 3) {\n      // Normalize namespaces to lowercase to share storage / connection.\n      domain = parts[1];\n      subdomain = parts[0].toLowerCase();\n      // We interpret the subdomain of a 3 component URL as the namespace name.\n      namespace = subdomain;\n    } else if (parts.length === 2) {\n      domain = parts[0];\n    } else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, ValidationPath } from './Path';\nimport { contains, safeGet } from '@firebase/util';\nimport { isInvalidJSONNumber, each } from './util';\nimport { errorPrefix as errorPrefixFxn } from '@firebase/util';\nimport { stringLength } from '@firebase/util';\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function(key: any): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function(pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function(pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function(priority: any): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority && typeof priority === 'object' && contains(priority, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: any,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) return;\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function(\n  errorPrefix: string,\n  data: any,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, function(key: string, value: any) {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function(\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: any,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) return;\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, function(key: string, value: any) {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function(\n  fnName: string,\n  argumentNumber: number,\n  priority: any,\n  optional: boolean\n) {\n  if (optional && priority === undefined) return;\n  if (isInvalidJSONNumber(priority))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n};\n\nexport const validateEventType = function(\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) return;\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function(\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) return;\n  if (!isValidKey(key))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n};\n\nexport const validatePathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) return;\n\n  if (!isValidPathString(pathString))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n};\n\nexport const validateRootPathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function(fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function(\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function(\n  fnName: string,\n  argumentNumber: number,\n  cred: any,\n  optional: boolean\n) {\n  if (optional && cred === undefined) return;\n  if (!(typeof cred === 'string'))\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n};\n\nexport const validateBoolean = function(\n  fnName: string,\n  argumentNumber: number,\n  bool: any,\n  optional: boolean\n) {\n  if (optional && bool === undefined) return;\n  if (typeof bool !== 'boolean')\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n};\n\nexport const validateString = function(\n  fnName: string,\n  argumentNumber: number,\n  string: any,\n  optional: boolean\n) {\n  if (optional && string === undefined) return;\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: any,\n  optional: boolean\n) {\n  if (optional && obj === undefined) return;\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: any,\n  key: string,\n  optional: boolean,\n  opt_type?: string\n) {\n  const objectContainsKey =\n    obj && typeof obj === 'object' && contains(obj, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (opt_type) {\n    const val = safeGet(obj, key);\n    if (\n      (opt_type === 'number' && !(typeof val === 'number')) ||\n      (opt_type === 'string' && !(typeof val === 'string')) ||\n      (opt_type === 'boolean' && !(typeof val === 'boolean')) ||\n      (opt_type === 'function' && !(typeof val === 'function')) ||\n      (opt_type === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            opt_type +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            opt_type +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\nimport { Deferred } from '@firebase/util';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: any, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: any,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function() {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function(now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: String,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): any;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: any, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\nimport { contains } from '@firebase/util';\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function(priority: string | number): string {\n  if (typeof priority === 'number')\n    return 'number:' + doubleToIEEE754String(priority);\n  else return 'string:' + priority;\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function(priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' &&\n          contains(val as { [key: string]: unknown }, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | object,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: String, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): any {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): Object {\n    if (exportFormat && !this.getPriority().isEmpty())\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    else return this.getValue();\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty())\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): object | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: any) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: any) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: any, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: (LLRBNode<K, V> | LLRBEmptyNode<K, V>)[] = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) cmp *= -1;\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) return null;\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_)\n      result = this.resultGenerator_(node.key, node.value);\n    else result = { key: node.key, value: node.value } as any;\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) return null;\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as any;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let cmp, n;\n    n = this;\n    cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) n = n.rotateRight_();\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n = this as any;\n    if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();\n    if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();\n    if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    let blackDepth;\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) node = node.right;\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode } from '../util/SortedMap';\nimport { SortedMap } from '../util/SortedMap';\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function<K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function(\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length == 0) {\n      return null;\n    } else if (length == 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as any) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as any) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as any) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as any) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function(base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function(chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as any) as K);\n      attachPennant(\n        new LLRBNode(key, (namedNode.node as any) as V, color, null, childTree)\n      );\n    };\n\n    const attachPennant = function(pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { buildChildSet } from './childSet';\nimport { contains, map, safeGet } from '@firebase/util';\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) throw new Error('No index defined for ' + indexKey);\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name != namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(this.indexes_, function(\n      indexedChildren: SortedMap<NamedNode, Node>\n    ) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(\n            new NamedNode(namedNode.name, existingSnap)\n          );\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) return this;\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap, newPriority;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) return null;\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function(key: string, childNode: Node) {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      for (let key in obj) array[(key as any) as number] = obj[key];\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty())\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n\n      this.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        const childHash = childNode.hash();\n        if (childHash !== '') toHash += ':' + key + ':' + childHash;\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(function(wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function(key) {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: any | null,\n  priority: string | number | null = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | object;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj: { [k: string]: any } = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length == 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: any) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty())\n            node = node.updateImmediateChild(key, childNode);\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): any {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): any {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): any {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) return false;\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) return false;\n    else return !this.node_.isEmpty();\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType:\n      | 'value'\n      | ' child_added'\n      | ' child_changed'\n      | ' child_moved'\n      | ' child_removed',\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event } from './Event';\nimport { contains } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: Object | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function() {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_:\n      | ({ [k: string]: (d: DataSnapshot, s?: string | null) => void })\n      | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: Object\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(/** @type {!string} */ change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as any,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index as any),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function() {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\nimport {\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '@firebase/util';\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\nimport { Deferred } from '@firebase/util';\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): any;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName != MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName != MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => any) | Object | null,\n    context?: Object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: Object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => any) | null,\n    context: Object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: Object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param failureCallbackOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | Object | null,\n    context?: Object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) ret.cancel.bind(ret.context)(err);\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): Object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | Object | null,\n    context?: Object | null\n  ): { cancel: ((a: Error) => void) | null; context: Object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: Object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport class SparseSnapshotTree {\n  private value: Node | null = null;\n\n  private readonly children: Map<string, SparseSnapshotTree> = new Map();\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param path Path to look up snapshot for.\n   * @return The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children.has(childKey)) {\n        const childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param path Path to look up snapshot for.\n   * @param data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      const childKey = path.getFront();\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param path Path to look up snapshot for.\n   * @return True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value;\n          this.value = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, function(key, tree) {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children.has(childKey)) {\n          const safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param prefixPath Path to look up node for.\n   * @param func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => any) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    this.children.forEach((tree, key) => {\n      func(key, tree);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function(\n  values: {\n    [k: string]: any;\n  } | null\n): { [k: string]: any } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredValue = function(\n  value: { [k: string]: any } | string | number | boolean,\n  serverValues: { [k: string]: any }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  } else {\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!SparseSnapshotTree} tree\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function(\n  tree: SparseSnapshotTree,\n  serverValues: Object\n): SparseSnapshotTree {\n  const resolvedTree = new SparseSnapshotTree();\n  tree.forEachTree(new Path(''), function(path, node) {\n    resolvedTree.remember(\n      path,\n      resolveDeferredValueSnapshot(node, serverValues)\n    );\n  });\n  return resolvedTree;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function(\n  node: Node,\n  serverValues: Object\n): Node {\n  const rawPri = node.getPriority().val() as\n    | object\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredValue(rawPri, serverValues);\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredValue(leafNode.getValue(), serverValues);\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, function(childName, childNode) {\n      const newChildNode = resolveDeferredValueSnapshot(\n        childNode,\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function(queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /**@inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare, each } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(function(\n      childKey: string,\n      childTree: ImmutableTree<T>\n    ) {\n      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal(function(childName, childTree) {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /**@inheritDoc */ public source: OperationSource,\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() == newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type == Change.CHILD_ADDED ||\n        type == Change.CHILD_CHANGED ||\n        type == Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childRemovedChange(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childAddedChange(childKey, change.snapshotNode)\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.oldSnap\n          )\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache\n        .getEventCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\n        !eventSnap\n          .getNode()\n          .getPriority()\n          .equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey == '.priority') {\n          assert(\n            changePath.getLength() == 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey == '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach(function(relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function(name, node) {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach(function(mergePath, value) {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (\n          viewCache\n            .getEventCache()\n            .getNode()\n            .hasChild(childKey)\n        ) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(function(registration) {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  private readonly views: Map<string, View> = new Map();\n\n  isEmpty(): boolean {\n    return this.views.size === 0;\n  }\n\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      for (const view of this.views.values()) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ eventCache,\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ serverCache,\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (const [viewQueryId, view] of this.views.entries()) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(viewQueryId);\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      const view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed: removed, events: cancelEvents };\n  }\n\n  getQueryViews(): View[] {\n    const result = [];\n    for (const view of this.views.values()) {\n      if (\n        !view\n          .getQuery()\n          .getQueryParams()\n          .loadsAllData()\n      ) {\n        result.push(view);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param path The path to the desired complete snapshot\n   * @return A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    for (const view of this.views.values()) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    }\n    return serverCache;\n  }\n\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  }\n\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  getCompleteView(): View | null {\n    for (const view of this.views.values()) {\n      if (\n        view\n          .getQuery()\n          .getQueryParams()\n          .loadsAllData()\n      ) {\n        return view;\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    each(updates, function(childKey: string, node: Node) {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param path The path to check for\n   * @return Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param path The path to get a complete write\n   * @return The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return A list of all complete children.\n   */\n  getCompleteChildren(): NamedNode[] {\n    const children: NamedNode[] = [];\n    let node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(PRIORITY_INDEX, function(\n          childName,\n          childNode\n        ) {\n          children.push(new NamedNode(childName, childNode));\n        });\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal(function(childName, childTree) {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param node The node to apply this CompoundWrite to\n   * @return The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  }\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal(function(childKey, childTree) {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { safeGet } from '@firebase/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path: path,\n      snap: snap,\n      writeId: writeId,\n      visible: visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path: path,\n      children: changedChildren,\n      writeId: writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(function(s) {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        each(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function(write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function(\n          childName,\n          childSnap\n        ) {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function(\n        childName,\n        childNode\n      ) {\n        const node = merge\n          .childCompoundWrite(new Path(childName))\n          .apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      });\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(function(namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function(namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (const childName in writeRecord.children) {\n        if (\n          writeRecord.children.hasOwnProperty(childName) &&\n          writeRecord.path.child(childName).contains(path)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode, each } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: any) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private readonly tagToQueryMap: Map<number, string> = new Map();\n  private readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @return Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @return Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param revert True if the given write failed and needs to be reverted\n   * @return Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        each(write.children, function(pathString: string, node: Node) {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @return Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @return Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @return Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @return Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function(childName, childSyncPoint) {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !this.queryToTagMap.has(queryKey),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param eventRegistration If null, all callbacks are removed.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(function(query) {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(path, function(\n        relativePath,\n        parentSyncPoint\n      ) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap.get(\n              SyncTree.makeQueryKey_(queryToRemove)\n            );\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n   * it, but as this is only used by transaction code, that should always be the case anyways.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   *\n   * @param path The path to the data we want\n   * @param writeIdsToExclude A specific set to be excluded\n   */\n  calcCompleteEventCache(\n    path: Path,\n    writeIdsToExclude?: number[]\n  ): Node | null {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(path, function(\n      pathSoFar,\n      syncPoint\n    ) {\n      const relativePath = Path.relativePath(pathSoFar, path);\n      const serverCache = syncPoint.getCompleteServerCache(relativePath);\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          each(childMap, function(_key: string, childViews: View[]) {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   *\n   * @return The normalized query\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef()!;\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @return This method can return events to support synchronous data sources\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(function(\n        relativePath,\n        maybeChildSyncPoint,\n        childMap\n      ) {\n        if (\n          !relativePath.isEmpty() &&\n          maybeChildSyncPoint &&\n          maybeChildSyncPoint.hasCompleteView()\n        ) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: Query[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n            );\n          }\n          each(childMap, function(_key: string, childQueries: Query[]) {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      });\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: any): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap.get(tag);\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport { log, warn } from './util/util';\n\n/**\n * An interface for token fetchers.\n */\nexport interface AuthTokenProvider {\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n\n  addTokenChangeListener(listener: (token: string | null) => void);\n\n  removeTokenChangeListener(listener: (token: string | null) => void);\n\n  notifyForInvalidToken();\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  constructor(private app_: FirebaseApp) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return this.app_['INTERNAL']['getToken'](forceRefresh).then(\n      null,\n      // .catch\n      function(error) {\n        // TODO: Need to figure out all the cases this is raised and whether\n        // this makes sense.\n        if (error && error.code === 'auth/token-not-initialized') {\n          log('Got auth/token-not-initialized error.  Treating as null token.');\n          return null;\n        } else {\n          return Promise.reject(error);\n        }\n      }\n    );\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    this.app_['INTERNAL']['addAuthTokenListener'](listener);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void) {\n    this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\n\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { log, warn } from './util/util';\n\nclass EmulatorAuthToken implements FirebaseAuthTokenData {\n  constructor(public accessToken: string) {}\n}\n\nexport class EmulatorAuthTokenProvider implements AuthTokenProvider {\n  constructor(private app_: FirebaseApp) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve(new EmulatorAuthToken('owner'));\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void) {}\n\n  removeTokenChangeListener(listener: (token: string | null) => void) {}\n\n  notifyForInvalidToken() {\n    let errorMessage =\n      'Database emulator unexpectedly rejected fake \"owner\" credentials.';\n    warn(errorMessage);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy } from '@firebase/util';\nimport { contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) this.counters_[name] = 0;\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: any } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: any[]): void;\n      context: any;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: Array<string>) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): any[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} var_args\n   */\n  protected trigger(eventType: string, ...var_args: any[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: any) => void, context: any) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(function(et) {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: any;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\nimport { isMobileCordova } from '@firebase/util';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: any[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: Object) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: any[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify } from '@firebase/util';\nimport { isNodeSdk } from '@firebase/util';\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: any[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param {string} connId An identifier for this connection, used for logging\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: Object) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) return;\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) return; // we closed the connection.\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command == FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1;\n            this.password = arg2;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN, data);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier)\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: Object) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) return;\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: any) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: { seg: number; ts: number; d: any }[] = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: any[]) => void;\n  onMessageCB: (...args: any[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: any[]) => void,\n    onMessageCB: (...args: any[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      (window as any)[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      (window as any)[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      (iframe as any).doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      (iframe as any).doc = iframe.contentWindow.document; // Internet Explorer\n    } else if ((iframe as any).document) {\n      (iframe as any).doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: any) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) return;\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          newScript.onload = (newScript as any).onreadystatechange = function() {\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\n\ndeclare const MozWebSocket: any;\n\nimport { assert, CONSTANTS as ENV_CONSTANTS } from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { jsonEval, stringify } from '@firebase/util';\nimport { isNodeSdk } from '@firebase/util';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: Object) => void;\n  mySock: any | null;\n  private log_: (...a: any[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n\n  /**\n   * @param {string} connId identifier for this transport\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.href &&\n      location.href.indexOf(FORGE_DOMAIN) !== -1\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: Object) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = ENV_CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') == 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        this.mySock = new WebSocketImpl(this.connURL);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = (m: object) => {\n      this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = (e: any) => {\n      this.log_('WebSocket error.  Closing connection.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: Boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length == this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: any }) {\n    if (this.mySock === null) return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: Object) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn, each } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable)\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: any[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: any[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param {!string} id - an id for this connection\n   * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\n   * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private onMessage_: (a: Object) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeout_ms = conn['healthyTimeout'] || 0;\n    if (healthyTimeout_ms > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n      }, Math.floor(healthyTimeout_ms)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: object) => {\n      if (this.state_ != RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: any }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: object) {\n    const layer: string = requireKey('t', parsedData);\n    const data: any = requireKey('d', parsedData);\n    if (layer == 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer == 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: any }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData);\n    const data: any = requireKey('d', parsedData);\n    if (layer == 'c') {\n      this.onControl_(data);\n    } else if (layer == 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: any) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: any }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ == RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: any }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, isEmpty, safeGet, CONSTANTS } from '@firebase/util';\nimport { stringify } from '@firebase/util';\nimport { assert } from '@firebase/util';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { isAdmin, isValidFormat } from '@firebase/util';\nimport { Connection } from '../realtime/Connection';\nimport { isMobileCordova, isReactNative, isNodeSdk } from '@firebase/util';\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: any): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: any;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: Object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingPutCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: Object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: any) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: Object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: any,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: any) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: Object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: any,\n    onResponse?: (a: any) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: any } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: any }) => {\n      const payload: any = message[/*data*/ 'd'];\n      const status: string = message[/*status*/ 's'];\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: any, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      const warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' +\n          query\n            .getQueryParams()\n            .getIndex()\n            .toString() +\n          '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: any } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, (res: { [k: string]: any }) => {\n        const status: string = res[/*status*/ 's'];\n        const data: string = res[/*data*/ 'd'] || 'error';\n\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: Object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: any } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: any }) => {\n      if (onComplete) {\n        setTimeout(function() {\n          onComplete(response[/*status*/ 's'], response[/* data */ 'd']);\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: any,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: any,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: any } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) request[/*hash*/ 'h'] = hash;\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: any }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete)\n        onComplete(message[/*status*/ 's'], message[/* data */ 'd']);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: any }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: any }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: any }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd')\n      this.onDataUpdate_(\n        body[/*path*/ 'p'],\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t']\n      );\n    else if (action === 'm')\n      this.onDataUpdate_(\n        body[/*path*/ 'p'],\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t']\n      );\n    else if (action === 'c')\n      this.onListenRevoked_(body[/*path*/ 'p'], body[/*query*/ 'q']);\n    else if (action === 'ac')\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'],\n        body[/* explanation */ 'd']\n      );\n    else if (action === 'sd') this.onSecurityDebugPacket_(body);\n    else\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function() {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function(msg: Object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(function(result) {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ function(reason) {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, function(error) {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (CONSTANTS.NODE_ADMIN) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) put.onComplete('disconnect');\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];\n  }\n\n  private onListenRevoked_(pathString: string, query?: any[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) listen.onComplete('permission_denied');\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: any }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) this.sendPut_(i);\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (CONSTANTS.NODE_ADMIN) {\n      clientName = 'admin_node';\n    } else if (CONSTANTS.NODE_CLIENT) {\n      clientName = 'node';\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\nimport { jsonEval } from '@firebase/util';\nimport { safeGet } from '@firebase/util';\nimport { querystring } from '@firebase/util';\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport {\n  FirebaseAuthTokenProvider,\n  AuthTokenProvider\n} from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: any }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: any[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: Object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: any,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: any) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error == 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: any } = {},\n    callback: ((a: number | null, b?: any) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): object {\n  const obj: { [key: string]: unknown } = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const key = token.split('=');\n      obj[key[0]] = key[1];\n    }\n  });\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify } from '@firebase/util';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  warn,\n  log,\n  FIREBASE_DATABASE_EMULATOR_HOST_VAR\n} from './util/util';\nimport { map, isEmpty } from '@firebase/util';\nimport {\n  FirebaseAuthTokenProvider,\n  AuthTokenProvider\n} from './AuthTokenProvider';\nimport { EmulatorAuthTokenProvider } from './EmulatorAuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactions_init_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: any) => void)\n    | null = null;\n  private __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    forceRestClient: boolean,\n    public app: FirebaseApp\n  ) {\n    let authTokenProvider: AuthTokenProvider;\n    if (\n      typeof process !== 'undefined' &&\n      process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR]\n    ) {\n      authTokenProvider = new EmulatorAuthTokenProvider(app);\n    } else {\n      authTokenProvider = new FirebaseAuthTokenProvider(app);\n    }\n\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        authTokenProvider\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        authTokenProvider,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactions_init_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   */\n  generateServerValues(): Object {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: any,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(data as { [k: string]: any }, (raw: any) =>\n          nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(data as { [k: string]: any }, (raw: any) =>\n        nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  interceptServerData_(callback: ((a: string, b: any) => any) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  private onServerInfoUpdate_(updates: Object) {\n    each(updates, (key: string, value: any) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  private updateInfo_(pathString: string, value: any) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  setWithPriority(\n    path: Path,\n    newVal: any,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: any },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    each(childrenToMerge, (changedKey: string, changedValue: any) => {\n      empty = false;\n      const newNodeUnresolved = nodeFromJSON(changedValue);\n      changedChildren[changedKey] = resolveDeferredValueSnapshot(\n        newNodeUnresolved,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      each(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = resolveDeferredValueTree(\n      this.onDisconnect_,\n      serverValues\n    );\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  onDisconnectSet(\n    path: Path,\n    value: any,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: any,\n    priority: any,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: any },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          each(childrenToMerge, (childName: string, childNode: any) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') return;\n\n    let stats: { [k: string]: any };\n    if (showDelta) {\n      if (!this.statsListener_)\n        this.statsListener_ = new StatsListener(this.stats_);\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    each(stats, (stat: string, value: any) => {\n      let paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  private log_(...var_args: any[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...var_args);\n  }\n\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(function() {\n        if (status == 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) message += ': ' + errorReason;\n\n          const error = new Error(message);\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          let next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          let inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() == this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { stringify } from '@firebase/util';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: any | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: any | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): any {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): any {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): Object {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: any } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: any } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { Deferred } from '@firebase/util';\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  public then: (a?: any) => Promise<any>;\n  public catch: (a?: Error) => Promise<any>;\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) return null;\n    else return this.path.getBack();\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null)\n        validateRootPathString('Reference.child', 1, pathString, false);\n      else validatePathString('Reference.child', 1, pathString, false);\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref = this as any;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(newVal: any, onComplete?: (a: Error | null) => void): Promise<any> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: Object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: any,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys')\n      throw 'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<any> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: any) => any,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys')\n      throw 'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n\n    if (applyLocally === undefined) applyLocally = true;\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function(\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<any> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: any, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { contains, safeGet } from '@firebase/util';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next;\n    while ((next = path.getFront()) !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    each(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) action(this);\n\n    this.forEachChild(function(child) {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) action(this);\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(function(child) {\n      if (child.getValue() !== null) action(child);\n      else child.forEachImmediateDescendantWithValue(action);\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) this.parent_.updateChild_(this.name_, this);\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { contains, safeGet } from '@firebase/util';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ntype Transaction = {\n  path: Path;\n  update: (a: any) => any;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n};\n\n/**\n * Setup the transaction data structures\n * @private\n */\n(Repo.prototype as any).transactions_init_ = function() {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: any) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function(\n  path: Path,\n  transactionUpdate: (a: any) => any,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function() {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function() {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n(Repo.prototype as any).getLatestState_ = function(\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n(Repo.prototype as any).sendReadyTransactions_ = function(\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n(Repo.prototype as any).sendTransactionQueue_ = function(\n  path: Path,\n  queue: Array<Transaction>\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(function(txn) {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /**@type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            else queue[i].status = TransactionStatus.RUN;\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n(Repo.prototype as any).rerunTransactions_ = function(changedPath: Path): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n(Repo.prototype as any).rerunTransactionQueue_ = function(\n  queue: Array<Transaction>,\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(function(q) {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(function(q) {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function(unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n(Repo.prototype as any).getAncestorTransactionNode_ = function(\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  while (\n    (front = path.getFront()) !== null &&\n    transactionNode.getValue() === null\n  ) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n(Repo.prototype as any).buildTransactionQueue_ = function(\n  transactionNode: Tree<Transaction[]>\n): Array<Transaction> {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort(function(a, b) {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function(\n  node: Tree<Transaction[]>,\n  queue: Array<Transaction>\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n(Repo.prototype as any).abortTransactions_ = function(path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n(Repo.prototype as any).abortTransactionsOnNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { safeGet } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal, FIREBASE_DATABASE_EMULATOR_HOST_VAR } from './util/util';\nimport { parseRepoInfo, parseDatabaseURL } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\n\n/** @const {string} */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(app: FirebaseApp, url?: string): Database {\n    let dbUrl: string | undefined = url || app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) {\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.initializeApp().'\n      );\n    }\n\n    let parsedUrl = parseRepoInfo(dbUrl);\n    let repoInfo = parsedUrl.repoInfo;\n\n    let dbEmulatorHost: string | undefined = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n    if (dbEmulatorHost) {\n      dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n      parsedUrl = parseRepoInfo(dbUrl);\n      repoInfo = parsedUrl.repoInfo;\n    }\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(repoInfo: RepoInfo, app: FirebaseApp): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   **/\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== ((this.repo_ as any).repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          ((this.repo_ as any).repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  async delete(): Promise<void> {\n    (this.database as any).checkDeleted_('delete');\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n\n    (this.database as any).repo_ = null;\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function() {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function() {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function(): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function(\n  ref: Reference,\n  callback: (a: Object) => void\n) {\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function(ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function(ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function(ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function(\n  ref: Reference,\n  callback: ((a: string, b: any) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n(PersistentConnection.prototype as any).simpleListen = function(\n  pathString: string,\n  onComplete: (a: any) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n(PersistentConnection.prototype as any).echo = function(\n  data: any,\n  onEcho: (a: any) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function(newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function(\n    pathString,\n    data,\n    opt_onComplete,\n    opt_hash\n  ) {\n    if (opt_hash !== undefined) {\n      opt_hash = newHash();\n    }\n    oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\n  };\n  return function() {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function(query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function(forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { DataSnapshot } from './src/api/DataSnapshot';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\nimport { setSDKVersion } from './src/core/version';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerService(\n    'database',\n    (app, unused, url) => RepoManager.getInstance().databaseFromApp(app, url),\n    // firebase.database namespace properties\n    {\n      Reference,\n      Query,\n      Database,\n      DataSnapshot,\n      enableLogging,\n      INTERNAL,\n      ServerValue,\n      TEST_ACCESS\n    },\n    null,\n    true\n  );\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","stringToByteArray","str","out","c","charCodeAt","base64Decode","base64","decodeString","console","CONSTANTS","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","assert","assertion","message","assertionError","Error","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","deepCopy","deepExtend","target","source","Date","dateValue","getTime","undefined","prop","Deferred","callback","_this","reject","resolve","promise","catch","Promise","isMobileCordova","window","test","navigator","isNodeSdk","tslib_1.__extends","code","_super","FirebaseError","captureStackTrace","ErrorFactory","_i","data","customData","fullCode","service","template","errors","replace","PATTERN","key","toString","replaceTemplate","fullMessage","serviceName","_b","keys","_a","slice","warn","jsonEval","JSON","parse","stringify","decode","token","header","claims","signature","parts","split","contains","obj","safeGet","isEmpty","map","fn","contextObj","res","Sha1","chain_","inbuf_","total_","buf","offset","W","W_","k","a","lengthMinusBlock","blockSize","buf_","inbuf","compress_","digest","totalBits","update","pad_","j","reset","validateArgCount","fnName","minCount","maxCount","argCount","argError","errorPrefix","argumentNumber","optional","argName","validateCallback","validateContextObject","context","stringLength","LogLevel","defaultLogHandler","instance","logType","args","logLevel","now","toISOString","DEBUG","VERBOSE","log","name","INFO","info","WARN","ERROR","defaultLogLevel","Logger","_logLevel","val","_logHandler","DOMStorageWrapper","domStorage_","removeItem","prefixedName_","setItem","storedVal","getItem","prefix_","MemoryStorage","cache_","createStoragefor","domStorageName","domStorage","sha1","utf8Bytes","high","sha1Bytes","enableLogging","logger_","persistent","logClient","logger","bind","SessionStorage","set","remove","var_args","firstLog_","get","buildLogMessage_","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","stringCompare","requireKey","splitStringBySize","segsize","len","dataSegs","substring","id","PersistentStorage","FIREBASE_DATABASE_EMULATOR_HOST_VAR","LUIDGenerator","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","ObjectToUniqueKey","sort","each","doubleToIEEE754String","ln","bits","Infinity","Math","abs","pow","min","floor","LN2","round","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","INTEGER_REGEXP_","RegExp","intVal","Path","pieceNum_","pieces_","pieceNum","pathString","encodeURIComponent","begin","pieces","childPathObj","childPieces","outerPath","innerPath","outer","getFront","inner","relativePath","popFront","left","right","leftKeys","rightKeys","cmp","other","getLength","pathOrString","copyTo","ValidationPath","child","parts_","byteLength_","checkValid_","last","MAX_PATH_LENGTH_BYTES","errorPrefix_","MAX_PATH_DEPTH","toErrorString","path","max","FORGE_DOMAIN","WEBSOCKET","LONG_POLLING","RepoInfo","host","internalHost","isCustomHost","includeNamespaceInQueryParams","domain","newHost","isCacheableHost","type","params","connURL","secure","needsQueryParam","namespace","pairs","toURLString","persistenceKey","webSocketOnly","indexOf","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","location","protocol","scheme","repoInfo","subdomain","isValidKey","INVALID_KEY_REGEX_","isValidPathString","INVALID_PATH_REGEX_","isValidPriority","priority","validateFirebaseDataArg","validateFirebaseData","errorPrefixFxn","validateFirebaseMergeDataArg","mergePaths","curPath","getBack","comparePaths","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","isValidRootPathString","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryParams","queryString","results","tslib_1.__values","segment","kv","decodeQuery","MAX_LEAF_SIZE_","path_","hasDotValue_1","hasActualChild_1","OnDisconnect","onComplete","deferred","repo_","onDisconnectCancel","wrapCallback","onDisconnectSet","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","PUSH_CHARS","lastPushTime","lastRandChars","nextPushId","duplicateTime","timeStampChars","random","NamedNode","node","__EMPTY_NODE","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","KeyIndex","indexValue","MAX_NODE","KEY_INDEX","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON","LeafNode","priorityNode_","newPriorityNode","value_","childName","EMPTY_NODE","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","index","action","exportFormat",".value","getValue",".priority","lazyHash_","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","SortedMapIterator","nodeStack_","result","resultGenerator_","isReverse_","startKey","comparator","LLRBNode","color","count","inorderTraversal","reverseTraversal","min_","maxKey","copy","insert","fixUp_","SortedMap","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","RED","nr","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","LOG_2","Base12Num","bits_","current_","num","mask","_defaultIndexMap","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","buildFrom12Array","fallbackObject","IndexMap","indexKey","sortedMap","indexes_","indexDefinition","indexSet_","existingChildren","newIndex","sawIndexedValue","iter","getIterator","Wrap","getNext","isDefinedOn","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","Default","children_","indexMap_","getImmediateChild","getChild","newPriority","newIndexMap","removeFromIndexes","addToIndexes","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","toHash_1","childHash","hash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","json","node_1","childData","children_1","childrenHavePriority_1","childSet","sortedChildSet","VALUE_INDEX","ValueIndex","valueNode","PathIndex","snap","indexPath_","aChild","extractChild","bChild","DataSnapshot","node_","exportVal","childPathString","childPath","childRef","ref_","index_","getKey","numChildren","getRef","DataEvent","ref","getParent","eventRegistration","getEventRunner","getPath","prevName","CancelEvent","ValueEventRegistration","change","query","getQueryParams","getIndex","snapshotNode","eventData","ctx","context_","getEventType","cancelCallback_","cancelCB_1","cb_1","callback_","__referenceConstructor","ChildEventRegistration","eventToCheck","callbacks_","cancelCB_2","cb_2","otherKeys","thisKeys","otherCount","every","otherKey","thisKey","Query","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","hasLimit","hasAnchoredLimit","orderByCalled_","queryParams_","repo","cancelCallbackOrContext","ret","getCancelAndContextArgs_","onValueEvent","cancel","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","removeEventCallbackForQuery","userCallback","failureCallbackOrContext","firstCall","onceCallback","off","on","err","limit","limitToFirst","limitToLast","validateNoPreviousOrderByCall_","parsedPath","newParams","orderBy","validateQueryEndpoints_","startAt","validateLimit_","endAt","toUrlEncodedString","getQueryObject","queryObject","sameRepo","samePath","sameQueryIdentifier","queryIdentifier","cancelOrContext","SparseSnapshotTree","children","size","childKey","has","find","clear","remember","self_1","tree","forget","delete","prefixPath","func","forEachTree","forEach","Map","resolveDeferredValue","serverValues","OperationType","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","OperationSource","queryId","fromUser","fromServer","tagged","emptyChildrenSingleton","AckUserWrite","affectedTree","subtree","Empty","revert","ACK_USER_WRITE","User","ImmutableTree","childSnap","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","toSet","newChild","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","nextChild","foreachOnPath_","currentRelativePath","foreach_","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","hasChild","ViewCache","eventSnap","complete","filtered","serverCache_","serverSnap","eventCache_","getNode","Change","VALUE","CHILD_ADDED","CHILD_REMOVED","newSnapshot","oldSnapshot","CHILD_CHANGED","CHILD_MOVED","oldSnap","IndexedFilter","affectedPath","optChangeAccumulator","isIndexed","oldChild","trackChildChange","childRemovedChange","childAddedChange","childChangedChange","withIndex","newSnap","ChildChangeAccumulator","oldChange","changeMap","oldType","from","values","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","WriteTreeCompleteChildSource","viewCache_","getEventCache","serverNode","optCompleteServerCache_","getServerCache","writes_","calcCompleteChild","completeServerData","getCompleteServerSnap","nodes","calcIndexedSlice","viewCache","changes","ViewProcessor","filter_","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","isFiltered","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","getChanges","maybeAddValueEvent_","ProcessorResult","isLeafOrEmpty","oldCompleteSnap","getCompleteEventSnap","valueChange","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","updateFullNode","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","updateEventSnap","filtersNodes","changedSnap","newServerCache","oldServerSnap","serverFilter","getIndexedFilter","newServerNode","isCompleteForPath","updateServerSnap","generateEventCacheAfterServerEvent_","getCompleteChild","parent","newEventSnap","changedChildren","curViewCache","foreach","writePath","cacheHasChild_","viewMergeTree","serverChild","applyMerge_","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","eventCache","eventRegistrations","events","moves","indexedValueChanged","childMovedChange","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","respondsTo","createEvent","query_","getPredecessorChildName","aWrapped","bWrapped","View","cache","loadsAllData","eventRegistrations_","cancelError","cancelEvents","path_1","maybeEvent","createCancelEvent","remaining","existing","matches","hasAnyCallback","processor_","applyOperation","assertIndexed","generateEventsForChanges_","initialChanges","eventGenerator_","generateEventsForChanges","initialViewCache","indexFilter","getNodeFilter","initialServerCache","initialEventCache","SyncPoint","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","addEventRegistration","getInitialEvents","removed","hadCompleteView","hasCompleteView","entries","_d","viewQueryId","removeEventRegistration","getQuery","getCompleteServerCache","getCompleteView","viewForQuery","CompoundWrite","rootmost","writeTree_","findRootMostValueAndPath","rootMostPath","updates","newWrite","addWrite","getCompleteNode","shadowingNode","applySubtreeWrite","writeTree","priorityWrite_1","WriteTree","WriteTreeRef","writeId","visible","lastWriteId_","allWrites_","visibleWrites_","addWrites","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","removeWrite","treePath","writeIdsToExclude","includeHiddenWrites","childCompoundWrite","hasCompleteWrite","mergeAtPath","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","getCompleteChildren","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","newData","pendingWriteTree_","addOverwrite","applyOperationToSyncPoints_","addMerge","changeTree","fromObject","getWrite","affectedTree_1","Server","tag","queryKey","queryKeyForTag_","parseQueryKey_","queryPath","forServerTaggedQuery","applyTaggedOperation_","foundAncestorDefaultView","syncPointTree_","foreachOnPath","pathToSyncPoint","sp","syncPoint","foreachChild","childSyncPoint","viewAlreadyExists","viewExistsForQuery","makeQueryKey_","queryToTagMap","getNextQueryTag_","tagToQueryMap","childWrites","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","listenProvider_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","fold","maybeChildSyncPoint","childMap","views_1","getQueryViews","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","applyTaggedListenComplete","applyListenComplete","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","SnapshotHolder","rootNode_","newSnapshotNode","FirebaseAuthTokenProvider","forceRefresh","app_","then","errorMessage","options","accessToken","EmulatorAuthTokenProvider","EmulatorAuthToken","StatsCollection","amount","counters_","StatsManager","hashString","collections_","creatorFunction","reporters_","StatsListener","newStats","collection_","delta","last_","stat","StatsReporter","statsToReport_","stats","statsListener_","reportedStats","haveStatsToReport","server_","reportStats","reportStats_","collection","EventQueue","eventDataList","currList","eventPath","eventLists_","EventList","add","queueEvents","raiseQueuedEventsMatchingPredicate_","changedPath","recursionDepth_","sentAll","eventList","raise","events_","eventFn","EventEmitter","listeners_","listeners","validateEventType_","getInitialEvent","allowedEvents_","et","VisibilityMonitor","visible_","hidden","visibilityChange","document","addEventListener","trigger","OnlineMonitor","online_","PacketReceiver","responseNum","closeAfterResponse","onClose","currentResponseNum","requestNum","pendingResponses","toProcess","this_1","onMessage_","BrowserPollConnection","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","log_","onClosed_","readyState","called_1","wrappedFn_1","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","closeAfter","pN","handleResponse","urlFn","urlParams","start","uniqueCallbackIdentifier","transportSessionId","lastSessionId","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","Windows","UI","close","myDisconnFrame","removeChild","shutdown_","dataStr","bytesSent","stats_","incrementCounter","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","src","style","display","appendChild","bytesReceived","connId","getCollection","connectionURL","iframe","contentWindow","contentDocument","doc","alive","myIFrame","innerHTML","myID","myPW","newRequest_","outstandingRequests","pendingSegs","currentSerial","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","commandCB","onMessageCB","Set","createIFrame_","script","iframeContents","open","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","device","ENV_CONSTANTS","headers","User-Agent","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidMatch","match","parseFloat","isInMemoryStorage","frames","totalFrames","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","keepaliveTimer","clearInterval","setInterval","send","connectionURL_","TransportManager","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","transport","initTransports_","Connection","conn","transportManager_","initialTransport","conn_","nextTransportId_","repoInfo_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","markConnectionHealthy","connectionCount","everConnected","onConnectionLost_","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","updateHost","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","start_","onReady_","onKill_","ServerActions","PersistentConnection","onResponse","curReqNum","requestNumber_","connected_","realtime_","sendRequest","requestCBHash_","currentHashFn","listens","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","authToken_","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","maxReconnectDelay_","token_1","authMethod","isValidFormat","requestData","cred","authOverride_","invalidAuthTokenCount_","onAuthRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","request","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","errorReason","reqNum","onDataPush_","onDataUpdate_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","onConnectStatus_","establishConnectionTimer_","establishConnection_","reconnectDelay_","scheduleConnect_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","onRealtimeDisconnect_","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","forceTokenRefresh_","authTokenProvider_","getToken","interrupt","interruptReasons_","onServerInfoUpdate_","serverTimeOffset","put","q","listen","normalizedPathString","statusCode","explanation","notifyForInvalidToken","securityDebugCallback_","_c","_e","getInstance","currentlyOnline","nextPersistentConnectionId_","onVisible_","onOnline_","ReadonlyRestClient","listenId","getListenId_","thisListen","listens_","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","querystringParams","arrayVal","querystring","xhr","XMLHttpRequest","responseText","INTERRUPT_REASON","Repo","infoData_","generateWithValues","serverTime","isMerge","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","serverSyncTree_","applyTaggedQueryMerge","taggedSnap","applyTaggedQueryOverwrite","applyServerMerge","applyServerOverwrite","rerunTransactions_","eventQueue_","raiseEventsForChangedPath","connectStatus","updateInfo_","runOnDisconnectEvents_","updateSnapshot","infoSyncTree_","nextWriteId_","newVal","generateServerValues","newNodeUnresolved","getNextWriteId_","applyUserOverwrite","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","applyUserMerge","resolvedOnDisconnectTree","resolvedTree","resolveDeferredValueTree","onDisconnectPut","onDisconnectMerge","raiseEventsAtPath","persistentConnection_","resume","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","metric","statsReporter_","includeStat","__database","Database","forceRestClient","app","authTokenProvider","search","authOverride","addTokenChangeListener","refreshAuthToken","getOrCreateReporter","transactions_init_","infoEvents","unlisten","RangedFilter","startPost_","endPost_","getStartPost","getEndPost","indexedFilter_","self","startName","makePost","endName","getStartPost_","getEndPost_","LimitedFilter","rangedFilter_","limit_","fullLimitUpdateChild_","reverse_","hasNext","getReverseIterator","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","inRange","oldChildSnap","getChildAfterChild","compareNext","getLimit","isViewFromLeft","QueryParams","startSet_","viewFrom_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","newLimit","copy_","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","Reference","validateRootPathString","parentPath","database","setWithPriority","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","thennablePushRef","pushRef","databaseProp","getRoot","DEFAULT","TransactionStatus","Tree","pathObj","TreeNode","updateParents_","childCount","hasChildren","includeSelf","childrenFirst","forEachDescendant","forEachImmediateDescendantWithValue","parent_","name_","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","transaction","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","subTree","nodeQueue","setValue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","forEachAncestor","abortTransactionsOnNode_","lastSent","_staticInstance","DATABASE_URL_OPTION","RepoManager","appName","repos_","dbUrl","dbEmulatorHost","createRepo","appRepos","useRestClient_","checkDeleted_","refFromURL","apiName","parsedURL","TIMESTAMP",".sv","INTERNAL","DatabaseInternals","_arguments","P","generator","fulfilled","rejected","deleteRepo","forceDisallow","forceAllow","statsIncrementCounter","interceptServerData_","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","newHash","oldPut","opt_onComplete","opt_hash","ServerValue","firebase","registerService","unused","databaseFromApp","TEST_ACCESS"],"mappings":"4RAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAuCzB,SAASI,EAAYC,EAASC,GACjC,IAAsGC,EAAGC,EAAGZ,EAAGa,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPhB,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOiB,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEM,KAAMC,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BV,EAAEU,OAAOC,UAAY,WAAa,OAAO9B,OAAUmB,EACvJ,SAASO,EAAKjB,GAAK,OAAO,SAAUsB,GAAK,OACzC,SAAcC,GACV,GAAIf,EAAG,MAAM,IAAIgB,UAAU,mCAC3B,KAAOb,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAMZ,EAAY,EAAR0B,EAAG,GAASd,EAAU,OAAIc,EAAG,GAAKd,EAAS,SAAOZ,EAAIY,EAAU,SAAMZ,EAAEM,KAAKM,GAAI,GAAKA,EAAEO,SAAWnB,EAAIA,EAAEM,KAAKM,EAAGc,EAAG,KAAKE,KAAM,OAAO5B,EAE3J,OADIY,EAAI,EAAGZ,IAAG0B,EAAK,CAAS,EAARA,EAAG,GAAQ1B,EAAE6B,QACzBH,EAAG,IACP,KAAK,EAAG,KAAK,EAAG1B,EAAI0B,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEc,MAAOH,EAAG,GAAIE,MAAM,GAChD,KAAK,EAAGd,EAAEC,QAASH,EAAIc,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIY,MAAOhB,EAAEG,KAAKa,MAAO,SACxC,QACI,KAAkB9B,EAAe,GAA3BA,EAAIc,EAAEG,MAAYZ,QAAcL,EAAEA,EAAEK,OAAS,MAAkB,IAAVqB,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,SACjG,GAAc,IAAVY,EAAG,MAAc1B,GAAM0B,EAAG,GAAK1B,EAAE,IAAM0B,EAAG,GAAK1B,EAAE,IAAM,CAAEc,EAAEC,MAAQW,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQf,EAAE,GAAI,CAAEc,EAAEC,MAAQf,EAAE,GAAIA,EAAI0B,EAAI,MAC7D,GAAI1B,GAAKc,EAAEC,MAAQf,EAAE,GAAI,CAAEc,EAAEC,MAAQf,EAAE,GAAIc,EAAEI,IAAIa,KAAKL,GAAK,MACvD1B,EAAE,IAAIc,EAAEI,IAAIY,MAChBhB,EAAEG,KAAKa,MAAO,SAEtBJ,EAAKhB,EAAKJ,KAAKG,EAASK,GAC1B,MAAOkB,GAAKN,EAAK,CAAC,EAAGM,GAAIpB,EAAI,UAAeD,EAAIX,EAAI,EACtD,GAAY,EAAR0B,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEG,MAAOH,EAAG,GAAKA,EAAG,QAAK,EAAQE,MAAM,GArB9BK,CAAK,CAAC9B,EAAGsB,MA6BtD,SAASS,EAASC,GACrB,IAAIC,EAAsB,mBAAXb,QAAyBY,EAAEZ,OAAOC,UAAWtB,EAAI,EAChE,OAAIkC,EAAUA,EAAE9B,KAAK6B,GACd,CACHhB,KAAM,WAEF,OADIgB,GAAKjC,GAAKiC,EAAE9B,SAAQ8B,OAAI,GACrB,CAAEN,MAAOM,GAAKA,EAAEjC,KAAM0B,MAAOO,KAKzC,SAASE,EAAOF,EAAGhC,GACtB,IAAIiC,EAAsB,mBAAXb,QAAyBY,EAAEZ,OAAOC,UACjD,IAAKY,EAAG,OAAOD,EACf,IAAmBG,EAAYN,EAA3B9B,EAAIkC,EAAE9B,KAAK6B,GAAOI,EAAK,GAC3B,IACI,WAAc,IAANpC,GAAsB,EAANA,QAAcmC,EAAIpC,EAAEiB,QAAQS,MAAMW,EAAGR,KAAKO,EAAET,OAExE,MAAOW,GAASR,EAAI,CAAEQ,MAAOA,WAEzB,IACQF,IAAMA,EAAEV,OAASQ,EAAIlC,EAAU,SAAIkC,EAAE9B,KAAKJ,WAExC,GAAI8B,EAAG,MAAMA,EAAEQ,OAE7B,OAAOD,EAGJ,SAASE,IACZ,IAAK,IAAIF,EAAK,GAAIrC,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CqC,EAAKA,EAAGG,OAAOL,EAAOjC,UAAUF,KACpC,OAAOqC,EC1He,SAApBI,EAA6BC,GAIjC,IAFA,IAAMC,EAAgB,GAClBvD,EAAI,EACCY,EAAI,EAAGA,EAAI0C,EAAIvC,OAAQH,IAAK,CACnC,IAAI4C,EAAIF,EAAIG,WAAW7C,GACnB4C,EAAI,IACND,EAAIvD,KAAOwD,GACFA,EAAI,KACbD,EAAIvD,KAAQwD,GAAK,EAAK,KAGL,QAAZ,MAAJA,IACD5C,EAAI,EAAI0C,EAAIvC,QACyB,QAAZ,MAAxBuC,EAAIG,WAAW7C,EAAI,KAGpB4C,EAAI,QAAgB,KAAJA,IAAe,KAA6B,KAAtBF,EAAIG,aAAa7C,IACvD2C,EAAIvD,KAAQwD,GAAK,GAAM,IACvBD,EAAIvD,KAASwD,GAAK,GAAM,GAAM,KAI9BD,EAAIvD,KAAQwD,GAAK,GAAM,IAHvBD,EAAIvD,KAASwD,GAAK,EAAK,GAAM,KAV7BD,EAAIvD,KAAY,GAAJwD,EAAU,KAkB1B,OAAOD,EAmTmB,SAAfG,EAAwBJ,GACnC,IACE,OAAOK,EAAOC,aAAaN,GAAK,GAChC,MAAOZ,GACPmB,QAAQX,MAAM,wBAAyBR,GAEzC,OAAO,KCjVT,IAAaoB,EAAY,CAIvBC,aAAa,EAIbC,YAAY,EAKZC,YAAa,qBCZFC,EAAS,SAASC,EAAoBC,GACjD,IAAKD,EACH,MAAME,EAAeD,IAOZC,EAAiB,SAASD,GACrC,OAAO,IAAIE,MACT,sBACER,EAAUG,YACV,6BACAG,IFsEOT,EAAiB,CAI5BY,eAAgB,KAKhBC,eAAgB,KAMhBC,sBAAuB,KAMvBC,sBAAuB,KAMvBC,kBACE,iEAKFC,mBACE,OAAOxE,KAAKuE,kBAAoB,OAMlCE,2BACE,OAAOzE,KAAKuE,kBAAoB,OAUlCG,mBAAoC,mBAATC,KAW3BC,gBAAA,SAAgBC,EAA8BC,GAC5C,IAAKnF,MAAMoF,QAAQF,GACjB,MAAMX,MAAM,iDAGdlE,KAAKgF,QAQL,IANA,IAAMC,EAAgBH,EAClB9E,KAAKqE,sBACLrE,KAAKmE,eAEHe,EAAS,GAEN1E,EAAI,EAAGA,EAAIqE,EAAMlE,OAAQH,GAAK,EAAG,CACxC,IAAM2E,EAAQN,EAAMrE,GACd4E,EAAY5E,EAAI,EAAIqE,EAAMlE,OAC1B0E,EAAQD,EAAYP,EAAMrE,EAAI,GAAK,EACnC8E,EAAY9E,EAAI,EAAIqE,EAAMlE,OAC1B4E,EAAQD,EAAYT,EAAMrE,EAAI,GAAK,EAEnCgF,EAAWL,GAAS,EACpBM,GAAqB,EAARN,IAAiB,EAAME,GAAS,EAC/CK,GAAqB,GAARL,IAAiB,EAAME,GAAS,EAC7CI,EAAmB,GAARJ,EAEVD,IACHK,EAAW,GAENP,IACHM,EAAW,KAIfR,EAAO7C,KACL4C,EAAcO,GACdP,EAAcQ,GACdR,EAAcS,GACdT,EAAcU,IAIlB,OAAOT,EAAOU,KAAK,KAWrBC,aAAA,SAAahB,EAAeC,GAG1B,OAAI9E,KAAK0E,qBAAuBI,EACvBgB,KAAKjB,GAEP7E,KAAK4E,gBAAgB3B,EAAkB4B,GAAQC,IAWxDtB,aAAA,SAAaqB,EAAeC,GAG1B,OAAI9E,KAAK0E,qBAAuBI,EACvBH,KAAKE,GA3LQ,SAASkB,GAKjC,IAHA,IAAM5C,EAAgB,GAClB6C,EAAM,EACR5C,EAAI,EACC4C,EAAMD,EAAMpF,QAAQ,CACzB,IAAMsF,EAAKF,EAAMC,KACjB,GAAIC,EAAK,IACP9C,EAAIC,KAAO8C,OAAOC,aAAaF,QAC1B,GAAS,IAALA,GAAYA,EAAK,IAAK,CAC/B,IAAMG,EAAKL,EAAMC,KACjB7C,EAAIC,KAAO8C,OAAOC,cAAoB,GAALF,IAAY,EAAW,GAALG,QAC9C,GAAS,IAALH,GAAYA,EAAK,IAAK,CAE/B,IAGMI,IACI,EAALJ,IAAW,IAAa,IAJvBG,EAAKL,EAAMC,QAImB,IAAa,IAH3CM,EAAKP,EAAMC,QAGuC,EAAW,GAFxDD,EAAMC,MAGf,MACF7C,EAAIC,KAAO8C,OAAOC,aAAa,OAAUE,GAAK,KAC9ClD,EAAIC,KAAO8C,OAAOC,aAAa,OAAc,KAAJE,QACpC,CACCD,EAAKL,EAAMC,KAAjB,IACMM,EAAKP,EAAMC,KACjB7C,EAAIC,KAAO8C,OAAOC,cACT,GAALF,IAAY,IAAa,GAALG,IAAY,EAAW,GAALE,IAI9C,OAAOnD,EAAIyC,KAAK,IA+JPW,CAAkBvG,KAAKwG,wBAAwB3B,EAAOC,KAkB/D0B,wBAAA,SAAwB3B,EAAeC,GACrC9E,KAAKgF,QAQL,IANA,IAAMyB,EAAgB3B,EAClB9E,KAAKsE,sBACLtE,KAAKoE,eAEHc,EAAmB,GAEhB1E,EAAI,EAAGA,EAAIqE,EAAMlE,QAAU,CAClC,IAAMwE,EAAQsB,EAAc5B,EAAM6B,OAAOlG,MAGnC6E,EADY7E,EAAIqE,EAAMlE,OACF8F,EAAc5B,EAAM6B,OAAOlG,IAAM,EAIrD+E,IAHJ/E,EAEoBqE,EAAMlE,OACF8F,EAAc5B,EAAM6B,OAAOlG,IAAM,GAIrDmG,IAHJnG,EAEoBqE,EAAMlE,OACF8F,EAAc5B,EAAM6B,OAAOlG,IAAM,GAG3D,KAFEA,EAEW,MAAT2E,GAA0B,MAATE,GAA0B,MAATE,GAA0B,MAAToB,EACrD,MAAMzC,QAGR,IAAMsB,EAAYL,GAAS,EAAME,GAAS,EAG1C,GAFAH,EAAO7C,KAAKmD,GAEE,KAAVD,EAAc,CAChB,IAAME,EAAaJ,GAAS,EAAK,IAASE,GAAS,EAGnD,GAFAL,EAAO7C,KAAKoD,GAEE,KAAVkB,EAAc,CAChB,IAAMjB,EAAaH,GAAS,EAAK,IAAQoB,EACzCzB,EAAO7C,KAAKqD,KAKlB,OAAOR,GAQTF,iBACE,IAAKhF,KAAKmE,eAAgB,CACxBnE,KAAKmE,eAAiB,GACtBnE,KAAKoE,eAAiB,GACtBpE,KAAKqE,sBAAwB,GAC7BrE,KAAKsE,sBAAwB,GAG7B,IAAK,IAAI9D,EAAI,EAAGA,EAAIR,KAAKwE,aAAa7D,OAAQH,IAC5CR,KAAKmE,eAAe3D,GAAKR,KAAKwE,aAAakC,OAAOlG,GAClDR,KAAKoE,eAAepE,KAAKmE,eAAe3D,IAAMA,EAC9CR,KAAKqE,sBAAsB7D,GAAKR,KAAKyE,qBAAqBiC,OAAOlG,IACjER,KAAKsE,sBAAsBtE,KAAKqE,sBAAsB7D,IAAMA,IAGnDR,KAAKuE,kBAAkB5D,SAC9BX,KAAKoE,eAAepE,KAAKyE,qBAAqBiC,OAAOlG,IAAMA,EAC3DR,KAAKsE,sBAAsBtE,KAAKwE,aAAakC,OAAOlG,IAAMA,MGpTpE,SAAgBoG,EAAYzE,GAC1B,OAeF,SAAgB0E,EAAWC,EAAiBC,GAC1C,KAAMA,aAAkBvH,QACtB,OAAOuH,EAGT,OAAQA,EAAO9G,aACb,KAAK+G,KAGH,IAAMC,EAAYF,EAClB,OAAO,IAAIC,KAAKC,EAAUC,WAE5B,KAAK1H,YACY2H,IAAXL,IACFA,EAAS,IAEX,MACF,KAAKnH,MAEHmH,EAAS,GACT,MAEF,QAEE,OAAOC,EAGX,IAAK,IAAMK,KAAQL,EACZA,EAAOlH,eAAeuH,KAG1BN,EAAsCM,GAAQP,EAC5CC,EAAsCM,GACtCL,EAAsCK,KAI3C,OAAON,EApDAD,MAAWM,EAAWhF,GCJ/B,OAgBEkF,yBAAA,SACEC,GADF,WAGE,OAAO,SAACxE,EAAOX,GACTW,EACFyE,EAAKC,OAAO1E,GAEZyE,EAAKE,QAAQtF,GAES,mBAAbmF,IAGTC,EAAKG,QAAQC,MAAM,cAIK,IAApBL,EAAS3G,OACX2G,EAASxE,GAETwE,EAASxE,EAAOX,SA/BxB,aAAA,WAFAnC,YAAoC,aACpCA,aAAqC,aAEnCA,KAAK0H,QAAU,IAAIE,QAAQ,SAACH,EAASD,GACnCD,EAAKE,QAAUA,EACfF,EAAKC,OAASA,ICiBpB,SAAgBK,IACd,MACoB,oBAAXC,WAGJA,OAAgB,SAAKA,OAAiB,UAAKA,OAAiB,WAC/D,oDAAoDC,KAtB/B,oBAAdC,WAC2B,iBAA3BA,UAAqB,UAErBA,UAAqB,UAErB,IA4DX,SAAgBC,IACd,OAAkE,IAAzBvE,EAAUE,WC9BrD,SA0BmCsE,MAAAhE,UAGjC,WAAqBiE,EAAcnE,GAAnC,MACEoE,YAAMpE,gBADauD,OAAAY,EAFZZ,OA3BQ,gBAkCf/H,OAAOC,eAAe8H,EAAMc,EAAcnI,WAItCgE,MAAMoE,mBACRpE,MAAMoE,kBAAkBf,EAAMgB,EAAarI,UAAUC,iBAezDoI,mBAAA,SACEJ,OACA,aAAAK,mBAAAA,IAAAC,oBAeA,IAbA,IAAMC,EAAcD,EAAK,IAAoB,GACvCE,EAAc3I,KAAK4I,YAAWT,EAC9BU,EAAW7I,KAAK8I,OAAOX,GAEvBnE,EAAU6E,EAwBpB,SAAyBA,EAAkBJ,GACzC,OAAOI,EAASE,QAAQC,EAAS,SAAC5H,EAAG6H,GACnC,IAAM9G,EAAQsG,EAAKQ,GACnB,OAAgB,MAAT9G,EAAgBA,EAAM+G,WAAa,IAAID,SA3BnBE,CAAgBN,EAAUH,GAAc,QAE7DU,EAAiBpJ,KAAKqJ,iBAAgBrF,OAAY2E,OAElD7F,EAAQ,IAAIuF,EAAcM,EAAUS,OAKxBE,EAAA9J,OAAO+J,KAAKb,GAAZc,WAAAA,IAAyB,CAAtC,IAAMP,OACa,MAAlBA,EAAIQ,OAAO,KACTR,KAAOnG,GACTW,QAAQiG,KACN,yCAAyCT,sCAG7CnG,EAAMmG,GAAOP,EAAWO,IAI5B,OAAOnG,MAlCT,WACmB8F,EACAS,EACAP,GAFA9I,aAAA4I,EACA5I,iBAAAqJ,EACArJ,YAAA8I,EA0CrB,IAAME,EAAU,gBCnIhB,SAAgBW,EAASzG,GACvB,OAAO0G,KAAKC,MAAM3G,GAQpB,SAAgB4G,EAAUrB,GACxB,OAAOmB,KAAKE,UAAUrB,GCKF,SAATsB,EAAkBC,GAC7B,IAAIC,EAAS,GACXC,EAAiB,GACjBzB,EAAO,GACP0B,EAAY,GAEd,IACE,IAAMC,EAAQJ,EAAMK,MAAM,KAC1BJ,EAASN,EAASrG,EAAa8G,EAAM,KAAO,IAC5CF,EAASP,EAASrG,EAAa8G,EAAM,KAAO,IAC5CD,EAAYC,EAAM,GAClB3B,EAAOyB,EAAU,GAAK,UACfA,EAAU,EACjB,MAAO5H,IAET,MAAO,CACL2H,SACAC,SACAzB,OACA0B,aCxCJ,SAAgBG,EAA2BC,EAAQtB,GACjD,OAAOzJ,OAAOU,UAAUL,eAAee,KAAK2J,EAAKtB,GAGnD,SAAgBuB,EACdD,EACAtB,GAEA,OAAIzJ,OAAOU,UAAUL,eAAee,KAAK2J,EAAKtB,GACrCsB,EAAItB,QAEX,EAIJ,SAAgBwB,EAAQF,GACtB,IAAK,IAAMtB,KAAOsB,EAChB,GAAI/K,OAAOU,UAAUL,eAAee,KAAK2J,EAAKtB,GAC5C,OAAO,EAGX,OAAO,EAGT,SAAgByB,EACdH,EACAI,EACAC,GAEA,IAAMC,EAAkC,GACxC,IAAK,IAAM5B,KAAOsB,EACZ/K,OAAOU,UAAUL,eAAee,KAAK2J,EAAKtB,KAC5C4B,EAAI5B,GAAO0B,EAAG/J,KAAKgK,EAAYL,EAAItB,GAAMA,EAAKsB,IAGlD,OAAOM,ECXT,OAkDEC,kBAAA,WACE9K,KAAK+K,OAAO,GAAK,WACjB/K,KAAK+K,OAAO,GAAK,WACjB/K,KAAK+K,OAAO,GAAK,WACjB/K,KAAK+K,OAAO,GAAK,UACjB/K,KAAK+K,OAAO,GAAK,WAEjB/K,KAAKgL,OAAS,EACdhL,KAAKiL,OAAS,GAShBH,sBAAA,SAAUI,EAAqCC,GAE3CA,EADGA,GACM,EAGX,IAAMC,EAAIpL,KAAKqL,GAGf,GAAmB,iBAARH,EACT,IAAK,IAAI1K,EAAI,EAAGA,EAAI,GAAIA,IAStB4K,EAAE5K,GACC0K,EAAI7H,WAAW8H,IAAW,GAC1BD,EAAI7H,WAAW8H,EAAS,IAAM,GAC9BD,EAAI7H,WAAW8H,EAAS,IAAM,EAC/BD,EAAI7H,WAAW8H,EAAS,GAC1BA,GAAU,OAGZ,IAAS3K,EAAI,EAAGA,EAAI,GAAIA,IACtB4K,EAAE5K,GACC0K,EAAIC,IAAW,GACfD,EAAIC,EAAS,IAAM,GACnBD,EAAIC,EAAS,IAAM,EACpBD,EAAIC,EAAS,GACfA,GAAU,EAKd,IAAS3K,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAC5B,IAAMF,EAAI8K,EAAE5K,EAAI,GAAK4K,EAAE5K,EAAI,GAAK4K,EAAE5K,EAAI,IAAM4K,EAAE5K,EAAI,IAClD4K,EAAE5K,GAA+B,YAAxBF,GAAK,EAAMA,IAAM,IAG5B,IAKIW,EAAGqK,EALHC,EAAIvL,KAAK+K,OAAO,GAChBxL,EAAIS,KAAK+K,OAAO,GAChB3H,EAAIpD,KAAK+K,OAAO,GAChBzL,EAAIU,KAAK+K,OAAO,GAChBzI,EAAItC,KAAK+K,OAAO,GAIpB,IAASvK,EAAI,EAAGA,EAAI,GAAIA,IAIlB8K,EAHA9K,EAAI,GACFA,EAAI,IACNS,EAAI3B,EAAKC,GAAK6D,EAAI9D,GACd,aAEJ2B,EAAI1B,EAAI6D,EAAI9D,EACR,YAGFkB,EAAI,IACNS,EAAK1B,EAAI6D,EAAM9D,GAAKC,EAAI6D,GACpB,aAEJnC,EAAI1B,EAAI6D,EAAI9D,EACR,YAIFgB,GAAOiL,GAAK,EAAMA,IAAM,IAAOtK,EAAIqB,EAAIgJ,EAAIF,EAAE5K,GAAM,WACzD8B,EAAIhD,EACJA,EAAI8D,EACJA,EAA8B,YAAxB7D,GAAK,GAAOA,IAAM,GACxBA,EAAIgM,EACJA,EAAIjL,EAGNN,KAAK+K,OAAO,GAAM/K,KAAK+K,OAAO,GAAKQ,EAAK,WACxCvL,KAAK+K,OAAO,GAAM/K,KAAK+K,OAAO,GAAKxL,EAAK,WACxCS,KAAK+K,OAAO,GAAM/K,KAAK+K,OAAO,GAAK3H,EAAK,WACxCpD,KAAK+K,OAAO,GAAM/K,KAAK+K,OAAO,GAAKzL,EAAK,WACxCU,KAAK+K,OAAO,GAAM/K,KAAK+K,OAAO,GAAKzI,EAAK,YAG1CwI,mBAAA,SAAO/E,EAAwCpF,GAE7C,GAAa,MAAToF,EAAJ,MAIeoB,IAAXxG,IACFA,EAASoF,EAAMpF,QAUjB,IAPA,IAAM6K,EAAmB7K,EAASX,KAAKyL,UACnChL,EAAI,EAEFyK,EAAMlL,KAAK0L,KACbC,EAAQ3L,KAAKgL,OAGVvK,EAAIE,GAAQ,CAKjB,GAAc,IAAVgL,EACF,KAAOlL,GAAK+K,GACVxL,KAAK4L,UAAU7F,EAAOtF,GACtBA,GAAKT,KAAKyL,UAId,GAAqB,iBAAV1F,GACT,KAAOtF,EAAIE,GAIT,GAHAuK,EAAIS,GAAS5F,EAAM1C,WAAW5C,KAE5BA,IADAkL,IAEY3L,KAAKyL,UAAW,CAC5BzL,KAAK4L,UAAUV,GACfS,EAAQ,EAER,YAIJ,KAAOlL,EAAIE,GAIT,GAHAuK,EAAIS,GAAS5F,EAAMtF,KAEjBA,IADAkL,IAEY3L,KAAKyL,UAAW,CAC5BzL,KAAK4L,UAAUV,GACfS,EAAQ,EAER,OAMR3L,KAAKgL,OAASW,EACd3L,KAAKiL,QAAUtK,IAIjBmK,mBAAA,WACE,IAAMe,EAAmB,GACrBC,EAA0B,EAAd9L,KAAKiL,OAGjBjL,KAAKgL,OAAS,GAChBhL,KAAK+L,OAAO/L,KAAKgM,KAAM,GAAKhM,KAAKgL,QAEjChL,KAAK+L,OAAO/L,KAAKgM,KAAMhM,KAAKyL,WAAazL,KAAKgL,OAAS,KAIzD,IAAK,IAAIxK,EAAIR,KAAKyL,UAAY,EAAQ,IAALjL,EAASA,IACxCR,KAAK0L,KAAKlL,GAAiB,IAAZsL,EACfA,GAAa,IAGf9L,KAAK4L,UAAU5L,KAAK0L,MAEpB,IAAIjL,EAAI,EACR,IAASD,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIyL,EAAI,GAAS,GAALA,EAAQA,GAAK,EAC5BJ,EAAOpL,GAAMT,KAAK+K,OAAOvK,IAAMyL,EAAK,MAClCxL,EAGN,OAAOoL,MAvMT,aAjCQ7L,YAAmB,GAMnBA,UAAiB,GAOjBA,QAAe,GAMfA,UAAiB,GAKjBA,YAAiB,EAKjBA,YAAiB,EAKvBA,KAAKyL,UAAY,GAEjBzL,KAAKgM,KAAK,GAAK,IACf,IAAK,IAAIxL,EAAI,EAAGA,EAAIR,KAAKyL,YAAajL,EACpCR,KAAKgM,KAAKxL,GAAK,EAGjBR,KAAKkM,QC9DuB,SAAnBC,EACXC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAMJ,GALID,EAAWF,EACbG,EAAW,YAAcH,EACLC,EAAXC,IACTC,EAAwB,IAAbF,EAAiB,OAAS,gBAAkBA,GAErDE,EASF,MAAM,IAAItI,MAPRkI,EACA,4BACAG,GACc,IAAbA,EAAiB,aAAe,eACjC,YACAC,EACA,KAaN,SAAgBC,EACdL,EACAM,EACAC,GAEA,IAAIC,EAAU,GACd,OAAQF,GACN,KAAK,EACHE,EAAUD,EAAW,QAAU,QAC/B,MACF,KAAK,EACHC,EAAUD,EAAW,SAAW,SAChC,MACF,KAAK,EACHC,EAAUD,EAAW,QAAU,QAC/B,MACF,KAAK,EACHC,EAAUD,EAAW,SAAW,SAChC,MACF,QACE,MAAM,IAAIzI,MACR,mEAIN,IAAIpB,EAAQsJ,EAAS,YAGrB,OADAtJ,GAAS8J,EAAU,aA4BrB,SAAgBC,EACdT,EACAM,EACApF,EACAqF,GAEA,KAAIA,GAAarF,IAGO,mBAAbA,EACT,MAAM,IAAIpD,MACRuI,EAAYL,EAAQM,EAAgBC,GAClC,6BAKR,SAAgBG,EACdV,EACAM,EACAK,EACAJ,GAEA,KAAIA,GAAaI,KAGM,iBAAZA,GAAoC,OAAZA,GACjC,MAAM,IAAI7I,MACRuI,EAAYL,EAAQM,EAAgBC,GAClC,mCCtEoB,SAAfK,EAAwB9J,GAEnC,IADA,IAAItD,EAAI,EACCY,EAAI,EAAGA,EAAI0C,EAAIvC,OAAQH,IAAK,CACnC,IAAM4C,EAAIF,EAAIG,WAAW7C,GACrB4C,EAAI,IACNxD,IACSwD,EAAI,KACbxD,GAAK,EACS,OAALwD,GAAeA,GAAK,OAE7BxD,GAAK,EACLY,KAEAZ,GAAK,EAGT,OAAOA,EAvDT,ICDYqN,EAAAA,GAAAA,EAAAA,EAAAA,0BAEVA,yBACAA,mBACAA,mBACAA,qBACAA,uBAwBoC,SAAhCC,EAAiCC,EAAUC,OAAS,aAAA5E,mBAAAA,IAAA6E,oBACxD,KAAID,EAAUD,EAASG,UAAvB,CAGA,IAAMC,GAAM,IAAIvG,MAAOwG,cACvB,OAAQJ,GAON,KAAKH,EAASQ,MAGd,KAAKR,EAASS,QACZjK,QAAQkK,UAARlK,SAAY,IAAI8J,QAASJ,EAASS,iBAAYP,IAC9C,MACF,KAAKJ,EAASY,KACZpK,QAAQqK,WAARrK,SAAa,IAAI8J,QAASJ,EAASS,iBAAYP,IAC/C,MACF,KAAKJ,EAASc,KACZtK,QAAQiG,WAARjG,SAAa,IAAI8J,QAASJ,EAASS,iBAAYP,IAC/C,MACF,KAAKJ,EAASe,MACZvK,QAAQX,YAARW,SAAc,IAAI8J,QAASJ,EAASS,iBAAYP,IAChD,MACF,QACE,MAAM,IAAInJ,MACR,8DAA8DkJ,SA/CtE,IAAMa,EAA4BhB,EAASY,QAsEzCrO,sBAAI0O,4BAAJ,WACE,OAAOlO,KAAKmO,eAEd,SAAaC,GACX,KAAMA,KAAOnB,GACX,MAAM,IAAIhL,UAAU,wCAEtBjC,KAAKmO,UAAYC,mCAOnB5O,sBAAI0O,8BAAJ,WACE,OAAOlO,KAAKqO,iBAEd,SAAeD,GACb,GAAmB,mBAARA,EACT,MAAM,IAAInM,UAAU,qDAEtBjC,KAAKqO,YAAcD,mCAOrBF,kBAAA,eAAM,aAAA1F,mBAAAA,IAAA6E,kBACJrN,KAAKqO,kBAALrO,MAAiBA,KAAMiN,EAASQ,cAAUJ,KAE5Ca,gBAAA,eAAI,aAAA1F,mBAAAA,IAAA6E,kBACFrN,KAAKqO,kBAALrO,MAAiBA,KAAMiN,EAASS,gBAAYL,KAE9Ca,iBAAA,eAAK,aAAA1F,mBAAAA,IAAA6E,kBACHrN,KAAKqO,kBAALrO,MAAiBA,KAAMiN,EAASY,aAASR,KAE3Ca,iBAAA,eAAK,aAAA1F,mBAAAA,IAAA6E,kBACHrN,KAAKqO,kBAALrO,MAAiBA,KAAMiN,EAASc,aAASV,KAE3Ca,kBAAA,eAAM,aAAA1F,mBAAAA,IAAA6E,kBACJrN,KAAKqO,kBAALrO,MAAiBA,KAAMiN,EAASe,cAAUX,QApD5C,WAAmBO,GAAA5N,UAAA4N,EAUX5N,eAAYiO,EAcZjO,iBAA0BkN,ECnGpC,OAaEoB,gBAAA,SAAIrF,EAAa9G,GACF,MAATA,EACFnC,KAAKuO,YAAYC,WAAWxO,KAAKyO,cAAcxF,IAE/CjJ,KAAKuO,YAAYG,QAAQ1O,KAAKyO,cAAcxF,GAAMa,EAAU3H,KAQhEmM,gBAAA,SAAIrF,GACF,IAAM0F,EAAY3O,KAAKuO,YAAYK,QAAQ5O,KAAKyO,cAAcxF,IAC9D,OAAiB,MAAb0F,EACK,KAEAhF,EAASgF,IAOpBL,mBAAA,SAAOrF,GACLjJ,KAAKuO,YAAYC,WAAWxO,KAAKyO,cAAcxF,KASjDqF,0BAAA,SAAcV,GACZ,OAAO5N,KAAK6O,QAAUjB,GAGxBU,qBAAA,WACE,OAAOtO,KAAKuO,YAAYrF,eA7C1B,WAAoBqF,GAAAvO,iBAAAuO,EALZvO,aAAU,YCNpB,OAGE8O,gBAAA,SAAI7F,EAAa9G,GACF,MAATA,SACKnC,KAAK+O,OAAO9F,GAEnBjJ,KAAK+O,OAAO9F,GAAO9G,GAIvB2M,gBAAA,SAAI7F,GACF,OAAIqB,EAAStK,KAAK+O,OAAQ9F,GACjBjJ,KAAK+O,OAAO9F,GAEd,MAGT6F,mBAAA,SAAO7F,UACEjJ,KAAK+O,OAAO9F,OAnBvB,aACUjJ,YAA+B,GAqBvCA,wBAAoB,EChBG,SAAnBgP,EACJC,GAEA,IAGE,GACoB,oBAAXnH,aAC2B,IAA3BA,OAAOmH,GACd,CAEA,IAAMC,EAAapH,OAAOmH,GAG1B,OAFAC,EAAWR,QAAQ,oBAAqB,SACxCQ,EAAWV,WAAW,qBACf,IAAIF,EAAkBY,IAE/B,MAAO5M,IAIT,OAAO,IAAIwM,ECSO,SAAPK,EAAgBjM,GAC3B,IAAMkM,EL3ByB,SAASlM,GAGxC,IAFA,IAAMC,EAAgB,GAClBvD,EAAI,EACCY,EAAI,EAAGA,EAAI0C,EAAIvC,OAAQH,IAAK,CACnC,IAAI4C,EAAIF,EAAIG,WAAW7C,GAGvB,GAAS,OAAL4C,GAAeA,GAAK,MAAQ,CAC9B,IAAMiM,EAAOjM,EAAI,MAEjBU,IADAtD,EACW0C,EAAIvC,OAAQ,2CAEvByC,EAAI,OAAWiM,GAAQ,KADXnM,EAAIG,WAAW7C,GAAK,OAI9B4C,EAAI,IACND,EAAIvD,KAAOwD,GACFA,EAAI,KACbD,EAAIvD,KAAQwD,GAAK,EAAK,KAEbA,EAAI,MACbD,EAAIvD,KAAQwD,GAAK,GAAM,KAIvBD,EAAIvD,KAAQwD,GAAK,GAAM,IACvBD,EAAIvD,KAASwD,GAAK,GAAM,GAAM,KAJ9BD,EAAIvD,KAASwD,GAAK,EAAK,GAAM,KAH7BD,EAAIvD,KAAY,GAAJwD,EAAU,KAY1B,OAAOD,EKJWF,CAAkBC,GAC9BiM,EAAO,IAAIrE,EACjBqE,EAAKpD,OAAOqD,GACZ,IAAME,EAAYH,EAAKtD,SACvB,OAAOtI,EAAOqB,gBAAgB0K,GA+CH,SAAhBC,EACXC,EACAC,GAEA3L,GACG2L,IAA2B,IAAZD,IAAgC,IAAZA,EACpC,+CAEc,IAAZA,GACFE,GAAUpC,SAAWL,EAASS,QAC9BiC,GAASD,GAAU/B,IAAIiC,KAAKF,IACxBD,GAAYI,GAAeC,IAAI,mBAAmB,IAC1B,mBAAZN,EAChBG,GAASH,GAETG,GAAS,KACTE,GAAeE,OAAO,oBAQP,SAANpC,QAAe,aAAAnF,mBAAAA,IAAAwH,kBAO1B,IANkB,IAAdC,KACFA,IAAY,EACG,OAAXN,KAA6D,IAA1CE,GAAeK,IAAI,oBACxCX,GAAc,IAGdI,GAAQ,CACV,IAAM3L,EAAUmM,GAAiBtP,MAAM,KAAMmP,GAC7CL,GAAO3L,IAQe,SAAboM,EACXC,GAEA,OAAO,eAAS,aAAA7H,mBAAAA,IAAAwH,kBACdrC,kBAAI0C,GAAWL,KAOE,SAARlN,QAAiB,aAAA0F,mBAAAA,IAAAwH,kBAC5B,IAAMhM,EAAU,4BAA8BmM,kBAAoBH,IAClEN,GAAU5M,MAAMkB,GAMG,SAARsM,SAAiB,aAAA9H,mBAAAA,IAAAwH,kBAC5B,IAAMhM,EAAU,yBAAyBmM,kBAAoBH,IAE7D,MADAN,GAAU5M,MAAMkB,GACV,IAAIE,MAAMF,GAME,SAAP0F,SAAgB,aAAAlB,mBAAAA,IAAAwH,kBAC3B,IAAMhM,EAAU,qBAAuBmM,kBAAoBH,IAC3DN,GAAUhG,KAAK1F,GAsCkB,SAAtBuM,GAA+B9H,GAC1C,MACkB,iBAATA,IACNA,GAAQA,GACPA,GAAQ+H,OAAOC,mBACfhI,GAAQ+H,OAAOE,mBA8FQ,SAAhBC,GAAyBpF,EAAWhM,GAC/C,OAAIgM,IAAMhM,EACD,EACEgM,EAAIhM,GACL,EAED,EASe,SAAbqR,GACX3H,EACAsB,GAEA,GAAIA,GAAOtB,KAAOsB,EAChB,OAAOA,EAAItB,GAEX,MAAM,IAAI/E,MACR,yBAA2B+E,EAAM,gBAAkBa,EAAUS,IAqClC,SAApBsG,GACX3N,EACA4N,GAEA,IAAMC,EAAM7N,EAAIvC,OAEhB,GAAIoQ,GAAOD,EACT,MAAO,CAAC5N,GAIV,IADA,IAAM8N,EAAW,GACR5N,EAAI,EAAGA,EAAI2N,EAAK3N,GAAK0N,EACVC,EAAd3N,EAAI0N,EACNE,EAAS3O,KAAKa,EAAI+N,UAAU7N,EAAG2N,IAE/BC,EAAS3O,KAAKa,EAAI+N,UAAU7N,EAAGA,EAAI0N,IAGvC,OAAOE,ED/WT,ICkBME,GDMOC,GAAoBnC,EAAiB,gBAGrCa,GAAiBb,EAAiB,kBC3BzCU,GAAY,IAAIxB,EAAO,sBAUhBkD,GACX,kCAMWC,IACPH,GAAK,EACF,WACL,OAAOA,OAsBLf,GAAmB,eAAS,aAAA3H,mBAAAA,IAAAwH,kBAEhC,IADA,IAAIhM,EAAU,GACLxD,EAAI,EAAGA,EAAIwP,EAASrP,OAAQH,IAEjCb,MAAMoF,QAAQiL,EAASxP,KACtBwP,EAASxP,IACe,iBAAhBwP,EAASxP,IACc,iBAAvBwP,EAASxP,GAAGG,OAErBqD,GAAWmM,GAAiBtP,MAAM,KAAMmP,EAASxP,IACjB,iBAAhBwP,EAASxP,GACzBwD,GAAW8F,EAAUkG,EAASxP,IAE9BwD,GAAWgM,EAASxP,GAEtBwD,GAAW,IAGb,OAAOA,GAOE2L,GAAuC,KAO9CM,IAAY,EA2KHqB,GAAW,aAMXC,GAAW,aAQXC,GAAc,SAASjG,EAAWhM,GAC7C,GAAIgM,IAAMhM,EACR,OAAO,EACF,GAAIgM,IAAM+F,IAAY/R,IAAMgS,GACjC,OAAQ,EACH,GAAIhS,IAAM+R,IAAY/F,IAAMgG,GACjC,OAAO,EAEP,IAAME,EAASC,GAAYnG,GACzBoG,EAASD,GAAYnS,GAEvB,OAAe,OAAXkS,EACa,OAAXE,EACKF,EAASE,GAAU,EAAIpG,EAAE5K,OAASpB,EAAEoB,OAAS8Q,EAASE,GAErD,EAEU,OAAXA,EACF,EAEApG,EAAIhM,GAAK,EAAI,GA0CbqS,GAAoB,SAASrH,GACxC,GAAmB,iBAARA,GAA4B,OAARA,EAAc,OAAOT,EAAUS,GAE9D,IAAMhB,EAAO,GACb,IAAK,IAAI+B,KAAKf,EACZhB,EAAKlH,KAAKiJ,GAIZ/B,EAAKsI,OAEL,IADA,IAAI5I,EAAM,IACDzI,EAAI,EAAGA,EAAI+I,EAAK5I,OAAQH,IACrB,IAANA,IAASyI,GAAO,KACpBA,GAAOa,EAAUP,EAAK/I,IACtByI,GAAO,IACPA,GAAO2I,GAAkBrH,EAAIhB,EAAK/I,KAIpC,OADAyI,GAAO,KAqCT,SAAgB6I,GAAKvH,EAAaI,GAChC,IAAK,IAAM1B,KAAOsB,EACZA,EAAI1K,eAAeoJ,IACrB0B,EAAG1B,EAAKsB,EAAItB,IAyBmB,SAAxB8I,GAAiChQ,GAG5C,IAGExB,EACA+B,EACArB,EACA+Q,EACAxR,EACAyR,EACA/O,EA0BF,IArCAY,GAAQyM,GAAoBxO,GAAI,uBAetB,IAANA,EAGFxB,EAAI,EAAIwB,IAAOmQ,GADfjR,EADAqB,EAAI,GAEsB,EAAI,GAE9B/B,EAAIwB,EAAI,EAONd,GANFc,EAAIoQ,KAAKC,IAAIrQ,KAEJoQ,KAAKE,IAAI,GAAG,OAGnB/P,GADA0P,EAAKG,KAAKG,IAAIH,KAAKI,MAAMJ,KAAKxE,IAAI5L,GAAKoQ,KAAKK,KArBrC,OAAA,KAuBHL,KAAKM,MAAM1Q,EAAIoQ,KAAKE,IAAI,EAxBtB,GAwBiCL,GAAMG,KAAKE,IAAI,EAxBhD,OA2BN/P,EAAI,EACA6P,KAAKM,MAAM1Q,EAAIoQ,KAAKE,IAAI,GAAG,SAKnCJ,EAAO,GACFzR,EAlCK,GAkCMA,EAAGA,GAAK,EACtByR,EAAK5P,KAAKpB,EAAI,EAAI,EAAI,GACtBA,EAAIkR,KAAKI,MAAMtR,EAAI,GAErB,IAAKT,EAvCS,GAuCEA,EAAGA,GAAK,EACtByR,EAAK5P,KAAKC,EAAI,EAAI,EAAI,GACtBA,EAAI6P,KAAKI,MAAMjQ,EAAI,GAErB2P,EAAK5P,KAAK9B,EAAI,EAAI,GAClB0R,EAAKS,UACLxP,EAAM+O,EAAKrM,KAAK,IAGhB,IAAI+M,EAAgB,GACpB,IAAKnS,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC1B,IAAIoS,EAAUC,SAAS3P,EAAI4P,OAAOtS,EAAG,GAAI,GAAG0I,SAAS,IAC9B,IAAnB0J,EAAQjS,SAAciS,EAAU,IAAMA,GAC1CD,GAAgCC,EAElC,OAAOD,EAAcI,cA0FO,SAAjBC,GAA0BrI,GACrC,IACEA,IACA,MAAOrI,GAEP2Q,WAAW,WAKT,IAAMC,EAAQ5Q,EAAE4Q,OAAS,GAEzB,MADAxJ,GAAK,yCAA0CwJ,GACzC5Q,GACL6P,KAAKI,MAAM,KAoEmB,SAAxBY,GACXxI,EACAyI,GAEA,IAAMC,EAA2BJ,WAAWtI,EAAIyI,GAIhD,MAHuB,iBAAZC,GAAyBA,EAAuB,OACxDA,EAAuB,QAEnBA,EA5OF,IAiHMC,GAAkB,IAAIC,OAAO,iBAO7B7B,GAAc,SAASxO,GAClC,GAAIoQ,GAAgBvL,KAAK7E,GAAM,CAC7B,IAAMsQ,EAAShD,OAAOtN,GACtB,IAAe,YAAXsQ,GAAyBA,GAAU,WACrC,OAAOA,EAGX,OAAO,UChhBPhU,sBAAWiU,gBAAX,WACE,OAAO,IAAIA,GAAK,qCA6BlBA,sBAAA,WACE,OAAIzT,KAAK0T,WAAa1T,KAAK2T,QAAQhT,OAAe,KAE3CX,KAAK2T,QAAQ3T,KAAK0T,YAM3BD,uBAAA,WACE,OAAOzT,KAAK2T,QAAQhT,OAASX,KAAK0T,WAMpCD,sBAAA,WACE,IAAIG,EAAW5T,KAAK0T,UAIpB,OAHIE,EAAW5T,KAAK2T,QAAQhT,QAC1BiT,IAEK,IAAIH,GAAKzT,KAAK2T,QAASC,IAMhCH,qBAAA,WACE,OAAIzT,KAAK0T,UAAY1T,KAAK2T,QAAQhT,OACzBX,KAAK2T,QAAQ3T,KAAK2T,QAAQhT,OAAS,GAErC,MAGT8S,sBAAA,WAEE,IADA,IAAII,EAAa,GACRrT,EAAIR,KAAK0T,UAAWlT,EAAIR,KAAK2T,QAAQhT,OAAQH,IAC5B,KAApBR,KAAK2T,QAAQnT,KAAWqT,GAAc,IAAM7T,KAAK2T,QAAQnT,IAG/D,OAAOqT,GAAc,KAGvBJ,gCAAA,WAEE,IADA,IAAII,EAAa,GACRrT,EAAIR,KAAK0T,UAAWlT,EAAIR,KAAK2T,QAAQhT,OAAQH,IAC5B,KAApBR,KAAK2T,QAAQnT,KACfqT,GAAc,IAAMC,mBAAmB5N,OAAOlG,KAAK2T,QAAQnT,MAG/D,OAAOqT,GAAc,KASvBJ,mBAAA,SAAMM,GACJ,oBADIA,KACG/T,KAAK2T,QAAQlK,MAAMzJ,KAAK0T,UAAYK,IAM7CN,oBAAA,WACE,GAAIzT,KAAK0T,WAAa1T,KAAK2T,QAAQhT,OAAQ,OAAO,KAGlD,IADA,IAAMqT,EAAS,GACNxT,EAAIR,KAAK0T,UAAWlT,EAAIR,KAAK2T,QAAQhT,OAAS,EAAGH,IACxDwT,EAAO3R,KAAKrC,KAAK2T,QAAQnT,IAE3B,OAAO,IAAIiT,GAAKO,EAAQ,IAO1BP,mBAAA,SAAMQ,GAEJ,IADA,IAAMD,EAAS,GACNxT,EAAIR,KAAK0T,UAAWlT,EAAIR,KAAK2T,QAAQhT,OAAQH,IACpDwT,EAAO3R,KAAKrC,KAAK2T,QAAQnT,IAE3B,GAAIyT,aAAwBR,GAC1B,IACMjT,EAAIyT,EAAaP,UACrBlT,EAAIyT,EAAaN,QAAQhT,OACzBH,IAEAwT,EAAO3R,KAAK4R,EAAaN,QAAQnT,QAGnC,CAAA,IAAM0T,EAAcD,EAAa5J,MAAM,KACvC,IAAS7J,EAAI,EAAGA,EAAI0T,EAAYvT,OAAQH,IACV,EAAxB0T,EAAY1T,GAAGG,QAAYqT,EAAO3R,KAAK6R,EAAY1T,IAI3D,OAAO,IAAIiT,GAAKO,EAAQ,IAM1BP,qBAAA,WACE,OAAOzT,KAAK0T,WAAa1T,KAAK2T,QAAQhT,QAQjC8S,gBAAP,SAAoBU,EAAiBC,GACnC,IAAMC,EAAQF,EAAUG,WACtBC,EAAQH,EAAUE,WACpB,GAAc,OAAVD,EACF,OAAOD,EACF,GAAIC,IAAUE,EACnB,OAAOd,GAAKe,aAAaL,EAAUM,WAAYL,EAAUK,YAEzD,MAAM,IAAIvQ,MACR,8BACEkQ,EACA,8BAEAD,EACA,MAUDV,gBAAP,SAAoBiB,EAAYC,GAG9B,IAFA,IAAMC,EAAWF,EAAKjL,QAChBoL,EAAYF,EAAMlL,QACfjJ,EAAI,EAAGA,EAAIoU,EAASjU,QAAUH,EAAIqU,EAAUlU,OAAQH,IAAK,CAChE,IAAMsU,EAAMtD,GAAYoD,EAASpU,GAAIqU,EAAUrU,IAC/C,GAAY,IAARsU,EAAW,OAAOA,EAExB,OAAIF,EAASjU,SAAWkU,EAAUlU,OAAe,EAC1CiU,EAASjU,OAASkU,EAAUlU,QAAU,EAAI,GAQnD8S,oBAAA,SAAOsB,GACL,GAAI/U,KAAKgV,cAAgBD,EAAMC,YAC7B,OAAO,EAGT,IACE,IAAIxU,EAAIR,KAAK0T,UAAWzH,EAAI8I,EAAMrB,UAClClT,GAAKR,KAAK2T,QAAQhT,OAClBH,IAAKyL,IAEL,GAAIjM,KAAK2T,QAAQnT,KAAOuU,EAAMpB,QAAQ1H,GACpC,OAAO,EAIX,OAAO,GAQTwH,sBAAA,SAASsB,GACP,IAAIvU,EAAIR,KAAK0T,UACTzH,EAAI8I,EAAMrB,UACd,GAAI1T,KAAKgV,YAAcD,EAAMC,YAC3B,OAAO,EAET,KAAOxU,EAAIR,KAAK2T,QAAQhT,QAAQ,CAC9B,GAAIX,KAAK2T,QAAQnT,KAAOuU,EAAMpB,QAAQ1H,GACpC,OAAO,IAEPzL,IACAyL,EAEJ,OAAO,OApNT,YAAYgJ,EAAiCrB,GAC3C,QAAiB,IAAbA,EAAqB,CACvB5T,KAAK2T,QAAWsB,EAAwB5K,MAAM,KAI9C,IADA,IAAI6K,EAAS,EACJ1U,EAAI,EAAGA,EAAIR,KAAK2T,QAAQhT,OAAQH,IACV,EAAzBR,KAAK2T,QAAQnT,GAAGG,SAClBX,KAAK2T,QAAQuB,GAAUlV,KAAK2T,QAAQnT,GACpC0U,KAGJlV,KAAK2T,QAAQhT,OAASuU,EAEtBlV,KAAK0T,UAAY,OAEjB1T,KAAK2T,QAAUsB,EACfjV,KAAK0T,UAAYE,EAiNvB,QAuBEpU,sBAAW2V,yBAAX,WACE,OAAO,oCAIT3V,sBAAW2V,gCAAX,WACE,OAAO,qCAITA,kBAAA,SAAKC,GAEsB,EAArBpV,KAAKqV,OAAO1U,SACdX,KAAKsV,aAAe,GAEtBtV,KAAKqV,OAAOhT,KAAK+S,GACjBpV,KAAKsV,aAAetI,EAAaoI,GACjCpV,KAAKuV,eAGPJ,iBAAA,WACE,IAAMK,EAAOxV,KAAKqV,OAAOjT,MACzBpC,KAAKsV,aAAetI,EAAawI,GAER,EAArBxV,KAAKqV,OAAO1U,SACdX,KAAKsV,aAAe,IAIhBH,yBAAR,WACE,GAAInV,KAAKsV,YAAcH,GAAeM,sBACpC,MAAM,IAAIvR,MACRlE,KAAK0V,aACH,8BACAP,GAAeM,sBACf,WACAzV,KAAKsV,YACL,MAGN,GAAItV,KAAKqV,OAAO1U,OAASwU,GAAeQ,eACtC,MAAM,IAAIzR,MACRlE,KAAK0V,aACH,iEACAP,GAAeQ,eACf,gCACA3V,KAAK4V,kBAUbT,2BAAA,WACE,OAA0B,GAAtBnV,KAAKqV,OAAO1U,OACP,GAEF,gBAAkBX,KAAKqV,OAAOzP,KAAK,KAAO,SAzEnD,YAAYiQ,EAAoBH,GAAA1V,kBAAA0V,EAE9B1V,KAAKqV,OAASQ,EAAKpM,QAEnBzJ,KAAKsV,YAAcnD,KAAK2D,IAAI,EAAG9V,KAAKqV,OAAO1U,QAE3C,IAAK,IAAIH,EAAI,EAAGA,EAAIR,KAAKqV,OAAO1U,OAAQH,IACtCR,KAAKsV,aAAetI,EAAahN,KAAKqV,OAAO7U,IAE/CR,KAAKuV,cC/QF,IAUMQ,GAAe,iBAIfC,GAAY,YAEZC,GAAe,mBCmB1BC,6BAAA,WACE,OACElW,KAAKmW,OAASnW,KAAKoW,cACnBpW,KAAKqW,gBACLrW,KAAKsW,+BAITJ,6BAAA,WACE,MAA0C,OAAnClW,KAAKoW,aAAatD,OAAO,EAAG,IAGrCoD,wBAAA,WACE,MAAuB,wBAAhBlW,KAAKuW,QAGdL,0BAAA,WACE,MACkB,mBAAhBlW,KAAKuW,QAA+C,wBAAhBvW,KAAKuW,QAI7CL,wBAAA,SAAWM,GACLA,IAAYxW,KAAKoW,eACnBpW,KAAKoW,aAAeI,EAChBxW,KAAKyW,mBACPtF,GAAkBrB,IAAI,QAAU9P,KAAKmW,KAAMnW,KAAKoW,gBAWtDF,2BAAA,SAAcQ,EAAcC,GAI1B,IAAIC,EACJ,GAJA9S,EAAuB,iBAAT4S,EAAmB,8BACjC5S,EAAyB,iBAAX6S,EAAqB,gCAG/BD,IAASV,GACXY,GACG5W,KAAK6W,OAAS,SAAW,SAAW7W,KAAKoW,aAAe,YACtD,CAAA,GAAIM,IAAST,GAIlB,MAAM,IAAI/R,MAAM,4BAA8BwS,GAH9CE,GACG5W,KAAK6W,OAAS,WAAa,WAAa7W,KAAKoW,aAAe,QAI7DpW,KAAK8W,oBACPH,EAAW,GAAI3W,KAAK+W,WAGtB,IAAMC,EAAkB,GAMxB,OAJAlF,GAAK6E,EAAQ,SAAC1N,EAAa9G,GACzB6U,EAAM3U,KAAK4G,EAAM,IAAM9G,KAGlByU,EAAUI,EAAMpR,KAAK,MAI9BsQ,sBAAA,WACE,IAAIhT,EAAMlD,KAAKiX,cAIf,OAHIjX,KAAKkX,iBACPhU,GAAO,IAAMlD,KAAKkX,eAAiB,KAE9BhU,GAITgT,yBAAA,WACE,OAAQlW,KAAK6W,OAAS,WAAa,WAAa7W,KAAKmW,UAxFvD,YACEA,EACOU,EACAE,EACAI,EACAD,EACAZ,gBADAY,mBACAZ,MAJAtW,YAAA6W,EACA7W,eAAA+W,EACA/W,mBAAAmX,EACAnX,oBAAAkX,EACAlX,mCAAAsW,EAEPtW,KAAKmW,KAAOA,EAAKpD,cACjB/S,KAAKuW,OAASvW,KAAKmW,KAAKrD,OAAO9S,KAAKmW,KAAKiB,QAAQ,KAAO,GACxDpX,KAAKoW,aAAejF,GAAkBjB,IAAI,QAAUiG,IAASnW,KAAKmW,KCmBzC,SAAhBkB,GACXC,GAEA,IAAMC,EAAYC,GAAiBF,GACjCP,EAAYQ,EAAUR,UAEC,aAArBQ,EAAUhB,QACZjG,GACEiH,EAAUpB,KACR,8EAOFY,GAA0B,aAAbA,GACM,cAArBQ,EAAUhB,QAEVjG,GACE,gFAICiH,EAAUV,QJqGK,oBAAX/O,QACPA,OAAO2P,UACP3P,OAAO2P,SAASC,WACgC,IAAhD5P,OAAO2P,SAASC,SAASN,QAAQ,WAEjC1N,GACE,6FIvGJ,IAAMyN,EAAqC,OAArBI,EAAUI,QAAwC,QAArBJ,EAAUI,OAE7D,MAAO,CACLC,SAAU,IAAI1B,GACZqB,EAAUpB,KACVoB,EAAUV,OACVE,EACAI,EACoB,GACeJ,GAAaQ,EAAUM,WAE5DhC,KAAM,IAAIpC,GAAK8D,EAAU1D,aCzDH,SAAbiE,GAAsB7O,GACjC,MACiB,iBAARA,GAAmC,IAAfA,EAAItI,SAAiBoX,GAAmBhQ,KAAKkB,GAQ3C,SAApB+O,GAA6BnE,GACxC,MACwB,iBAAfA,GACe,IAAtBA,EAAWlT,SACVsX,GAAoBlQ,KAAK8L,GAqBC,SAAlBqE,GAA2BC,GACtC,OACe,OAAbA,GACoB,iBAAbA,GACc,iBAAbA,IAA0B5H,GAAoB4H,IACrDA,GAAgC,iBAAbA,GAAyB7N,EAAS6N,EAAU,OAa7B,SAA1BC,GACXhM,EACAM,EACAjE,EACAoN,EACAlJ,GAEIA,QAAqBxF,IAATsB,GAEhB4P,GACEC,EAAelM,EAAQM,EAAgBC,GACvClE,EACAoN,GA2JwC,SAA/B0C,GACXnM,EACAM,EACAjE,EACAoN,EACAlJ,GAEA,IAAIA,QAAqBxF,IAATsB,EAAhB,CAEA,IAAMgE,EAAc6L,EAAelM,EAAQM,EAAgBC,GAE3D,IAAMlE,GAAwB,iBAATA,GAAsB9I,MAAMoF,QAAQ0D,GACvD,MAAM,IAAIvE,MACRuI,EAAc,0DAIlB,IAAM+L,EAAqB,GAC3B1G,GAAKrJ,EAAM,SAASQ,EAAa9G,GAC/B,IAAMsW,EAAU,IAAIhF,GAAKxK,GAEzB,GADAoP,GAAqB5L,EAAatK,EAAO0T,EAAKT,MAAMqD,IAC1B,cAAtBA,EAAQC,YACLR,GAAgB/V,GACnB,MAAM,IAAI+B,MACRuI,EACE,kCACAgM,EAAQvP,WACR,gGAKRsP,EAAWnW,KAAKoW,KAvFsB,SACxChM,EACA+L,GAEA,IAAIhY,EAAGiY,EACP,IAAKjY,EAAI,EAAGA,EAAIgY,EAAW7X,OAAQH,IAGjC,IADA,IAAM+I,GADNkP,EAAUD,EAAWhY,IACAiJ,QACZwC,EAAI,EAAGA,EAAI1C,EAAK5I,OAAQsL,IAC/B,GAAgB,cAAZ1C,EAAK0C,IAAsBA,IAAM1C,EAAK5I,OAAS,QAE5C,IAAKmX,GAAWvO,EAAK0C,IAC1B,MAAM,IAAI/H,MACRuI,EACE,4BACAlD,EAAK0C,GACL,aACAwM,EAAQvP,WACR,uFAUVsP,EAAW3G,KAAK4B,GAAKkF,cACrB,IAAIC,EAAwB,KAC5B,IAAKpY,EAAI,EAAGA,EAAIgY,EAAW7X,OAAQH,IAAK,CAEtC,GADAiY,EAAUD,EAAWhY,GACJ,OAAboY,GAAqBA,EAAStO,SAASmO,GACzC,MAAM,IAAIvU,MACRuI,EACE,mBACAmM,EAAS1P,WACT,qCACAuP,EAAQvP,YAGd0P,EAAWH,GAgDbI,CAA2BpM,EAAa+L,IAGV,SAAnBM,GACX1M,EACAM,EACAyL,EACAxL,GAEA,IAAIA,QAAyBxF,IAAbgR,EAAhB,CACA,GAAI5H,GAAoB4H,GACtB,MAAM,IAAIjU,MACRoU,EAAelM,EAAQM,EAAgBC,GACrC,MACAwL,EAASjP,WACT,6FAIN,IAAKgP,GAAgBC,GACnB,MAAM,IAAIjU,MACRoU,EAAelM,EAAQM,EAAgBC,GACrC,wFAKyB,SAApBoM,GACX3M,EACAM,EACAsM,EACArM,GAEA,IAAIA,QAA0BxF,IAAd6R,EAEhB,OAAQA,GACN,IAAK,QACL,IAAK,cACL,IAAK,gBACL,IAAK,gBACL,IAAK,cACH,MACF,QACE,MAAM,IAAI9U,MACRoU,EAAelM,EAAQM,EAAgBC,GACrC,6GAMiB,SAAdsM,GACX7M,EACAM,EACAzD,EACA0D,GAEA,KAAIA,QAAoBxF,IAAR8B,GACX6O,GAAW7O,IACd,MAAM,IAAI/E,MACRoU,EAAelM,EAAQM,EAAgBC,GACrC,yBACA1D,EACA,oGAK0B,SAArBiQ,GACX9M,EACAM,EACAmH,EACAlH,GAEA,KAAIA,QAA2BxF,IAAf0M,GAEXmE,GAAkBnE,IACrB,MAAM,IAAI3P,MACRoU,EAAelM,EAAQM,EAAgBC,GACrC,0BACAkH,EACA,oFAmB4B,SAAvBsF,GAAgC/M,EAAgByJ,GAC3D,GAAwB,UAApBA,EAAKvB,WACP,MAAM,IAAIpQ,MAAMkI,EAAS,6CAIF,SAAdgN,GACXhN,EACAM,EACA6K,GAGA,IAAM1D,EAAa0D,EAAU1B,KAAK3M,WAClC,GACuC,iBAA5BqO,EAAUK,SAASzB,MACO,IAAnCoB,EAAUK,SAASzB,KAAKxV,SACtBmX,GAAWP,EAAUK,SAASb,YACY,cAA1CQ,EAAUK,SAASzB,KAAK9L,MAAM,KAAK,IACd,IAAtBwJ,EAAWlT,SA9VqB,SAASkT,GAM5C,OAHEA,EAFEA,GAEWA,EAAW9K,QAAQ,mBAAoB,KAG/CiP,GAAkBnE,GAwVMwF,CAAsBxF,GAEnD,MAAM,IAAI3P,MACRoU,EAAelM,EAAQM,GAAgB,GACrC,wFDtWD,IAgDM8K,GAAmB,SAC9BF,GAYA,IAAInB,EAAO,GACTI,EAAS,GACTsB,EAAY,GACZhE,EAAa,GACbkD,EAAY,GAGVF,GAAS,EACXc,EAAS,QACT2B,EAAO,IAGT,GAAuB,iBAAZhC,EAAsB,CAE/B,IAAIiC,EAAWjC,EAAQF,QAAQ,MACf,GAAZmC,IACF5B,EAASL,EAAQrG,UAAU,EAAGsI,EAAW,GACzCjC,EAAUA,EAAQrG,UAAUsI,EAAW,IAIzC,IAAIC,EAAWlC,EAAQF,QAAQ,MACb,IAAdoC,IACFA,EAAWlC,EAAQ3W,QAErB,IAAI8Y,EAAkBnC,EAAQF,QAAQ,MACb,IAArBqC,IACFA,EAAkBnC,EAAQ3W,QAE5BwV,EAAOmB,EAAQrG,UAAU,EAAGkB,KAAKG,IAAIkH,EAAUC,IAC3CD,EAAWC,IAEb5F,EAxIN,SAAoBA,GAGlB,IAFA,IAAI6F,EAAoB,GAClB1F,EAASH,EAAWxJ,MAAM,KACvB7J,EAAI,EAAGA,EAAIwT,EAAOrT,OAAQH,IACjC,GAAuB,EAAnBwT,EAAOxT,GAAGG,OAAY,CACxB,IAAIgZ,EAAQ3F,EAAOxT,GACnB,IACEmZ,EAAQC,mBAAmBD,EAAM5Q,QAAQ,MAAO,MAChD,MAAOzG,IACToX,GAAqB,IAAMC,EAG/B,OAAOD,EA4HUG,CAAWvC,EAAQrG,UAAUuI,EAAUC,KAEtD,IAAIK,EAvHR,SAAqBC,WACfC,EAAU,GACgB,MAA1BD,EAAYrT,OAAO,KACrBqT,EAAcA,EAAY9I,UAAU,QAEtC,IAAsB,IAAA3H,EAAA2Q,EAAAF,EAAY1P,MAAM,oCAAM,CAAzC,IAAM6P,UACT,GAAuB,IAAnBA,EAAQvZ,OAAZ,CAGA,IAAMwZ,EAAKD,EAAQ7P,MAAM,KACP,IAAd8P,EAAGxZ,OACLqZ,EAAQJ,mBAAmBO,EAAG,KAAOP,mBAAmBO,EAAG,IAE3DzQ,GAAK,0BAA0BwQ,iBAAsBH,0GAGzD,OAAOC,EAuGaI,CAChB9C,EAAQrG,UAAUkB,KAAKG,IAAIgF,EAAQ3W,OAAQ8Y,KAK7B,IADhBF,EAAWpD,EAAKiB,QAAQ,OAEtBP,EAAoB,UAAXc,GAAiC,QAAXA,EAC/B2B,EAAOzG,SAASsD,EAAKlF,UAAUsI,EAAW,GAAI,KAE9CA,EAAWjC,EAAQ3W,OAGrB,IAAMyJ,EAAQ+L,EAAK9L,MAAM,KACJ,IAAjBD,EAAMzJ,QAER4V,EAASnM,EAAM,GAGf2M,EAFAc,EAAYzN,EAAM,GAAG2I,eAGK,IAAjB3I,EAAMzJ,OACf4V,EAASnM,EAAM,GACwC,cAA9CA,EAAM,GAAGX,MAAM,EAAG8P,GAAUxG,gBACrCwD,EAAS,aAGP,OAAQuD,IACV/C,EAAY+C,EAAgB,IAIhC,MAAO,CACL3D,OACAmD,OACA/C,SACAsB,YACAhB,SACAc,SACA9D,aACAkD,cC7KSgB,GAAqB,iCAQrBE,GAAsB,+BAOtBoC,GAAiB,SAkFjBhC,GAAuB,SAClC5L,EACAhE,EACA6R,GAEA,IAAMzE,EACJyE,aAAiB7G,GAAO,IAAI0B,GAAemF,EAAO7N,GAAe6N,EAEnE,QAAanT,IAATsB,EACF,MAAM,IAAIvE,MAAMuI,EAAc,sBAAwBoJ,EAAKD,iBAE7D,GAAoB,mBAATnN,EACT,MAAM,IAAIvE,MACRuI,EACE,uBACAoJ,EAAKD,gBACL,oBACAnN,EAAKS,YAGX,GAAIqH,GAAoB9H,GACtB,MAAM,IAAIvE,MACRuI,EAAc,YAAchE,EAAKS,WAAa,IAAM2M,EAAKD,iBAK7D,GACkB,iBAATnN,GACPA,EAAK9H,OAAS0Z,GAAiB,GAC/BrN,EAAavE,GAAQ4R,GAErB,MAAM,IAAInW,MACRuI,EACE,kCACA4N,GACA,eACAxE,EAAKD,gBACL,MACAnN,EAAKwI,UAAU,EAAG,IAClB,SAMN,GAAIxI,GAAwB,iBAATA,EAAmB,CACpC,IAAI8R,GAAc,EACdC,GAAiB,EAwBrB,GAvBA1I,GAAKrJ,EAAM,SAASQ,EAAa9G,GAC/B,GAAY,WAAR8G,EACFsR,GAAc,OACT,GAAY,cAARtR,GAA+B,QAARA,IAChCuR,GAAiB,GACZ1C,GAAW7O,IACd,MAAM,IAAI/E,MACRuI,EACE,6BACAxD,EACA,KACA4M,EAAKD,gBACL,wFAMRC,EAAKxT,KAAK4G,GACVoP,GAAqB5L,EAAatK,EAAO0T,GACzCA,EAAKzT,QAGHmY,GAAeC,EACjB,MAAM,IAAItW,MACRuI,EACE,4BACAoJ,EAAKD,gBACL,0CChKR6E,oBAAA,SAAOC,GACLvO,EAAiB,sBAAuB,EAAG,EAAGzL,UAAUC,QACxDkM,EAAiB,sBAAuB,EAAG6N,GAAY,GACvD,IAAMC,EAAW,IAAItT,EAKrB,OAJArH,KAAK4a,MAAMC,mBACT7a,KAAKsa,MACLK,EAASG,aAAaJ,IAEjBC,EAASjT,SAOlB+S,oBAAA,SAAOC,GACLvO,EAAiB,sBAAuB,EAAG,EAAGzL,UAAUC,QACxDwY,GAAqB,sBAAuBnZ,KAAKsa,OACjDzN,EAAiB,sBAAuB,EAAG6N,GAAY,GACvD,IAAMC,EAAW,IAAItT,EAMrB,OALArH,KAAK4a,MAAMG,gBACT/a,KAAKsa,MACL,KACAK,EAASG,aAAaJ,IAEjBC,EAASjT,SAQlB+S,iBAAA,SAAItY,EAAYuY,GACdvO,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QACrDwY,GAAqB,mBAAoBnZ,KAAKsa,OAC9ClC,GAAwB,mBAAoB,EAAGjW,EAAOnC,KAAKsa,OAAO,GAClEzN,EAAiB,mBAAoB,EAAG6N,GAAY,GACpD,IAAMC,EAAW,IAAItT,EAMrB,OALArH,KAAK4a,MAAMG,gBACT/a,KAAKsa,MACLnY,EACAwY,EAASG,aAAaJ,IAEjBC,EAASjT,SASlB+S,6BAAA,SACEtY,EACAgW,EACAuC,GAEAvO,EAAiB,+BAAgC,EAAG,EAAGzL,UAAUC,QACjEwY,GAAqB,+BAAgCnZ,KAAKsa,OAC1DlC,GACE,+BACA,EACAjW,EACAnC,KAAKsa,OACL,GAEFxB,GAAiB,+BAAgC,EAAGX,GAAU,GAC9DtL,EAAiB,+BAAgC,EAAG6N,GAAY,GAEhE,IAAMC,EAAW,IAAItT,EAOrB,OANArH,KAAK4a,MAAMI,4BACThb,KAAKsa,MACLnY,EACAgW,EACAwC,EAASG,aAAaJ,IAEjBC,EAASjT,SAQlB+S,oBAAA,SACEQ,EACAP,GAIA,GAFAvO,EAAiB,sBAAuB,EAAG,EAAGzL,UAAUC,QACxDwY,GAAqB,sBAAuBnZ,KAAKsa,OAC7C3a,MAAMoF,QAAQkW,GAAgB,CAEhC,IADA,IAAMC,EAAyC,GACtC1a,EAAI,EAAGA,EAAIya,EAActa,SAAUH,EAC1C0a,EAAiB,GAAK1a,GAAKya,EAAcza,GAE3Cya,EAAgBC,EAChBxR,GACE,gOAIJ6O,GACE,sBACA,EACA0C,EACAjb,KAAKsa,OACL,GAEFzN,EAAiB,sBAAuB,EAAG6N,GAAY,GACvD,IAAMC,EAAW,IAAItT,EAMrB,OALArH,KAAK4a,MAAMO,mBACTnb,KAAKsa,MACLW,EACAN,EAASG,aAAaJ,IAEjBC,EAASjT,aA1HlB,YAAoBkT,EAAqBN,GAArBta,WAAA4a,EAAqB5a,WAAAsa,ECnB3C,QAcEc,oBAAA,WAEE,OADAjP,EAAiB,2BAA4B,EAAG,EAAGzL,UAAUC,QACtD,CAAE0a,UAAWrb,KAAKqb,UAAWC,SAAUtb,KAAKsb,SAASC,eAN9D,YAAmBF,EAA2BC,GAA3Btb,eAAAqb,EAA2Brb,cAAAsb,ECKhD,IAEQE,GAKFC,GAMEC,GAbKC,IAELH,GACJ,mEAIEC,GAAe,EAMbC,GAA0B,GAEzB,SAASnO,GACd,IAGI/M,EAHEob,EAAgBrO,IAAQkO,GAC9BA,GAAelO,EAGf,IAAMsO,EAAiB,IAAIlc,MAAM,GACjC,IAAKa,EAAI,EAAQ,GAALA,EAAQA,IAClBqb,EAAerb,GAAKgb,GAAW9U,OAAO6G,EAAM,IAG5CA,EAAM4E,KAAKI,MAAMhF,EAAM,IAEzBzJ,EAAe,IAARyJ,EAAW,4BAElB,IAAI2D,EAAK2K,EAAejW,KAAK,IAE7B,GAAKgW,EAIE,CAGL,IAAKpb,EAAI,GAAS,GAALA,GAA+B,KAArBkb,GAAclb,GAAWA,IAC9Ckb,GAAclb,GAAK,EAErBkb,GAAclb,UATd,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IAClBkb,GAAclb,GAAK2R,KAAKI,MAAsB,GAAhBJ,KAAK2J,UAUvC,IAAKtb,EAAI,EAAGA,EAAI,GAAIA,IAClB0Q,GAAMsK,GAAW9U,OAAOgV,GAAclb,IAIxC,OAFAsD,EAAqB,KAAdoN,EAAGvQ,OAAe,oCAElBuQ,QCwFF6K,QAAP,SAAYnO,EAAcoO,GACxB,OAAO,IAAID,GAAUnO,EAAMoO,QAT7B,YAAmBpO,EAAqBoO,GAArBhc,UAAA4N,EAAqB5N,UAAAgc,ECxI1C,ICFIC,ODoBFC,wBAAA,WACE,OAAOlc,KAAKmc,QAAQvM,KAAK5P,OAW3Bkc,iCAAA,SAAoBE,EAAeC,GACjC,IAAMC,EAAa,IAAIP,GAAUzK,GAAU8K,GACrCG,EAAa,IAAIR,GAAUzK,GAAU+K,GAC3C,OAAgD,IAAzCrc,KAAKmc,QAAQG,EAAYC,IAOlCL,qBAAA,WACE,OAAQH,GAAkBS,SAzC9B,eCAA,WAA8BtU,QAAAgU,IAC5B1c,sBAAWid,uBAAX,WACE,OAAOR,QAGT,SAAwB7N,GACtB6N,GAAe7N,mCAMjBqO,qBAAA,SAAQlR,EAAchM,GACpB,OAAOiS,GAAYjG,EAAEqC,KAAMrO,EAAEqO,OAM/B6O,yBAAA,SAAYT,GAGV,MAAM/X,EAAe,oDAMvBwY,iCAAA,SAAoBL,EAAeC,GACjC,OAAO,GAMTI,qBAAA,WACE,OAAQV,GAAkBS,KAM5BC,qBAAA,WAGE,OAAO,IAAIV,GAAUxK,GAAU0K,KAQjCQ,sBAAA,SAASC,EAAoB9O,GAM3B,OALA9J,EACwB,iBAAf4Y,EACP,gDAGK,IAAIX,GAAUW,EAAYT,KAMnCQ,sBAAA,WACE,MAAO,YAlEX,+DAsEO,ICzEHE,GDyESC,GAAY,IAAIH,GC/DG,SAAnBI,GAA4B1E,GACvC,MAAwB,iBAAbA,EACF,UAAYpG,GAAsBoG,GAC/B,UAAYA,EAQU,SAAvB2E,GAAgCC,GAC3C,GAAIA,EAAaC,aAAc,CAC7B,IAAM5O,EAAM2O,EAAa3O,MACzBtK,EACiB,iBAARsK,GACU,iBAARA,GACS,iBAARA,GACN9D,EAAS8D,EAAmC,OAChD,6CAGFtK,EACEiZ,IAAiBJ,IAAYI,EAAatS,UAC1C,gCAIJ3G,EACEiZ,IAAiBJ,IAAYI,EAAaE,cAAcxS,UACxD,sDA9BG,ICPHyS,GCHAC,GACAR,UDUFnd,sBAAW4d,oCAIX,WACE,OAAOF,QALT,SAAqC9O,GACnC8O,GAA4B9O,mCAoC9BgP,wBAAA,WACE,OAAO,GAITA,yBAAA,WACE,OAAOpd,KAAKqd,eAIdD,4BAAA,SAAeE,GACb,OAAO,IAAIF,GAASpd,KAAKud,OAAQD,IAInCF,+BAAA,SAAkBI,GAEhB,MAAkB,cAAdA,EACKxd,KAAKqd,cAELD,GAASF,0BAA0BO,YAK9CL,sBAAA,SAASvH,GACP,OAAIA,EAAKpL,UACAzK,KACsB,cAApB6V,EAAKvB,WACPtU,KAAKqd,cAELD,GAASF,0BAA0BO,YAO9CL,sBAAA,WACE,OAAO,GAITA,qCAAA,SAAwBI,EAAmBE,GACzC,OAAO,MAITN,kCAAA,SAAqBI,EAAmBG,GACtC,MAAkB,cAAdH,EACKxd,KAAK4d,eAAeD,GAClBA,EAAalT,WAA2B,cAAd+S,EAC5Bxd,KAEAod,GAASF,0BAA0BO,WAAWI,qBACnDL,EACAG,GACAC,eAAe5d,KAAKqd,gBAK1BD,yBAAA,SAAYvH,EAAY8H,GACtB,IAAMG,EAAQjI,EAAKvB,WACnB,OAAc,OAAVwJ,EACKH,EACEA,EAAalT,WAAuB,cAAVqT,EAC5B9d,MAEP8D,EACY,cAAVga,GAA8C,IAArBjI,EAAKb,YAC9B,8CAGKhV,KAAK6d,qBACVC,EACAV,GAASF,0BAA0BO,WAAWM,YAC5ClI,EAAKpB,WACLkJ,MAORP,qBAAA,WACE,OAAO,GAITA,yBAAA,WACE,OAAO,GAITA,0BAAA,SAAaY,EAAcC,GACzB,OAAO,GAMTb,iBAAA,SAAIc,GACF,OAAIA,IAAiBle,KAAKid,cAAcxS,UAC/B,CACL0T,SAAUne,KAAKoe,WACfC,YAAare,KAAKid,cAAc7O,OAExBpO,KAAKoe,YAInBhB,kBAAA,WACE,GAAuB,OAAnBpd,KAAKse,UAAoB,CAC3B,IAAIC,EAAS,GACRve,KAAKqd,cAAc5S,YACtB8T,GACE,YACA1B,GAAiB7c,KAAKqd,cAAcjP,OACpC,KAEJ,IAAMsI,SAAc1W,KAAKud,OACzBgB,GAAU7H,EAAO,IAEf6H,GADW,UAAT7H,EACQ3E,GAAsB/R,KAAKud,QAE3Bvd,KAAKud,OAEjBvd,KAAKse,UAAYnP,EAAKoP,GAExB,OAAOve,KAAKse,WAOdlB,sBAAA,WACE,OAAOpd,KAAKud,QAMdH,uBAAA,SAAUrI,GACR,OAAIA,IAAUqI,GAASF,0BAA0BO,WACxC,EACE1I,aAAiBqI,GAASF,2BAC3B,GAERpZ,EAAOiR,EAAMiI,aAAc,qBACpBhd,KAAKwe,mBAAmBzJ,KAU3BqI,gCAAR,SAA2BqB,GACzB,IAAMC,SAAuBD,EAAUlB,OACjCoB,SAAsB3e,KAAKud,OAC3BqB,EAAaxB,GAASyB,iBAAiBzH,QAAQsH,GAC/CI,EAAY1B,GAASyB,iBAAiBzH,QAAQuH,GAGpD,OAFA7a,EAAqB,GAAd8a,EAAiB,sBAAwBF,GAChD5a,EAAoB,GAAbgb,EAAgB,sBAAwBH,GAC3CC,IAAeE,EAEI,UAAjBH,EAEK,EAGH3e,KAAKud,OAASkB,EAAUlB,QAClB,EACCvd,KAAKud,SAAWkB,EAAUlB,OAC5B,EAEA,EAIJuB,EAAYF,GAOvBxB,uBAAA,WACE,OAAOpd,MAMTod,uBAAA,WACE,OAAO,GAMTA,oBAAA,SAAOrI,GAIL,GAAIA,IAAU/U,KACZ,OAAO,EACF,GAAI+U,EAAMiI,aAAc,CAC7B,IAAMyB,EAAY1J,EAClB,OACE/U,KAAKud,SAAWkB,EAAUlB,QAC1Bvd,KAAKqd,cAAc0B,OAAON,EAAUpB,eAGtC,OAAO,GAjPJD,oBAAmB,CAAC,SAAU,UAAW,SAAU,cAU1D,YACmBG,EACTF,gBAAAA,EAAsBD,GAASF,0BAA0BO,YADhDzd,YAAAud,EACTvd,mBAAAqd,EAVFrd,eAA2B,KAYjC8D,OACkBqD,IAAhBnH,KAAKud,QAAwC,OAAhBvd,KAAKud,OAClC,4DAGFT,GAAqB9c,KAAKqd,eC5B9B,+DA6DO,IAAM2B,GAAiB,IA7DK9W,QAAAgU,IAIjC+C,qBAAA,SAAQ1T,EAAchM,GACpB,IAAM2f,EAAY3T,EAAEyQ,KAAKiB,cACnBkC,EAAY5f,EAAEyc,KAAKiB,cACnBmC,EAAWF,EAAUG,UAAUF,GACrC,OAAiB,IAAbC,EACK5N,GAAYjG,EAAEqC,KAAMrO,EAAEqO,MAEtBwR,GAOXH,yBAAA,SAAYjD,GACV,OAAQA,EAAKiB,cAAcxS,WAM7BwU,iCAAA,SAAoB7C,EAAeC,GACjC,OAAQD,EAAQa,cAAc8B,OAAO1C,EAAQY,gBAM/CgC,qBAAA,WACE,OAAQlD,GAAkBS,KAM5ByC,qBAAA,WACE,OAAO,IAAIlD,GAAUxK,GAAU,IAAI6L,GAAS,kBAAmBT,MAQjEsC,sBAAA,SAASvC,EAAiB9O,GACxB,IAAMmP,EAAeI,GAAaT,GAClC,OAAO,IAAIX,GAAUnO,EAAM,IAAIwP,GAAS,kBAAmBL,KAM7DkC,sBAAA,WACE,MAAO,qBCFTK,qBAAA,WACE,GAA+B,IAA3Btf,KAAKuf,WAAW5e,OAAc,OAAO,KAEzC,IACI6e,EADAxD,EAAOhc,KAAKuf,WAAWnd,MAM3B,GAHEod,EADExf,KAAKyf,iBACEzf,KAAKyf,iBAAiBzD,EAAK/S,IAAK+S,EAAK7Z,OAClC,CAAE8G,IAAK+S,EAAK/S,IAAK9G,MAAO6Z,EAAK7Z,OAEvCnC,KAAK0f,WAEP,IADA1D,EAAOA,EAAKtH,MACJsH,EAAKvR,WACXzK,KAAKuf,WAAWld,KAAK2Z,GACrBA,EAAOA,EAAKrH,WAId,IADAqH,EAAOA,EAAKrH,OACJqH,EAAKvR,WACXzK,KAAKuf,WAAWld,KAAK2Z,GACrBA,EAAOA,EAAKtH,KAIhB,OAAO8K,GAGTF,qBAAA,WACE,OAAgC,EAAzBtf,KAAKuf,WAAW5e,QAGzB2e,kBAAA,WACE,GAA+B,IAA3Btf,KAAKuf,WAAW5e,OAAc,OAAO,KAEzC,IAAMqb,EAAOhc,KAAKuf,WAAWvf,KAAKuf,WAAW5e,OAAS,GACtD,OAAIX,KAAKyf,iBACAzf,KAAKyf,iBAAiBzD,EAAK/S,IAAK+S,EAAK7Z,OAErC,CAAE8G,IAAK+S,EAAK/S,IAAK9G,MAAO6Z,EAAK7Z,YA1ExC,YACE6Z,EACA2D,EACAC,EACQF,EACAD,gBAAAA,QADAzf,gBAAA0f,EACA1f,sBAAAyf,EAfFzf,gBAAuD,GAkB7D,IADA,IAAI8U,EAAM,GACFkH,EAAKvR,WAMX,GALAuR,EAAOA,EACPlH,EAAM6K,EAAWC,EAAW5D,EAAK/S,IAAK0W,GAAY,EAE9CD,IAAY5K,IAAQ,GAEpBA,EAAM,EAGNkH,EADEhc,KAAK0f,WACA1D,EAAKtH,KAELsH,EAAKrH,UAET,CAAA,GAAY,IAARG,EAAW,CAEpB9U,KAAKuf,WAAWld,KAAK2Z,GACrB,MAGAhc,KAAKuf,WAAWld,KAAK2Z,GAEnBA,EADEhc,KAAK0f,WACA1D,EAAKrH,MAELqH,EAAKtH,MAmDtB,QAwCEmL,kBAAA,SACE5W,EACA9G,EACA2d,EACApL,EACAC,GAEA,OAAO,IAAIkL,GACF,MAAP5W,EAAcA,EAAMjJ,KAAKiJ,IAChB,MAAT9G,EAAgBA,EAAQnC,KAAKmC,MACpB,MAAT2d,EAAgBA,EAAQ9f,KAAK8f,MACrB,MAARpL,EAAeA,EAAO1U,KAAK0U,KAClB,MAATC,EAAgBA,EAAQ3U,KAAK2U,QAOjCkL,mBAAA,WACE,OAAO7f,KAAK0U,KAAKqL,QAAU,EAAI/f,KAAK2U,MAAMoL,SAM5CF,qBAAA,WACE,OAAO,GAYTA,8BAAA,SAAiB5B,GACf,OACEje,KAAK0U,KAAKsL,iBAAiB/B,IAC3BA,EAAOje,KAAKiJ,IAAKjJ,KAAKmC,QACtBnC,KAAK2U,MAAMqL,iBAAiB/B,IAYhC4B,8BAAA,SAAiB5B,GACf,OACEje,KAAK2U,MAAMsL,iBAAiBhC,IAC5BA,EAAOje,KAAKiJ,IAAKjJ,KAAKmC,QACtBnC,KAAK0U,KAAKuL,iBAAiBhC,IAQvB4B,kBAAR,WACE,OAAI7f,KAAK0U,KAAKjK,UACLzK,KAECA,KAAK0U,KAAwBwL,QAOzCL,oBAAA,WACE,OAAO7f,KAAKkgB,OAAOjX,KAMrB4W,oBAAA,WACE,OAAI7f,KAAK2U,MAAMlK,UACNzK,KAAKiJ,IAELjJ,KAAK2U,MAAMwL,UAWtBN,oBAAA,SAAO5W,EAAQ9G,EAAUyd,GACvB,IAAI9K,EAAKrU,EAgBT,OAZEA,GAFFqU,EAAM8K,EAAW3W,GADjBxI,EAAIT,MACoBiJ,MACd,EACJxI,EAAE2f,KAAK,KAAM,KAAM,KAAM3f,EAAEiU,KAAK2L,OAAOpX,EAAK9G,EAAOyd,GAAa,MACnD,IAAR9K,EACLrU,EAAE2f,KAAK,KAAMje,EAAO,KAAM,KAAM,MAEhC1B,EAAE2f,KACJ,KACA,KACA,KACA,KACA3f,EAAEkU,MAAM0L,OAAOpX,EAAK9G,EAAOyd,KAGtBU,UAOHT,wBAAR,WACE,GAAI7f,KAAK0U,KAAKjK,UACZ,OAAO8V,GAAU9C,WAEnB,IAAIhd,EAAoBT,KAGxB,OAFKS,EAAEiU,KAAK8L,UAAa/f,EAAEiU,KAAKA,KAAK8L,WAAU/f,EAAIA,EAAEggB,iBACrDhgB,EAAIA,EAAE2f,KAAK,KAAM,KAAM,KAAO3f,EAAEiU,KAAwBgM,aAAc,OAC7DJ,UAQXT,oBAAA,SACE5W,EACA2W,GAEA,IAAInf,EAAGkgB,EAEP,GAAIf,EAAW3W,GADfxI,EAAIT,MACkBiJ,KAAO,EACtBxI,EAAEiU,KAAKjK,WAAchK,EAAEiU,KAAK8L,UAAa/f,EAAEiU,KAAKA,KAAK8L,WACxD/f,EAAIA,EAAEggB,gBAERhgB,EAAIA,EAAE2f,KAAK,KAAM,KAAM,KAAM3f,EAAEiU,KAAK3E,OAAO9G,EAAK2W,GAAa,UACxD,CAKL,GAJInf,EAAEiU,KAAK8L,WAAU/f,EAAIA,EAAEmgB,gBACtBngB,EAAEkU,MAAMlK,WAAchK,EAAEkU,MAAM6L,UAAa/f,EAAEkU,MAAMD,KAAK8L,WAC3D/f,EAAIA,EAAEogB,iBAEuB,IAA3BjB,EAAW3W,EAAKxI,EAAEwI,KAAY,CAChC,GAAIxI,EAAEkU,MAAMlK,UACV,OAAO8V,GAAU9C,WAEjBkD,EAAYlgB,EAAEkU,MAAyBuL,OACvCzf,EAAIA,EAAE2f,KACJO,EAAS1X,IACT0X,EAASxe,MACT,KACA,KACC1B,EAAEkU,MAAyB+L,cAIlCjgB,EAAIA,EAAE2f,KAAK,KAAM,KAAM,KAAM,KAAM3f,EAAEkU,MAAM5E,OAAO9G,EAAK2W,IAEzD,OAAOnf,EAAE6f,UAOXT,oBAAA,WACE,OAAO7f,KAAK8f,OAOND,oBAAR,WACE,IAAIpf,EAAIT,KAIR,OAHIS,EAAEkU,MAAM6L,WAAa/f,EAAEiU,KAAK8L,WAAU/f,EAAIA,EAAEqgB,eAC5CrgB,EAAEiU,KAAK8L,UAAY/f,EAAEiU,KAAKA,KAAK8L,WAAU/f,EAAIA,EAAEmgB,gBAC/CngB,EAAEiU,KAAK8L,UAAY/f,EAAEkU,MAAM6L,WAAU/f,EAAIA,EAAEsgB,cACxCtgB,GAODof,0BAAR,WACE,IAAIpf,EAAIT,KAAK+gB,aAYb,OAXItgB,EAAEkU,MAAMD,KAAK8L,WASf/f,GADAA,GAPAA,EAAIA,EAAE2f,KACJ,KACA,KACA,KACA,KACC3f,EAAEkU,MAAyBiM,iBAExBE,eACAC,cAEDtgB,GAODof,2BAAR,WACE,IAAIpf,EAAIT,KAAK+gB,aAKb,OAJItgB,EAAEiU,KAAKA,KAAK8L,WAEd/f,GADAA,EAAIA,EAAEmgB,gBACAG,cAEDtgB,GAODof,yBAAR,WACE,IAAMmB,EAAKhhB,KAAKogB,KAAK,KAAM,KAAMP,GAASoB,IAAK,KAAMjhB,KAAK2U,MAAMD,MAChE,OAAO1U,KAAK2U,MAAMyL,KAAK,KAAM,KAAMpgB,KAAK8f,MAAOkB,EAAI,OAO7CnB,0BAAR,WACE,IAAMqB,EAAKlhB,KAAKogB,KAAK,KAAM,KAAMP,GAASoB,IAAKjhB,KAAK0U,KAAKC,MAAO,MAChE,OAAO3U,KAAK0U,KAAK0L,KAAK,KAAM,KAAMpgB,KAAK8f,MAAO,KAAMoB,IAO9CrB,wBAAR,WACE,IAAMnL,EAAO1U,KAAK0U,KAAK0L,KAAK,KAAM,MAAOpgB,KAAK0U,KAAKoL,MAAO,KAAM,MAC1DnL,EAAQ3U,KAAK2U,MAAMyL,KAAK,KAAM,MAAOpgB,KAAK2U,MAAMmL,MAAO,KAAM,MACnE,OAAO9f,KAAKogB,KAAK,KAAM,MAAOpgB,KAAK8f,MAAOpL,EAAMC,IAS1CkL,4BAAR,WACE,IAAMsB,EAAanhB,KAAKohB,SACxB,OAAOjP,KAAKE,IAAI,EAAK8O,IAAenhB,KAAK+f,QAAU,GAOrDF,oBAAA,WACE,IAAIsB,EACJ,GAAInhB,KAAKwgB,UAAYxgB,KAAK0U,KAAK8L,SAC7B,MAAM,IAAItc,MACR,0BAA4BlE,KAAKiJ,IAAM,IAAMjJ,KAAKmC,MAAQ,KAG9D,GAAInC,KAAK2U,MAAM6L,SACb,MAAM,IAAItc,MACR,mBAAqBlE,KAAKiJ,IAAM,IAAMjJ,KAAKmC,MAAQ,YAIvD,IADAgf,EAAanhB,KAAK0U,KAAK0M,YACJphB,KAAK2U,MAAMyM,SAC5B,MAAM,IAAIld,MAAM,uBAEhB,OAAOid,GAAcnhB,KAAKwgB,SAAW,EAAI,IA3StCX,QAAM,EACNA,UAAQ,MAff,YACS5W,EACA9G,EACP2d,EACApL,EACAC,GAJO3U,SAAAiJ,EACAjJ,WAAAmC,EAKPnC,KAAK8f,MAAiB,MAATA,EAAgBA,EAAQD,GAASoB,IAC9CjhB,KAAK0U,KACK,MAARA,EAAeA,EAAQ6L,GAAU9C,WACnCzd,KAAK2U,MACM,MAATA,EAAgBA,EAAS4L,GAAU9C,WAsTzC,QAYE4D,kBAAA,SACEpY,EACA9G,EACA2d,EACApL,EACAC,GAEA,OAAO3U,MAWTqhB,oBAAA,SAAOpY,EAAQ9G,EAAUyd,GACvB,OAAO,IAAIC,GAAS5W,EAAK9G,EAAO,OAUlCkf,oBAAA,SAAOpY,EAAQ2W,GACb,OAAO5f,MAMTqhB,mBAAA,WACE,OAAO,GAMTA,qBAAA,WACE,OAAO,GAWTA,8BAAA,SAAiBpD,GACf,OAAO,GAWToD,8BAAA,SAAiBpD,GACf,OAAO,GAMToD,oBAAA,WACE,OAAO,MAMTA,oBAAA,WACE,OAAO,MAOTA,oBAAA,WACE,OAAO,GAOTA,oBAAA,WACE,OAAO,OA9GX,eAsHA,QA2BEd,oBAAA,SAAOtX,EAAQ9G,GACb,OAAO,IAAIoe,GACTvgB,KAAKshB,YACLthB,KAAKuhB,MACFlB,OAAOpX,EAAK9G,EAAOnC,KAAKshB,aACxBlB,KAAK,KAAM,KAAMP,GAAS2B,MAAO,KAAM,QAU9CjB,oBAAA,SAAOtX,GACL,OAAO,IAAIsX,GACTvgB,KAAKshB,YACLthB,KAAKuhB,MACFxR,OAAO9G,EAAKjJ,KAAKshB,aACjBlB,KAAK,KAAM,KAAMP,GAAS2B,MAAO,KAAM,QAW9CjB,iBAAA,SAAItX,GAGF,IAFA,IAAI6L,EACAkH,EAAOhc,KAAKuhB,OACRvF,EAAKvR,WAAW,CAEtB,GAAY,KADZqK,EAAM9U,KAAKshB,YAAYrY,EAAK+S,EAAK/S,MAE/B,OAAO+S,EAAK7Z,MACH2S,EAAM,EACfkH,EAAOA,EAAKtH,KACG,EAANI,IACTkH,EAAOA,EAAKrH,OAGhB,OAAO,MAQT4L,+BAAA,SAAkBtX,GAIhB,IAHA,IAAI6L,EACFkH,EAAOhc,KAAKuhB,MACZE,EAAc,MACRzF,EAAKvR,WAAW,CAEtB,GAAY,KADZqK,EAAM9U,KAAKshB,YAAYrY,EAAK+S,EAAK/S,MAClB,CACb,GAAK+S,EAAKtH,KAAKjK,UAIR,OAAIgX,EACFA,EAAYxY,IAEZ,KALP,IADA+S,EAAOA,EAAKtH,MACJsH,EAAKrH,MAAMlK,WAAWuR,EAAOA,EAAKrH,MAC1C,OAAOqH,EAAK/S,IAML6L,EAAM,EACfkH,EAAOA,EAAKtH,KACG,EAANI,IAETkH,GADAyF,EAAczF,GACFrH,OAIhB,MAAM,IAAIzQ,MACR,0EAOJqc,qBAAA,WACE,OAAOvgB,KAAKuhB,MAAM9W,WAMpB8V,mBAAA,WACE,OAAOvgB,KAAKuhB,MAAMxB,SAMpBQ,oBAAA,WACE,OAAOvgB,KAAKuhB,MAAMG,UAMpBnB,oBAAA,WACE,OAAOvgB,KAAKuhB,MAAMpB,UAYpBI,8BAAA,SAAiBtC,GACf,OAAOje,KAAKuhB,MAAMvB,iBAAiB/B,IAWrCsC,8BAAA,SAAiBtC,GACf,OAAOje,KAAKuhB,MAAMtB,iBAAiBhC,IASrCsC,yBAAA,SACEoB,GAEA,OAAO,IAAIrC,GACTtf,KAAKuhB,MACL,KACAvhB,KAAKshB,aACL,EACAK,IAIJpB,6BAAA,SACEtX,EACA0Y,GAEA,OAAO,IAAIrC,GACTtf,KAAKuhB,MACLtY,EACAjJ,KAAKshB,aACL,EACAK,IAIJpB,oCAAA,SACEtX,EACA0Y,GAEA,OAAO,IAAIrC,GACTtf,KAAKuhB,MACLtY,EACAjJ,KAAKshB,aACL,EACAK,IAIJpB,gCAAA,SACEoB,GAEA,OAAO,IAAIrC,GACTtf,KAAKuhB,MACL,KACAvhB,KAAKshB,aACL,EACAK,IAhNGpB,cAAa,IAAIc,OAOxB,YACUC,EACAC,gBAAAA,EAEkBhB,GAAU9C,YAH5Bzd,iBAAAshB,EACAthB,WAAAuhB,EC3kBZ,IAIMK,GAAQzP,KAAKxE,IAAI,OA0BrBkU,0BAAA,WAEE,IAAMrC,IAAWxf,KAAK8hB,MAAS,GAAO9hB,KAAK+hB,UAE3C,OADA/hB,KAAK+hB,WACEvC,OAjBT,YAAY7e,GACV,IAAkBqhB,EAGlBhiB,KAAK+f,OAHaiC,EAGIrhB,EAAS,EAF7BkS,SAAUV,KAAKxE,IAAIqU,GAAOJ,GAAe,KAG3C5hB,KAAK+hB,SAAW/hB,KAAK+f,MAAQ,EAC7B,IAHiB9N,EAGXgQ,GAHWhQ,EAGIjS,KAAK+f,MAHQlN,SAASlT,MAAMsS,EAAO,GAAGrM,KAAK,KAAM,IAItE5F,KAAK8hB,MAASnhB,EAAS,EAAKshB,EA6BhC,IC5CIC,GCkBAzE,GF0BS0E,GAAgB,SAC3BC,EACAtN,EACAuN,EACAC,GAEAF,EAAUvQ,KAAKiD,GAEf,IAAMyN,EAAoB,SACxBC,EACAnT,GAEA,IACIoT,EACAxZ,EAFEtI,EAAS0O,EAAOmT,EAGtB,GAAc,GAAV7hB,EACF,OAAO,KACF,GAAc,GAAVA,EAGT,OAFA8hB,EAAYL,EAAUI,GACtBvZ,EAAMoZ,EAAQA,EAAMI,GAAeA,EAC5B,IAAI5C,GACT5W,EACCwZ,EAAUzG,KACX6D,GAAS2B,MACT,KACA,MAGF,IAAMkB,EAAS7P,SAAUlS,EAAS,EAAW,IAAM6hB,EAC7C9N,EAAO6N,EAAkBC,EAAKE,GAC9B/N,EAAQ4N,EAAkBG,EAAS,EAAGrT,GAG5C,OAFAoT,EAAYL,EAAUM,GACtBzZ,EAAMoZ,EAAQA,EAAMI,GAAeA,EAC5B,IAAI5C,GACT5W,EACCwZ,EAAUzG,KACX6D,GAAS2B,MACT9M,EACAC,IAgDAgO,EA3CmB,SAASC,GA2BhC,IA1BA,IAAI5G,EAAuB,KACvB2G,EAAO,KACP3E,EAAQoE,EAAUzhB,OAEhBkiB,EAAe,SAASC,EAAmBhD,GAC/C,IAAM0C,EAAMxE,EAAQ8E,EACdzT,EAAO2O,EACbA,GAAS8E,EACT,IAAMC,EAAYR,EAAwB,EAANC,EAASnT,GACvCoT,EAAYL,EAAUI,GACtBvZ,EAASoZ,EAAQA,EAAMI,GAAeA,EAC5CO,EACE,IAAInD,GAAS5W,EAAMwZ,EAAUzG,KAAmB8D,EAAO,KAAMiD,KAI3DC,EAAgB,SAASC,GAG3BjH,EAFEA,EACFA,EAAKtH,KAAOuO,EAGZN,EAAOM,GAKFziB,EAAI,EAAGA,EAAIoiB,EAAO7C,QAASvf,EAAG,CACrC,IAAM0iB,EAAQN,EAAOO,eAEfL,EAAY3Q,KAAKE,IAAI,EAAGuQ,EAAO7C,OAASvf,EAAI,IAC9C0iB,EACFL,EAAaC,EAAWjD,GAAS2B,QAGjCqB,EAAaC,EAAWjD,GAAS2B,OACjCqB,EAAaC,EAAWjD,GAASoB,MAGrC,OAAO0B,EAIIS,CADE,IAAIvB,GAAUO,EAAUzhB,SAGvC,OAAO,IAAI4f,GAAgB+B,GAAcxN,EAAa6N,IClIlDU,GAAiB,OAMrB7jB,sBAAW8jB,kBAAX,WAWE,OAVAxf,EACoBkb,GAClB,uCAEFkD,GACEA,IACA,IAAIoB,GACF,CAAEjF,YAAagF,IACf,CAAEhF,YAAaW,sCAYrBsE,iBAAA,SAAIC,GACF,IAAMC,EAAYhZ,EAAQxK,KAAKyjB,SAAUF,GACzC,IAAKC,EAAW,MAAM,IAAItf,MAAM,wBAA0Bqf,GAE1D,OAAIC,aAAqBjD,GAChBiD,EAIA,MAIXF,sBAAA,SAASI,GACP,OAAOpZ,EAAStK,KAAK2jB,UAAWD,EAAgBxa,aAGlDoa,sBAAA,SACEI,EACAE,GAEA9f,EACE4f,IAAoB9G,GACpB,uEAMF,IAJA,IAUIiH,EAVEzB,EAAY,GACd0B,GAAkB,EAChBC,EAAOH,EAAiBI,YAAYjI,GAAUkI,MAChDxiB,EAAOsiB,EAAKG,UACTziB,GACLqiB,EACEA,GAAmBJ,EAAgBS,YAAY1iB,EAAKua,MACtDoG,EAAU/f,KAAKZ,GACfA,EAAOsiB,EAAKG,UAIZL,EADEC,EACS3B,GAAcC,EAAWsB,EAAgBU,cAEzCf,GAEb,IAAMgB,EAAYX,EAAgBxa,WAC5Bob,OAAmBtkB,KAAK2jB,WAC9BW,EAAYD,GAAaX,EACzB,IAAMa,OAAkBvkB,KAAKyjB,UAE7B,OADAc,EAAWF,GAAaR,EACjB,IAAIP,GAASiB,EAAYD,IAMlChB,0BAAA,SACEb,EACAmB,GAFF,WAwCE,OAAO,IAAIN,GApCQ5Y,EACjB1K,KAAKyjB,SACL,SAACe,EAA6CH,GAC5C,IAAMrG,EAAQxT,EAAQjD,EAAKoc,UAAWU,GAEtC,GADAvgB,EAAOka,EAAO,oCAAsCqG,GAChDG,IAAoBnB,GAAgB,CAEtC,GAAIrF,EAAMmG,YAAY1B,EAAUzG,MAAO,CAKrC,IAHA,IAAMoG,EAAY,GACZ2B,EAAOH,EAAiBI,YAAYjI,GAAUkI,MAChDxiB,EAAOsiB,EAAKG,UACTziB,GACDA,EAAKmM,MAAQ6U,EAAU7U,MACzBwU,EAAU/f,KAAKZ,GAEjBA,EAAOsiB,EAAKG,UAGd,OADA9B,EAAU/f,KAAKogB,GACRN,GAAcC,EAAWpE,EAAMoG,cAGtC,OAAOf,GAGT,IAAMoB,EAAeb,EAAiB1T,IAAIuS,EAAU7U,MAChD8W,EAAcF,EAMlB,OALIC,IACFC,EAAcA,EAAY3U,OACxB,IAAIgM,GAAU0G,EAAU7U,KAAM6W,KAG3BC,EAAYrE,OAAOoC,EAAWA,EAAUzG,QAIrBhc,KAAK2jB,YAMvCL,+BAAA,SACEb,EACAmB,GAoBA,OAAO,IAAIN,GAlBQ5Y,EAAI1K,KAAKyjB,SAAU,SACpCe,GAEA,GAAIA,IAAoBnB,GAEtB,OAAOmB,EAEP,IAAMC,EAAeb,EAAiB1T,IAAIuS,EAAU7U,MACpD,OAAI6W,EACKD,EAAgBzU,OACrB,IAAIgM,GAAU0G,EAAU7U,KAAM6W,IAIzBD,IAImBxkB,KAAK2jB,gBA/HvC,YACUF,EAGAE,GAHA3jB,cAAAyjB,EAGAzjB,eAAA2jB,EEnCZ,SAGgBgB,GAAqBjQ,EAAiBC,GACpD,OAAOnD,GAAYkD,EAAK9G,KAAM+G,EAAM/G,MAGtC,SAAgBgX,GAAgBlQ,EAAcC,GAC5C,OAAOnD,GAAYkD,EAAMC,GD6B3B,WAGEnV,sBAAWqlB,qBAAX,WACE,OAEGpH,GADDA,IACc,IAAIoH,GAChB,IAAItE,GAAwBqE,IAC5B,KACAtB,GAASwB,0CAmCfD,wBAAA,WACE,OAAO,GAITA,yBAAA,WACE,OAAO7kB,KAAKqd,eAAiBI,IAI/BoH,4BAAA,SAAevH,GACb,OAAItd,KAAK+kB,UAAUta,UAEVzK,KAEA,IAAI6kB,GAAa7kB,KAAK+kB,UAAWzH,EAAiBtd,KAAKglB,YAKlEH,+BAAA,SAAkBrH,GAEhB,GAAkB,cAAdA,EACF,OAAOxd,KAAKid,cAEZ,IAAM7H,EAAQpV,KAAK+kB,UAAU7U,IAAIsN,GACjC,OAAiB,OAAVpI,EAAiBqI,GAAarI,GAKzCyP,sBAAA,SAAShP,GACP,IAAMiI,EAAQjI,EAAKvB,WACnB,OAAc,OAAVwJ,EAAuB9d,KAEpBA,KAAKilB,kBAAkBnH,GAAOoH,SAASrP,EAAKpB,aAIrDoQ,sBAAA,SAASrH,GACP,OAAyC,OAAlCxd,KAAK+kB,UAAU7U,IAAIsN,IAI5BqH,kCAAA,SAAqBrH,EAAmBG,GAEtC,GADA7Z,EAAO6Z,EAAc,8CACH,cAAdH,EACF,OAAOxd,KAAK4d,eAAeD,GAE3B,IAC8BwH,EADxB1C,EAAY,IAAI1G,GAAUyB,EAAWG,GACvC+G,SAAaU,SAajB,OAVEA,EAFEzH,EAAalT,WACfia,EAAc1kB,KAAK+kB,UAAUhV,OAAOyN,GACtBxd,KAAKglB,UAAUK,kBAC3B5C,EACAziB,KAAK+kB,aAGPL,EAAc1kB,KAAK+kB,UAAU1E,OAAO7C,EAAWG,GACjC3d,KAAKglB,UAAUM,aAAa7C,EAAWziB,KAAK+kB,YAG5DI,EAAcT,EAAYja,UAAYgT,GAAazd,KAAKqd,cACjD,IAAIwH,GAAaH,EAAaS,EAAaC,IAKtDP,yBAAA,SAAYhP,EAAY8H,GACtB,IAAMG,EAAQjI,EAAKvB,WACnB,GAAc,OAAVwJ,EACF,OAAOH,EAEP7Z,EACsB,cAApB+R,EAAKvB,YAAmD,IAArBuB,EAAKb,YACxC,8CAEF,IAAMuQ,EAAoBvlB,KAAKilB,kBAAkBnH,GAAOC,YACtDlI,EAAKpB,WACLkJ,GAEF,OAAO3d,KAAK6d,qBAAqBC,EAAOyH,IAK5CV,qBAAA,WACE,OAAO7kB,KAAK+kB,UAAUta,WAIxBoa,yBAAA,WACE,OAAO7kB,KAAK+kB,UAAUhF,SAUxB8E,iBAAA,SAAI3G,GACF,GAAIle,KAAKyK,UAAW,OAAO,KAE3B,IAAMF,EAAgC,GAClCib,EAAU,EACZrF,EAAS,EACTsF,GAAiB,EAYnB,GAXAzlB,KAAK0lB,aAAa1G,GAAgB,SAAS/V,EAAayU,GACtDnT,EAAItB,GAAOyU,EAAUtP,IAAI8P,GAEzBsH,IACIC,GAAkBZ,GAAavR,gBAAgBvL,KAAKkB,GACtDkX,EAAShO,KAAK2D,IAAIqK,EAAQ3P,OAAOvH,IAEjCwc,GAAiB,KAIhBvH,GAAgBuH,GAAkBtF,EAAS,EAAIqF,EAAS,CAE3D,IAAMG,EAAmB,GACzB,IAAK,IAAI1c,KAAOsB,EAAKob,EAAO1c,GAAyBsB,EAAItB,GAEzD,OAAO0c,EAKP,OAHIzH,IAAiBle,KAAKid,cAAcxS,YACtCF,EAAI,aAAevK,KAAKid,cAAc7O,OAEjC7D,GAKXsa,kBAAA,WACE,GAAuB,OAAnB7kB,KAAKse,UAAoB,CAC3B,IAAIsH,EAAS,GACR5lB,KAAKid,cAAcxS,YACtBmb,GACE,YACA/I,GAAiB7c,KAAKid,cAAc7O,OACpC,KAEJpO,KAAK0lB,aAAa1G,GAAgB,SAAS/V,EAAKyU,GAC9C,IAAMmI,EAAYnI,EAAUoI,OACV,KAAdD,IAAkBD,GAAU,IAAM3c,EAAM,IAAM4c,KAGpD7lB,KAAKse,UAAuB,KAAXsH,EAAgB,GAAKzW,EAAKyW,GAE7C,OAAO5lB,KAAKse,WAIduG,qCAAA,SACErH,EACAE,EACAM,GAEA,IAAM+H,EAAM/lB,KAAKgmB,cAAchI,GAC/B,GAAI+H,EAAK,CACP,IAAME,EAAcF,EAAIG,kBACtB,IAAInK,GAAUyB,EAAWE,IAE3B,OAAOuI,EAAcA,EAAYrY,KAAO,KAExC,OAAO5N,KAAK+kB,UAAUmB,kBAAkB1I,IAQ5CqH,+BAAA,SAAkBnB,GAChB,IAAMqC,EAAM/lB,KAAKgmB,cAActC,GAC/B,GAAIqC,EAAK,CACP,IAAMrE,EAASqE,EAAIrE,SACnB,OAAOA,GAAUA,EAAO9T,KAExB,OAAO5N,KAAK+kB,UAAUrD,UAQ1BmD,2BAAA,SAAcnB,GACZ,IAAMhC,EAAS1hB,KAAKmmB,kBAAkBzC,GACtC,OAAIhC,EACK,IAAI3F,GAAU2F,EAAQ1hB,KAAK+kB,UAAU7U,IAAIwR,IAEzC,MASXmD,8BAAA,SAAiBnB,GACf,IAAMqC,EAAM/lB,KAAKgmB,cAActC,GAC/B,GAAIqC,EAAK,CACP,IAAM5F,EAAS4F,EAAI5F,SACnB,OAAOA,GAAUA,EAAOvS,KAExB,OAAO5N,KAAK+kB,UAAU5E,UAQ1B0E,0BAAA,SAAanB,GACX,IAAMvD,EAASngB,KAAKomB,iBAAiB1C,GACrC,OAAIvD,EACK,IAAIpE,GAAUoE,EAAQngB,KAAK+kB,UAAU7U,IAAIiQ,IAEzC,MAOX0E,0BAAA,SACE7G,EACAC,GAEA,IAAM8H,EAAM/lB,KAAKgmB,cAAchI,GAC/B,OAAI+H,EACKA,EAAI/F,iBAAiB,SAASqG,GACnC,OAAOpI,EAAOoI,EAAYzY,KAAMyY,EAAYrK,QAGvChc,KAAK+kB,UAAU/E,iBAAiB/B,IAQ3C4G,yBAAA,SACEnB,GAEA,OAAO1jB,KAAKsmB,gBAAgB5C,EAAgB6C,UAAW7C,IASzDmB,6BAAA,SACE2B,EACA9C,GAEA,IAAMqC,EAAM/lB,KAAKgmB,cAActC,GAC/B,GAAIqC,EACF,OAAOA,EAAIO,gBAAgBE,EAAW,SAAAvd,GAAO,OAAAA,IAO7C,IALA,IAAMnH,EAAW9B,KAAK+kB,UAAUuB,gBAC9BE,EAAU5Y,KACVmO,GAAUkI,MAERxiB,EAAOK,EAAS2kB,OACL,MAARhlB,GAAgBiiB,EAAgBvH,QAAQ1a,EAAM+kB,GAAa,GAChE1kB,EAASoiB,UACTziB,EAAOK,EAAS2kB,OAElB,OAAO3kB,GAQX+iB,gCAAA,SACEnB,GAEA,OAAO1jB,KAAK0mB,uBACVhD,EAAgBiD,UAChBjD,IASJmB,oCAAA,SACE+B,EACAlD,GAEA,IAAMqC,EAAM/lB,KAAKgmB,cAActC,GAC/B,GAAIqC,EACF,OAAOA,EAAIW,uBAAuBE,EAAS,SAAS3d,GAClD,OAAOA,IAQT,IALA,IAAMnH,EAAW9B,KAAK+kB,UAAU2B,uBAC9BE,EAAQhZ,KACRmO,GAAUkI,MAERxiB,EAAOK,EAAS2kB,OACL,MAARhlB,GAAyD,EAAzCiiB,EAAgBvH,QAAQ1a,EAAMmlB,IACnD9kB,EAASoiB,UACTziB,EAAOK,EAAS2kB,OAElB,OAAO3kB,GAOX+iB,uBAAA,SAAU9P,GACR,OAAI/U,KAAKyK,UACHsK,EAAMtK,UACD,GAEC,EAEDsK,EAAMiI,cAAgBjI,EAAMtK,UAC9B,EACEsK,IAAU4H,IACX,EAGD,GAOXkI,uBAAA,SAAUnB,GACR,GACEA,IAAoB9G,IACpB5c,KAAKglB,UAAU6B,SAASnD,GAExB,OAAO1jB,KAEP,IAAMolB,EAAcplB,KAAKglB,UAAU8B,SACjCpD,EACA1jB,KAAK+kB,WAEP,OAAO,IAAIF,GAAa7kB,KAAK+kB,UAAW/kB,KAAKqd,cAAe+H,IAOhEP,uBAAA,SAAU7G,GACR,OAAOA,IAAUpB,IAAa5c,KAAKglB,UAAU6B,SAAS7I,IAMxD6G,oBAAA,SAAO9P,GACL,GAAIA,IAAU/U,KACZ,OAAO,EACF,GAAI+U,EAAMiI,aACf,OAAO,EAEP,IAAM+J,EAAoBhS,EAC1B,GAAK/U,KAAKid,cAAc8B,OAAOgI,EAAkB9J,eAE1C,CAAA,GACLjd,KAAK+kB,UAAUhF,UAAYgH,EAAkBhC,UAAUhF,QAkBvD,OAAO,EAZP,IAJA,IAAMiH,EAAWhnB,KAAKgkB,YAAYhF,IAC5BiI,EAAYF,EAAkB/C,YAAYhF,IAC5CkI,EAAcF,EAAS9C,UACvBiD,EAAeF,EAAU/C,UACtBgD,GAAeC,GAAc,CAClC,GACED,EAAYtZ,OAASuZ,EAAavZ,OACjCsZ,EAAYlL,KAAK+C,OAAOoI,EAAanL,MAEtC,OAAO,EAETkL,EAAcF,EAAS9C,UACvBiD,EAAeF,EAAU/C,UAE3B,OAAuB,OAAhBgD,GAAyC,OAAjBC,EAlB/B,OAAO,GAiCLtC,2BAAR,SACEnB,GAEA,OAAIA,IAAoB9G,GACf,KAEA5c,KAAKglB,UAAU9U,IAAIwT,EAAgBxa,aA7T/B2b,mBAAkB,qBA1HjC,YACmBE,EACA1H,EACT2H,GAFShlB,eAAA+kB,EACA/kB,mBAAAqd,EACTrd,eAAAglB,EAvBFhlB,eAA2B,KA8B7BA,KAAKqd,eACPP,GAAqB9c,KAAKqd,eAGxBrd,KAAK+kB,UAAUta,WACjB3G,GACG9D,KAAKqd,eAAiBrd,KAAKqd,cAAc5S,UAC1C,wCAibN,qBACErC,aACE,IAAImY,GAAwBqE,IAC5BC,GAAapH,WACb6F,GAASwB,eAmCR,IAAMnI,GAAW,IAxCKzU,QAAA2c,IAS3BuC,uBAAA,SAAUrS,GACR,OAAIA,IAAU/U,KACL,EAEA,GAIXonB,oBAAA,SAAOrS,GAEL,OAAOA,IAAU/U,MAGnBonB,yBAAA,WACE,OAAOpnB,MAGTonB,+BAAA,SAAkB5J,GAChB,OAAOqH,GAAapH,YAGtB2J,qBAAA,WACE,OAAO,OAqBX5nB,OAAO6nB,iBAAiBtL,GAAW,CACjCS,IAAK,CACHra,MAAO,IAAI4Z,GAAUzK,GAAUuT,GAAapH,aAE9C6J,IAAK,CACHnlB,MAAO,IAAI4Z,GAAUxK,GAAUoL,OAOnCF,GAASR,aAAe4I,GAAapH,WACrCL,GAASF,0BAA4B2H,GNpjBnClI,GMqjBSA,GJhjBTA,GIijBiBA,GEljBnB,OAAM4K,IAAY,EASlB,SAAgBpK,GACdqK,EACArP,GAEA,gBAFAA,QAEa,OAATqP,EACF,OAAO3C,GAAapH,WAoBtB,GAjBoB,iBAAT+J,GAAqB,cAAeA,IAC7CrP,EAAWqP,EAAK,cAGlB1jB,EACe,OAAbqU,GACsB,iBAAbA,GACa,iBAAbA,GACc,iBAAbA,GAAyB,QAAUA,EAC7C,uCAAyCA,GAGvB,iBAATqP,GAAqB,WAAYA,GAA2B,OAAnBA,EAAK,YACvDA,EAAOA,EAAK,WAIM,iBAATA,GAAqB,QAASA,EAEvC,OAAO,IAAIpK,GADMoK,EACarK,GAAahF,IAG7C,GAAMqP,aAAgB7nB,QAAU4nB,GA8CzB,CACL,IAAIE,EAAa5C,GAAapH,WAY9B,OAXA3L,GAAK0V,EAAM,SAACve,EAAaye,GACvB,GAAIpd,EAASkd,EAAMve,IACW,MAAxBA,EAAIgI,UAAU,EAAG,GAAY,CAE/B,IAAMyM,EAAYP,GAAauK,IAC3BhK,EAAUV,cAAiBU,EAAUjT,YACvCgd,EAAOA,EAAK5J,qBAAqB5U,EAAKyU,OAKvC+J,EAAK7J,eAAeT,GAAahF,IA1DxC,IAAMwP,EAAwB,GAC1BC,GAAuB,EAc3B,GAZA9V,GAD2C0V,EACxB,SAACve,EAAKmM,GACvB,GAA4B,MAAxBnM,EAAIgI,UAAU,EAAG,GAAY,CAE/B,IAAMyM,EAAYP,GAAa/H,GAC1BsI,EAAUjT,YACbmd,EACEA,IAAyBlK,EAAUT,cAAcxS,UACnDkd,EAAStlB,KAAK,IAAI0Z,GAAU9S,EAAKyU,QAKhB,GAAnBiK,EAAShnB,OACX,OAAOkkB,GAAapH,WAGtB,IAAMoK,EAAW1F,GACfwF,EACAhD,GACA,SAAAlC,GAAa,OAAAA,EAAU7U,MACvBgX,IAEF,GAAIgD,EAAsB,CACxB,IAAME,EAAiB3F,GACrBwF,EACA3I,GAAeoF,cAEjB,OAAO,IAAIS,GACTgD,EACA1K,GAAahF,GACb,IAAImL,GACF,CAAEjF,YAAayJ,GACf,CAAEzJ,YAAaW,MAInB,OAAO,IAAI6F,GACTgD,EACA1K,GAAahF,GACbmL,GAASwB,SCpFjB,+DPDE3H,GMyGcA,GC7CT,OAAM4K,GAAc,IA3DK7f,QAAAgU,IAI9B8L,qBAAA,SAAQzc,EAAchM,GACpB,IAAM6f,EAAW7T,EAAEyQ,KAAKqD,UAAU9f,EAAEyc,MACpC,OAAiB,IAAboD,EACK5N,GAAYjG,EAAEqC,KAAMrO,EAAEqO,MAEtBwR,GAOX4I,yBAAA,SAAYhM,GACV,OAAO,GAMTgM,iCAAA,SAAoB5L,EAAeC,GACjC,OAAQD,EAAQ2C,OAAO1C,IAMzB2L,qBAAA,WACE,OAAQjM,GAAkBS,KAM5BwL,qBAAA,WACE,OAAQjM,GAAkBuL,KAQ5BU,sBAAA,SAAStL,EAAoB9O,GAC3B,IAAMqa,EAAY9K,GAAaT,GAC/B,OAAO,IAAIX,GAAUnO,EAAMqa,IAM7BD,sBAAA,WACE,MAAO,kBCpDoB9f,QAAAgU,IAenBgM,0BAAV,SAAuBC,GACrB,OAAOA,EAAKjD,SAASllB,KAAKooB,aAM5BF,yBAAA,SAAYlM,GACV,OAAQA,EAAKkJ,SAASllB,KAAKooB,YAAY3d,WAMzCyd,qBAAA,SAAQ3c,EAAchM,GACpB,IAAM8oB,EAASroB,KAAKsoB,aAAa/c,EAAEyQ,MAC7BuM,EAASvoB,KAAKsoB,aAAa/oB,EAAEyc,MAC7BoD,EAAWiJ,EAAOhJ,UAAUkJ,GAClC,OAAiB,IAAbnJ,EACK5N,GAAYjG,EAAEqC,KAAMrO,EAAEqO,MAEtBwR,GAOX8I,sBAAA,SAASxL,EAAoB9O,GAC3B,IAAMqa,EAAY9K,GAAaT,GACzBV,EAAO6I,GAAapH,WAAWM,YACnC/d,KAAKooB,WACLH,GAEF,OAAO,IAAIlM,GAAUnO,EAAMoO,IAM7BkM,qBAAA,WACE,IAAMlM,EAAO6I,GAAapH,WAAWM,YAAY/d,KAAKooB,WAAYzL,IAClE,OAAO,IAAIZ,GAAUxK,GAAUyK,IAMjCkM,sBAAA,WACE,OAAOloB,KAAKooB,WAAW3e,QAAQ7D,KAAK,UA/DtC,YAAoBwiB,GAApB,MACEhgB,2BADkBb,aAAA6gB,EAGlBtkB,GACGskB,EAAW3d,WAAuC,cAA1B2d,EAAW9T,WACpC,6DCNN,QAkBEkU,iBAAA,WAEE,OADArc,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QAC9CX,KAAKyoB,MAAMra,OAQpBoa,uBAAA,WAEE,OADArc,EAAiB,yBAA0B,EAAG,EAAGzL,UAAUC,QACpDX,KAAKyoB,MAAMra,KAAI,IAKxBoa,oBAAA,WAGE,OADArc,EAAiB,sBAAuB,EAAG,EAAGzL,UAAUC,QACjDX,KAAK0oB,aAQdF,oBAAA,WAEE,OADArc,EAAiB,sBAAuB,EAAG,EAAGzL,UAAUC,SAChDX,KAAKyoB,MAAMhe,WASrB+d,mBAAA,SAAMG,GACJxc,EAAiB,qBAAsB,EAAG,EAAGzL,UAAUC,QAEvDgoB,EAAkBziB,OAAOyiB,GACzBzP,GAAmB,qBAAsB,EAAGyP,GAAiB,GAE7D,IAAMC,EAAY,IAAInV,GAAKkV,GACrBE,EAAW7oB,KAAK8oB,KAAK1T,MAAMwT,GACjC,OAAO,IAAIJ,GACTxoB,KAAKyoB,MAAMvD,SAAS0D,GACpBC,EACA7J,KAUJwJ,sBAAA,SAASG,GACPxc,EAAiB,wBAAyB,EAAG,EAAGzL,UAAUC,QAC1DuY,GAAmB,wBAAyB,EAAGyP,GAAiB,GAEhE,IAAMC,EAAY,IAAInV,GAAKkV,GAC3B,OAAQ3oB,KAAKyoB,MAAMvD,SAAS0D,GAAWne,WAQzC+d,yBAAA,WAIE,OAHArc,EAAiB,2BAA4B,EAAG,EAAGzL,UAAUC,QAGtDX,KAAKyoB,MAAMxL,cAAc7O,OAWlCoa,qBAAA,SAAQvK,GAAR,WAIE,OAHA9R,EAAiB,uBAAwB,EAAG,EAAGzL,UAAUC,QACzDkM,EAAiB,uBAAwB,EAAGoR,GAAQ,IAEhDje,KAAKyoB,MAAMzL,gBAEMhd,KAAKyoB,MAEJ/C,aAAa1lB,KAAK+oB,OAAQ,SAAC9f,EAAK+S,GACpD,OAAOiC,EACL,IAAIuK,GAAaxM,EAAMzU,EAAKuhB,KAAK1T,MAAMnM,GAAM+V,QASnDwJ,yBAAA,WAGE,OAFArc,EAAiB,2BAA4B,EAAG,EAAGzL,UAAUC,SAEzDX,KAAKyoB,MAAMzL,eACFhd,KAAKyoB,MAAMhe,WAG1BjL,sBAAIgpB,wBAAJ,WACE,OAAOxoB,KAAK8oB,KAAKE,0CAOnBR,yBAAA,WAGE,OAFArc,EAAiB,2BAA4B,EAAG,EAAGzL,UAAUC,QAEtDX,KAAKyoB,MAAMQ,eAMpBT,oBAAA,WAGE,OAFArc,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QAE9CX,KAAK8oB,MAGdtpB,sBAAIgpB,wBAAJ,WACE,OAAOxoB,KAAKkpB,8CAtJd,YACmBT,EACAK,EACAC,GAFA/oB,WAAAyoB,EACAzoB,UAAA8oB,EACA9oB,YAAA+oB,ECarB,QAsBEI,qBAAA,WACE,IAAMC,EAAMppB,KAAKsb,SAAS4N,SAC1B,MAAuB,UAAnBlpB,KAAKgZ,UACAoQ,EAAIvT,KAEJuT,EAAIC,YAAYxT,MAO3BsT,0BAAA,WACE,OAAOnpB,KAAKgZ,WAMdmQ,4BAAA,WACE,OAAOnpB,KAAKspB,kBAAkBC,eAAevpB,OAM/CmpB,sBAAA,WACE,OACEnpB,KAAKwpB,UAAUtgB,WACf,IACAlJ,KAAKgZ,UACL,IACAlP,EAAU9J,KAAKsb,SAASoN,kBA/C5B,YACS1P,EAMAsQ,EACAhO,EACAmO,GARAzpB,eAAAgZ,EAMAhZ,uBAAAspB,EACAtpB,cAAAsb,EACAtb,cAAAypB,EA2CX,QAeEC,qBAAA,WACE,OAAO1pB,KAAK6V,MAMd6T,0BAAA,WACE,MAAO,UAMTA,4BAAA,WACE,OAAO1pB,KAAKspB,kBAAkBC,eAAevpB,OAM/C0pB,sBAAA,WACE,OAAO1pB,KAAK6V,KAAK3M,WAAa,eA/BhC,YACSogB,EACAxmB,EACA+S,GAFA7V,uBAAAspB,EACAtpB,WAAA8C,EACA9C,UAAA6V,ECrCX,QAeE8T,wBAAA,SAAW3Q,GACT,MAAqB,UAAdA,GAMT2Q,yBAAA,SAAYC,EAAgBC,GAC1B,IAAM7L,EAAQ6L,EAAMC,iBAAiBC,WACrC,OAAO,IAAIZ,GACT,QACAnpB,KACA,IAAIwoB,GAAaoB,EAAOI,aAAcH,EAAMX,SAAUlL,KAO1D2L,4BAAA,SAAeM,GACb,IAAMC,EAAMlqB,KAAKmqB,SACjB,GAAiC,WAA7BF,EAAUG,eAA6B,CACzCtmB,EACE9D,KAAKqqB,gBACL,gEAEF,IAAMC,EAAWtqB,KAAKqqB,gBACtB,OAAO,WAELC,EAAS1pB,KAAKspB,EAAMD,EAA0BnnB,QAGhD,IAAMynB,EAAKvqB,KAAKwqB,UAChB,OAAO,WACLD,EAAG3pB,KAAKspB,EAAMD,EAAwB3O,YAQ5CqO,+BAAA,SAAkB7mB,EAAc+S,GAC9B,OAAI7V,KAAKqqB,gBACA,IAAIX,GAAY1pB,KAAM8C,EAAO+S,GAE7B,MAOX8T,qBAAA,SAAQ5U,GACN,OAAMA,aAAiB4U,MAEX5U,EAAMyV,YAAcxqB,KAAKwqB,WAKjCzV,EAAMyV,YAAcxqB,KAAKwqB,WAAazV,EAAMoV,WAAanqB,KAAKmqB,WAQpER,4BAAA,WACE,OAA0B,OAAnB3pB,KAAKwqB,eA/Ed,YACUA,EACAH,EACAF,GAFAnqB,eAAAwqB,EACAxqB,qBAAAqqB,EACArqB,cAAAmqB,EAyFZ,ICrIIM,ODsJFC,wBAAA,SAAW1R,GACT,IAAI2R,EACY,mBAAd3R,EAAiC,cAAgBA,EAGnD,OAFA2R,EACmB,qBAAjBA,EAAsC,gBAAkBA,EACnDrgB,EAAStK,KAAK4qB,WAAYD,IAMnCD,+BAAA,SAAkB5nB,EAAc+S,GAC9B,OAAI7V,KAAKqqB,gBACA,IAAIX,GAAY1pB,KAAM8C,EAAO+S,GAE7B,MAOX6U,yBAAA,SAAYd,EAAgBC,GAC1B/lB,EAA2B,MAApB8lB,EAAOpM,UAAmB,yCACjC,IAAM4L,EAAMS,EAAMX,SAAS9T,MAA6BwU,EAAOpM,WACzDQ,EAAQ6L,EAAMC,iBAAiBC,WACrC,OAAO,IAAIZ,GACTS,EAAOlT,KACP1W,KACA,IAAIwoB,GAAaoB,EAAOI,aAAcZ,EAAKpL,GAC3C4L,EAAOH,WAOXiB,4BAAA,SAAeT,GACb,IAAMC,EAAMlqB,KAAKmqB,SACjB,GAAiC,WAA7BF,EAAUG,eAA6B,CACzCtmB,EACE9D,KAAKqqB,gBACL,gEAEF,IAAMQ,EAAW7qB,KAAKqqB,gBACtB,OAAO,WAELQ,EAASjqB,KAAKspB,EAAMD,EAA0BnnB,QAGhD,IAAMgoB,EAAK9qB,KAAK4qB,WAAYX,EAAwBjR,WACpD,OAAO,WACL8R,EAAGlqB,KACDspB,EACCD,EAAwB3O,SACxB2O,EAAwBR,YASjCiB,qBAAA,SAAQ3V,GAAR,WACE,GAAIA,aAAiB2V,GAAwB,CAC3C,IAAK1qB,KAAK4qB,aAAe7V,EAAM6V,WAC7B,OAAO,EACF,GAAI5qB,KAAKmqB,WAAapV,EAAMoV,SAAU,CAC3C,IAAMY,EAAYvrB,OAAO+J,KAAKwL,EAAM6V,YAC9BI,EAAWxrB,OAAO+J,KAAKvJ,KAAK4qB,YAC5BK,EAAaF,EAAUpqB,OAE7B,GAAIsqB,IADcD,EAASrqB,OACG,CAK5B,GAAmB,IAAfsqB,EAWF,OAAOD,EAASE,MACd,SAAAlS,GACE,OAAAjE,EAAM6V,WAAW5R,KAAezR,EAAKqjB,WAAW5R,KAZpD,IAAMmS,EAAWJ,EAAU,GACrBK,EAAUJ,EAAS,GACzB,QACEI,IAAYD,GACVpW,EAAM6V,WAAWO,IAChBnrB,KAAK4qB,WAAWQ,IACjBrW,EAAM6V,WAAWO,KAAcnrB,KAAK4qB,WAAWQ,MAa3D,OAAO,GAMTV,4BAAA,WACE,OAA2B,OAApB1qB,KAAK4qB,gBApHd,YACUA,EAGAP,EACAF,GAJAnqB,gBAAA4qB,EAGA5qB,qBAAAqqB,EACArqB,cAAAmqB,ECpIZ,QACE3qB,sBAAW6rB,iCAIX,WAEE,OADAvnB,EAAO2mB,GAAwB,oCACxBA,QANT,SAAkCrc,GAChCqc,GAAyBrc,mCAoBZid,2BAAf,SAAuC1U,GACrC,IAAI2U,EAAY,KACZC,EAAU,KAQd,GAPI5U,EAAO6U,aACTF,EAAY3U,EAAO8U,sBAEjB9U,EAAO+U,WACTH,EAAU5U,EAAOgV,oBAGfhV,EAAOoT,aAAenN,GAAW,CACnC,IAAMgP,EACJ,mGAEIC,EACJ,wGAEF,GAAIlV,EAAO6U,WAAY,CAErB,GADkB7U,EAAOmV,qBACRxa,GACf,MAAM,IAAIpN,MAAM0nB,GACX,GAAyB,iBAAdN,EAChB,MAAM,IAAIpnB,MAAM2nB,GAGpB,GAAIlV,EAAO+U,SAAU,CAEnB,GADgB/U,EAAOoV,mBACRxa,GACb,MAAM,IAAIrN,MAAM0nB,GACX,GAAuB,iBAAZL,EAChB,MAAM,IAAIrnB,MAAM2nB,SAGf,GAAIlV,EAAOoT,aAAe/K,IAC/B,GACgB,MAAbsM,IAAsBpT,GAAgBoT,IAC3B,MAAXC,IAAoBrT,GAAgBqT,GAErC,MAAM,IAAIrnB,MACR,sKAUJ,GALAJ,EACE6S,EAAOoT,qBAAsB7B,IAC3BvR,EAAOoT,aAAehC,GACxB,uBAGc,MAAbuD,GAA0C,iBAAdA,GACjB,MAAXC,GAAsC,iBAAZA,EAE3B,MAAM,IAAIrnB,MACR,0FAYOmnB,kBAAf,SAA8B1U,GAC5B,GACEA,EAAO6U,YACP7U,EAAO+U,UACP/U,EAAOqV,aACNrV,EAAOsV,mBAER,MAAM,IAAI/nB,MACR,uGAUEmnB,4CAAR,SAAuCjf,GACrC,IAA4B,IAAxBpM,KAAKksB,eACP,MAAM,IAAIhoB,MAAMkI,EAAS,gDAO7Bif,4BAAA,WACE,OAAOrrB,KAAKmsB,cAMdd,oBAAA,WAKE,OAJAlf,EAAiB,YAAa,EAAG,EAAGzL,UAAUC,QAIvC,IAAI0qB,GAAMZ,uBAAuBzqB,KAAKosB,KAAMpsB,KAAK6V,OAU1DwV,gBAAA,SACErS,EACA1R,EACA+kB,EACAtf,GAEAZ,EAAiB,WAAY,EAAG,EAAGzL,UAAUC,QAC7CoY,GAAkB,WAAY,EAAGC,GAAW,GAC5CnM,EAAiB,WAAY,EAAGvF,GAAU,GAE1C,IAAMglB,EAAMjB,GAAMkB,yBAChB,WACAF,EACAtf,GAGF,GAAkB,UAAdiM,EACFhZ,KAAKwsB,aAAallB,EAAUglB,EAAIG,OAAQH,EAAIvf,aACvC,CACL,IAAM2f,EAA8C,GACpDA,EAAU1T,GAAa1R,EACvBtH,KAAK2sB,aAAaD,EAAWJ,EAAIG,OAAQH,EAAIvf,SAE/C,OAAOzF,GASC+jB,0BAAV,SACE/jB,EACAslB,EACA7f,GAEA,IAAM8f,EAAY,IAAIlD,GACpBriB,EACAslB,GAAkB,KAClB7f,GAAW,MAEb/M,KAAKosB,KAAKU,yBAAyB9sB,KAAM6sB,IAS3CxB,0BAAA,SACEqB,EACAE,EACA7f,GAEA,IAAM8f,EAAY,IAAInC,GACpBgC,EACAE,EACA7f,GAEF/M,KAAKosB,KAAKU,yBAAyB9sB,KAAM6sB,IAQ3CxB,iBAAA,SACErS,EACA1R,EACAyF,GAEAZ,EAAiB,YAAa,EAAG,EAAGzL,UAAUC,QAC9CoY,GAAkB,YAAa,EAAGC,GAAW,GAC7CnM,EAAiB,YAAa,EAAGvF,GAAU,GAC3CwF,EAAsB,YAAa,EAAGC,GAAS,GAE/C,IAAI8f,EAAsC,KACtCH,EAAqD,KACvC,UAAd1T,EAEF6T,EAAY,IAAIlD,GADMriB,GAAY,KAGhC,KACAyF,GAAW,MAEJiM,IACL1R,KACFolB,EAAY,IACF1T,GAAa1R,GAEzBulB,EAAY,IAAInC,GAAuBgC,EAAW,KAAM3f,GAAW,OAErE/M,KAAKosB,KAAKW,4BAA4B/sB,KAAM6sB,IAW9CxB,kBAAA,SACErS,EACAgU,EACAC,EACAlgB,GAJF,WAMEZ,EAAiB,aAAc,EAAG,EAAGzL,UAAUC,QAC/CoY,GAAkB,aAAc,EAAGC,GAAW,GAC9CnM,EAAiB,aAAc,EAAGmgB,GAAc,GAEhD,IAAMV,EAAMjB,GAAMkB,yBAChB,aACAU,EACAlgB,GAOEmgB,GAAY,EACVvS,EAAW,IAAItT,EAGrBsT,EAASjT,QAAQC,MAAM,cAEvB,IAAMwlB,EAAe,SAAC7R,GAGhB4R,IACFA,GAAY,EACZ3lB,EAAK6lB,IAAIpU,EAAWmU,GAEhBH,GACFA,EAAapd,KAAK0c,EAAIvf,QAAtBigB,CAA+B1R,GAEjCX,EAASlT,QAAQ6T,KAcrB,OAVAtb,KAAKqtB,GACHrU,EACAmU,EACY,SAAAG,GACV/lB,EAAK6lB,IAAIpU,EAAWmU,GAEhBb,EAAIG,QAAQH,EAAIG,OAAO7c,KAAK0c,EAAIvf,QAApBuf,CAA6BgB,GAC7C3S,EAASnT,OAAO8lB,KAGb3S,EAASjT,SAQlB2jB,0BAAA,SAAakC,GAEX,GADAphB,EAAiB,qBAAsB,EAAG,EAAGzL,UAAUC,QAEpC,iBAAV4sB,GACPpb,KAAKI,MAAMgb,KAAWA,GACtBA,GAAS,EAET,MAAM,IAAIrpB,MACR,kEAGJ,GAAIlE,KAAKmsB,aAAaH,WACpB,MAAM,IAAI9nB,MACR,uGAKJ,OAAO,IAAImnB,GACTrrB,KAAKosB,KACLpsB,KAAK6V,KACL7V,KAAKmsB,aAAaqB,aAAaD,GAC/BvtB,KAAKksB,iBASTb,yBAAA,SAAYkC,GAEV,GADAphB,EAAiB,oBAAqB,EAAG,EAAGzL,UAAUC,QAEnC,iBAAV4sB,GACPpb,KAAKI,MAAMgb,KAAWA,GACtBA,GAAS,EAET,MAAM,IAAIrpB,MACR,iEAGJ,GAAIlE,KAAKmsB,aAAaH,WACpB,MAAM,IAAI9nB,MACR,sGAKJ,OAAO,IAAImnB,GACTrrB,KAAKosB,KACLpsB,KAAK6V,KACL7V,KAAKmsB,aAAasB,YAAYF,GAC9BvtB,KAAKksB,iBASTb,0BAAA,SAAaxV,GAEX,GADA1J,EAAiB,qBAAsB,EAAG,EAAGzL,UAAUC,QAC1C,SAATkV,EACF,MAAM,IAAI3R,MACR,2EAEG,GAAa,cAAT2R,EACT,MAAM,IAAI3R,MACR,qFAEG,GAAa,WAAT2R,EACT,MAAM,IAAI3R,MACR,+EAGJgV,GAAmB,qBAAsB,EAAGrD,GAAM,GAClD7V,KAAK0tB,+BAA+B,sBACpC,IAAMC,EAAa,IAAIla,GAAKoC,GAC5B,GAAI8X,EAAWljB,UACb,MAAM,IAAIvG,MACR,qFAGJ,IAAM8Z,EAAQ,IAAIkK,GAAUyF,GACtBC,EAAY5tB,KAAKmsB,aAAa0B,QAAQ7P,GAG5C,OAFAqN,GAAMyC,wBAAwBF,GAEvB,IAAIvC,GAAMrrB,KAAKosB,KAAMpsB,KAAK6V,KAAM+X,GAA8B,IAOvEvC,wBAAA,WACElf,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QACrDX,KAAK0tB,+BAA+B,oBACpC,IAAME,EAAY5tB,KAAKmsB,aAAa0B,QAAQjR,IAE5C,OADAyO,GAAMyC,wBAAwBF,GACvB,IAAIvC,GAAMrrB,KAAKosB,KAAMpsB,KAAK6V,KAAM+X,GAA8B,IAOvEvC,6BAAA,WACElf,EAAiB,wBAAyB,EAAG,EAAGzL,UAAUC,QAC1DX,KAAK0tB,+BAA+B,yBACpC,IAAME,EAAY5tB,KAAKmsB,aAAa0B,QAAQ7O,IAE5C,OADAqM,GAAMyC,wBAAwBF,GACvB,IAAIvC,GAAMrrB,KAAKosB,KAAMpsB,KAAK6V,KAAM+X,GAA8B,IAOvEvC,0BAAA,WACElf,EAAiB,qBAAsB,EAAG,EAAGzL,UAAUC,QACvDX,KAAK0tB,+BAA+B,sBACpC,IAAME,EAAY5tB,KAAKmsB,aAAa0B,QAAQ9F,IAE5C,OADAsD,GAAMyC,wBAAwBF,GACvB,IAAIvC,GAAMrrB,KAAKosB,KAAMpsB,KAAK6V,KAAM+X,GAA8B,IAQvEvC,qBAAA,SACElpB,EACAyL,gBADAzL,QAGAgK,EAAiB,gBAAiB,EAAG,EAAGzL,UAAUC,QAClDyX,GAAwB,gBAAiB,EAAGjW,EAAOnC,KAAK6V,MAAM,GAC9DoD,GAAY,gBAAiB,EAAGrL,GAAM,GAEtC,IAAMggB,EAAY5tB,KAAKmsB,aAAa4B,QAAQ5rB,EAAOyL,GAGnD,GAFAyd,GAAM2C,eAAeJ,GACrBvC,GAAMyC,wBAAwBF,GAC1B5tB,KAAKmsB,aAAaX,WACpB,MAAM,IAAItnB,MACR,0FAUJ,YAJciD,IAAVhF,IAEFyL,EADAzL,EAAQ,MAGH,IAAIkpB,GAAMrrB,KAAKosB,KAAMpsB,KAAK6V,KAAM+X,EAAW5tB,KAAKksB,iBAQzDb,mBAAA,SACElpB,EACAyL,gBADAzL,QAGAgK,EAAiB,cAAe,EAAG,EAAGzL,UAAUC,QAChDyX,GAAwB,cAAe,EAAGjW,EAAOnC,KAAK6V,MAAM,GAC5DoD,GAAY,cAAe,EAAGrL,GAAM,GAEpC,IAAMggB,EAAY5tB,KAAKmsB,aAAa8B,MAAM9rB,EAAOyL,GAGjD,GAFAyd,GAAM2C,eAAeJ,GACrBvC,GAAMyC,wBAAwBF,GAC1B5tB,KAAKmsB,aAAaT,SACpB,MAAM,IAAIxnB,MACR,oFAKJ,OAAO,IAAImnB,GAAMrrB,KAAKosB,KAAMpsB,KAAK6V,KAAM+X,EAAW5tB,KAAKksB,iBAUzDb,qBAAA,SAAQlpB,EAAyCyL,GAI/C,GAHAzB,EAAiB,gBAAiB,EAAG,EAAGzL,UAAUC,QAClDyX,GAAwB,gBAAiB,EAAGjW,EAAOnC,KAAK6V,MAAM,GAC9DoD,GAAY,gBAAiB,EAAGrL,GAAM,GAClC5N,KAAKmsB,aAAaX,WACpB,MAAM,IAAItnB,MACR,0FAIJ,GAAIlE,KAAKmsB,aAAaT,SACpB,MAAM,IAAIxnB,MACR,sFAIJ,OAAOlE,KAAK+tB,QAAQ5rB,EAAOyL,GAAMqgB,MAAM9rB,EAAOyL,IAMhDyd,sBAAA,WAGE,OAFAlf,EAAiB,iBAAkB,EAAG,EAAGzL,UAAUC,QAE5CX,KAAKosB,KAAKljB,WAAalJ,KAAK6V,KAAKqY,sBAK1C7C,oBAAA,WAGE,OADAlf,EAAiB,eAAgB,EAAG,EAAGzL,UAAUC,QAC1CX,KAAKkJ,YAOdmiB,yBAAA,WACE,OAAOrrB,KAAKmsB,aAAagC,kBAM3B9C,6BAAA,WACE,IAAM9gB,EAAMvK,KAAKouB,cACXld,EAAKU,GAAkBrH,GAC7B,MAAc,OAAP2G,EAAc,UAAYA,GAQnCma,qBAAA,SAAQtW,GAEN,GADA5I,EAAiB,gBAAiB,EAAG,EAAGzL,UAAUC,UAC5CoU,aAAiBsW,IAGrB,MAAM,IAAInnB,MADR,wFAIJ,IAAMmqB,EAAWruB,KAAKosB,OAASrX,EAAMqX,KAC/BkC,EAAWtuB,KAAK6V,KAAKkJ,OAAOhK,EAAMc,MAClC0Y,EACJvuB,KAAKwuB,oBAAsBzZ,EAAMyZ,kBAEnC,OAAOH,GAAYC,GAAYC,GAWlBlD,4BAAf,SACEjf,EACAqiB,EACA1hB,GAEA,IAAMuf,EAGF,CAAEG,OAAQ,KAAM1f,QAAS,MAC7B,GAAI0hB,GAAmB1hB,EACrBuf,EAAIG,OAASgC,EACb5hB,EAAiBT,EAAQ,EAAGkgB,EAAIG,QAAQ,GAExCH,EAAIvf,QAAUA,EACdD,EAAsBV,EAAQ,EAAGkgB,EAAIvf,SAAS,QACzC,GAAI0hB,EAET,GAA+B,iBAApBA,GAAoD,OAApBA,EAEzCnC,EAAIvf,QAAU0hB,MACT,CAAA,GAA+B,mBAApBA,EAGhB,MAAM,IAAIvqB,MACRuI,EAAYL,EAAQ,GAAG,GACrB,0DAJJkgB,EAAIG,OAASgC,EAQjB,OAAOnC,GAGT9sB,sBAAI6rB,wBAAJ,WACE,OAAOrrB,KAAKkpB,8CAtlBd,YACSkD,EACAvW,EACCsW,EACAD,GAHDlsB,UAAAosB,EACApsB,UAAA6V,EACC7V,kBAAAmsB,EACAnsB,oBAAAksB,EClDZ,QAWEwC,kBAAA,SAAK7Y,GACH,GAAkB,MAAd7V,KAAKmC,MACP,OAAOnC,KAAKmC,MAAM+iB,SAASrP,GACtB,IAAKA,EAAKpL,WAAkC,EAArBzK,KAAK2uB,SAASC,KAAU,CACpD,IAAMC,EAAWhZ,EAAKvB,WAEtB,OADAuB,EAAOA,EAAKpB,WACRzU,KAAK2uB,SAASG,IAAID,GACF7uB,KAAK2uB,SAASze,IAAI2e,GACnBE,KAAKlZ,GAEf,KAGT,OAAO,MAWX6Y,sBAAA,SAAS7Y,EAAYpN,GACnB,GAAIoN,EAAKpL,UACPzK,KAAKmC,MAAQsG,EACbzI,KAAK2uB,SAASK,aACT,GAAmB,OAAfhvB,KAAKmC,MACdnC,KAAKmC,MAAQnC,KAAKmC,MAAM4b,YAAYlI,EAAMpN,OACrC,CACL,IAAMomB,EAAWhZ,EAAKvB,WACjBtU,KAAK2uB,SAASG,IAAID,IACrB7uB,KAAK2uB,SAAS7e,IAAI+e,EAAU,IAAIH,IAGlC,IAAMtZ,EAAQpV,KAAK2uB,SAASze,IAAI2e,GAChChZ,EAAOA,EAAKpB,WACZW,EAAM6Z,SAASpZ,EAAMpN,KAUzBimB,oBAAA,SAAO7Y,GACL,GAAIA,EAAKpL,UAGP,OAFAzK,KAAKmC,MAAQ,KACbnC,KAAK2uB,SAASK,SACP,EAEP,GAAmB,OAAfhvB,KAAKmC,MAAgB,CACvB,GAAInC,KAAKmC,MAAM6a,aAEb,OAAO,EAEP,IAAM7a,EAAQnC,KAAKmC,MACnBnC,KAAKmC,MAAQ,KAEb,IAAM+sB,EAAOlvB,KAKb,OAJAmC,EAAMujB,aAAa1G,GAAgB,SAAS/V,EAAKkmB,GAC/CD,EAAKD,SAAS,IAAIxb,GAAKxK,GAAMkmB,KAGxBnvB,KAAKovB,OAAOvZ,GAEhB,GAAyB,EAArB7V,KAAK2uB,SAASC,KAAU,CACjC,IAAMC,EAAWhZ,EAAKvB,WAStB,OARAuB,EAAOA,EAAKpB,YACRzU,KAAK2uB,SAASG,IAAID,IACC7uB,KAAK2uB,SAASze,IAAI2e,GAAUO,OAAOvZ,IAEtD7V,KAAK2uB,SAASU,OAAOR,GAIK,IAAvB7uB,KAAK2uB,SAASC,KAErB,OAAO,GAYbF,yBAAA,SAAYY,EAAkBC,GACT,OAAfvvB,KAAKmC,MACPotB,EAAKD,EAAYtvB,KAAKmC,OAEtBnC,KAAK0lB,aAAa,SAACzc,EAAKkmB,GACtB,IAAMtZ,EAAO,IAAIpC,GAAK6b,EAAWpmB,WAAa,IAAMD,GACpDkmB,EAAKK,YAAY3Z,EAAM0Z,MAU7Bb,0BAAA,SAAaa,GACXvvB,KAAK2uB,SAASc,QAAQ,SAACN,EAAMlmB,GAC3BsmB,EAAKtmB,EAAKkmB,UA1HhB,cACUnvB,WAAqB,KAEZA,cAA4C,IAAI0vB,ICqB/B,SAAvBC,GACXxtB,EACAytB,GAEA,OAAKztB,GAA0B,iBAAVA,GAGnB2B,EAAO,QAAS3B,EAAO,6CAChBytB,EAAaztB,EAAM,SAHnBA,EAtBJ,ICPK0tB,GAAAA,GDiECC,GAA+B,SAC1C9T,EACA4T,GAEA,IAOIvT,EAPE0T,EAAS/T,EAAKiB,cAAc7O,MAM5B+J,EAAWwX,GAAqBI,EAAQH,GAG9C,GAAI5T,EAAKgB,aAAc,CACrB,IAAMgT,EAAWhU,EACX7Z,EAAQwtB,GAAqBK,EAAS5R,WAAYwR,GACxD,OACEztB,IAAU6tB,EAAS5R,YACnBjG,IAAa6X,EAAS/S,cAAc7O,MAE7B,IAAIgP,GAASjb,EAAOgb,GAAahF,IAEjC6D,EAGT,IAAMiU,EAAejU,EAcrB,OAZI7D,KADJkE,EAAU4T,GACoBhT,cAAc7O,QAC1CiO,EAAUA,EAAQuB,eAAe,IAAIR,GAASjF,KAEhD8X,EAAavK,aAAa1G,GAAgB,SAASxB,EAAWE,GAC5D,IAAMC,EAAemS,GACnBpS,EACAkS,GAEEjS,IAAiBD,IACnBrB,EAAUA,EAAQwB,qBAAqBL,EAAWG,MAG/CtB,ICxGCwT,GAAAA,GAAAA,oCAEVA,uBACAA,yCACAA,2CAoCF,QAaSK,QAAO,IAAIA,IACF,GACd,EACA,MACY,GAOPA,UAAS,IAAIA,IAClB,GACgB,EAChB,MACY,GAOPA,wBAAuB,SAASC,GACrC,OAAO,IAAID,IACT,GACgB,EAChBC,GACY,QAvChB,YACSC,EACAC,EACAF,EACAG,GAHAtwB,cAAAowB,EACApwB,gBAAAqwB,EACArwB,aAAAmwB,EACAnwB,YAAAswB,EAEPxsB,GAAQwsB,GAAUD,EAAY,uCCtDlC,ICIIE,ODuBFC,+BAAA,SAAkBhT,GAChB,GAAKxd,KAAK6V,KAAKpL,UAUR,CAAA,GAA+B,MAA3BzK,KAAKywB,aAAatuB,MAM3B,OALA2B,EACE9D,KAAKywB,aAAa9B,SAASlkB,UAC3B,4DAGKzK,KAEP,IAAM+iB,EAAY/iB,KAAKywB,aAAaC,QAAQ,IAAIjd,GAAK+J,IACrD,OAAO,IAAIgT,GAAa/c,GAAKkd,MAAO5N,EAAW/iB,KAAK4wB,QAdpD,OAJA9sB,EACE9D,KAAK6V,KAAKvB,aAAekJ,EACzB,iDAEK,IAAIgT,GACTxwB,KAAK6V,KAAKpB,WACVzU,KAAKywB,aACLzwB,KAAK4wB,aAlBX,YAC2B/a,EACA4a,EACAG,GAFA5wB,UAAA6V,EACA7V,kBAAAywB,EACAzwB,YAAA4wB,EAd3B5wB,UAAO6vB,GAAcgB,eAGrB7wB,YAASkwB,GAAgBY,KCE3B,QAoBSC,cAAP,SAAqBxmB,GACnB,IAAI4kB,EAAyB4B,GAAcJ,MAI3C,OAHA7e,GAAKvH,EAAK,SAACqe,EAAmBoI,GAC5B7B,EAAOA,EAAKrf,IAAI,IAAI2D,GAAKmV,GAAYoI,KAEhC7B,GAoBT4B,qBAAA,WACE,OAAsB,OAAf/wB,KAAKmC,OAAkBnC,KAAK2uB,SAASlkB,WAe9CsmB,8CAAA,SACEvc,EACAyc,GAEA,GAAkB,MAAdjxB,KAAKmC,OAAiB8uB,EAAUjxB,KAAKmC,OACvC,MAAO,CAAE0T,KAAMpC,GAAKkd,MAAOxuB,MAAOnC,KAAKmC,OAEvC,GAAIqS,EAAa/J,UACf,OAAO,KAEP,IAAMqT,EAAQtJ,EAAaF,WACrBc,EAAQpV,KAAK2uB,SAASze,IAAI4N,GAChC,GAAc,OAAV1I,EAcF,OAAO,KAbP,IAAM8b,EAA4B9b,EAAM+b,iCACtC3c,EAAaC,WACbwc,GAEF,OAAiC,MAA7BC,EAMK,KAFA,CAAErb,KAHQ,IAAIpC,GAAKqK,GAAO1I,MAC/B8b,EAA0Brb,MAEH1T,MAAO+uB,EAA0B/uB,QAiBpE4uB,sCAAA,SACEvc,GAEA,OAAOxU,KAAKmxB,iCAAiC3c,EAAc,WAAM,OAAA,KAOnEuc,qBAAA,SAAQvc,GACN,GAAIA,EAAa/J,UACf,OAAOzK,KAEP,IAAM8d,EAAQtJ,EAAaF,WACrByO,EAAY/iB,KAAK2uB,SAASze,IAAI4N,GACpC,OAAkB,OAAdiF,EACKA,EAAU2N,QAAQlc,EAAaC,YAE/Bsc,GAAcJ,OAY3BI,iBAAA,SAAIvc,EAAoB4c,GACtB,GAAI5c,EAAa/J,UACf,OAAO,IAAIsmB,GAAcK,EAAOpxB,KAAK2uB,UAErC,IAAM7Q,EAAQtJ,EAAaF,WAErB+c,GADQrxB,KAAK2uB,SAASze,IAAI4N,IAAUiT,GAAcJ,OACjC7gB,IAAI0E,EAAaC,WAAY2c,GAC9C1M,EAAc1kB,KAAK2uB,SAAStO,OAAOvC,EAAOuT,GAChD,OAAO,IAAIN,GAAc/wB,KAAKmC,MAAOuiB,IAUzCqM,oBAAA,SAAOvc,GACL,GAAIA,EAAa/J,UACf,OAAIzK,KAAK2uB,SAASlkB,UACTsmB,GAAcJ,MAEd,IAAII,GAAc,KAAM/wB,KAAK2uB,UAGtC,IAAM7Q,EAAQtJ,EAAaF,WACrBc,EAAQpV,KAAK2uB,SAASze,IAAI4N,GAChC,GAAI1I,EAAO,CACT,IAAMic,EAAWjc,EAAMrF,OAAOyE,EAAaC,YACvCiQ,SAMJ,OAJEA,EADE2M,EAAS5mB,UACGzK,KAAK2uB,SAAS5e,OAAO+N,GAErB9d,KAAK2uB,SAAStO,OAAOvC,EAAOuT,GAEzB,OAAfrxB,KAAKmC,OAAkBuiB,EAAYja,UAC9BsmB,GAAcJ,MAEd,IAAII,GAAc/wB,KAAKmC,MAAOuiB,GAGvC,OAAO1kB,MAWb+wB,iBAAA,SAAIvc,GACF,GAAIA,EAAa/J,UACf,OAAOzK,KAAKmC,MAEZ,IAAM2b,EAAQtJ,EAAaF,WACrBc,EAAQpV,KAAK2uB,SAASze,IAAI4N,GAChC,OAAI1I,EACKA,EAAMlF,IAAIsE,EAAaC,YAEvB,MAYbsc,qBAAA,SAAQvc,EAAoB8c,GAC1B,GAAI9c,EAAa/J,UACf,OAAO6mB,EAEP,IAAMxT,EAAQtJ,EAAaF,WAErB+c,GADQrxB,KAAK2uB,SAASze,IAAI4N,IAAUiT,GAAcJ,OACjCY,QAAQ/c,EAAaC,WAAY6c,GACpD5M,SAMJ,OAJEA,EADE2M,EAAS5mB,UACGzK,KAAK2uB,SAAS5e,OAAO+N,GAErB9d,KAAK2uB,SAAStO,OAAOvC,EAAOuT,GAErC,IAAIN,GAAc/wB,KAAKmC,MAAOuiB,IAYzCqM,kBAAA,SAAQpmB,GACN,OAAO3K,KAAKwxB,MAAM/d,GAAKkd,MAAOhmB,IAWxBomB,mBAAR,SACEU,EACA9mB,GAEA,IAAM+mB,EAA4B,GAOlC,OANA1xB,KAAK2uB,SAAS3O,iBAAiB,SAC7B6O,EACA9L,GAEA2O,EAAM7C,GAAY9L,EAAUyO,MAAMC,EAAUrc,MAAMyZ,GAAWlkB,KAExDA,EAAG8mB,EAAWzxB,KAAKmC,MAAOuvB,IAUnCX,wBAAA,SAAclb,EAAY5U,GACxB,OAAOjB,KAAK2xB,YAAY9b,EAAMpC,GAAKkd,MAAO1vB,IAGpC8vB,yBAAR,SACEa,EACAH,EACAxwB,GAEA,IAAMue,IAASxf,KAAKmC,OAAQlB,EAAEwwB,EAAWzxB,KAAKmC,OAC9C,GAAIqd,EACF,OAAOA,EAEP,GAAIoS,EAAannB,UACf,OAAO,KAEP,IAAMqT,EAAQ8T,EAAatd,WACrBud,EAAY7xB,KAAK2uB,SAASze,IAAI4N,GACpC,OAAI+T,EACKA,EAAUF,YACfC,EAAand,WACbgd,EAAUrc,MAAM0I,GAChB7c,GAGK,MAYf8vB,2BAAA,SACElb,EACA5U,GAEA,OAAOjB,KAAK8xB,eAAejc,EAAMpC,GAAKkd,MAAO1vB,IAGvC8vB,4BAAR,SACEa,EACAG,EACA9wB,GAEA,GAAI2wB,EAAannB,UACf,OAAOzK,KAEHA,KAAKmC,OACPlB,EAAE8wB,EAAqB/xB,KAAKmC,OAE9B,IAAM2b,EAAQ8T,EAAatd,WACrBud,EAAY7xB,KAAK2uB,SAASze,IAAI4N,GACpC,OAAI+T,EACKA,EAAUC,eACfF,EAAand,WACbsd,EAAoB3c,MAAM0I,GAC1B7c,GAGK8vB,GAAcJ,OAY3BI,qBAAA,SAAQ9vB,GACNjB,KAAKgyB,SAASve,GAAKkd,MAAO1vB,IAGpB8vB,sBAAR,SACEgB,EACA9wB,GAEAjB,KAAK2uB,SAAS3O,iBAAiB,SAASxC,EAAWuF,GACjDA,EAAUiP,SAASD,EAAoB3c,MAAMoI,GAAYvc,KAEvDjB,KAAKmC,OACPlB,EAAE8wB,EAAqB/xB,KAAKmC,QAQhC4uB,0BAAA,SAAa9vB,GACXjB,KAAK2uB,SAAS3O,iBACZ,SAACxC,EAAmBuF,GACdA,EAAU5gB,OACZlB,EAAEuc,EAAWuF,EAAU5gB,UA7VxB4uB,SAAQ,IAAIA,GAAmB,UAoBtC,YACkB5uB,EACAwsB,gBAAAA,EAjChB4B,GADGA,IACsB,IAAIhQ,GAC3B5P,KA+Bc3Q,WAAAmC,EACAnC,cAAA2uB,ECtCpB,QAMEsD,+BAAA,SAAkBzU,GAChB,OAAIxd,KAAK6V,KAAKpL,UACL,IAAIwnB,GAAejyB,KAAK+G,OAAQ0M,GAAKkd,OAErC,IAAIsB,GAAejyB,KAAK+G,OAAQ/G,KAAK6V,KAAKpB,iBANrD,YAAmB1N,EAAgC8O,GAAhC7V,YAAA+G,EAAgC/G,UAAA6V,EAFnD7V,UAAO6vB,GAAcqC,gBCAvB,QAUEC,+BAAA,SAAkB3U,GAChB,OAAIxd,KAAK6V,KAAKpL,UACL,IAAI0nB,GACTnyB,KAAK+G,OACL0M,GAAKkd,MACL3wB,KAAKmoB,KAAKlD,kBAAkBzH,IAGvB,IAAI2U,GAAUnyB,KAAK+G,OAAQ/G,KAAK6V,KAAKpB,WAAYzU,KAAKmoB,WAdjE,YACSphB,EACA8O,EACAsS,GAFAnoB,YAAA+G,EACA/G,UAAA6V,EACA7V,UAAAmoB,EALTnoB,UAAO6vB,GAAcuC,UCCvB,QAaEC,+BAAA,SAAkB7U,GAChB,GAAIxd,KAAK6V,KAAKpL,UAAW,CACvB,IAAMsY,EAAY/iB,KAAK2uB,SAAS+B,QAAQ,IAAIjd,GAAK+J,IACjD,OAAIuF,EAAUtY,UAEL,KACEsY,EAAU5gB,MAEZ,IAAIgwB,GAAUnyB,KAAK+G,OAAQ0M,GAAKkd,MAAO5N,EAAU5gB,OAGjD,IAAIkwB,GAAMryB,KAAK+G,OAAQ0M,GAAKkd,MAAO5N,GAO5C,OAJAjf,EACE9D,KAAK6V,KAAKvB,aAAekJ,EACzB,kEAEK,IAAI6U,GAAMryB,KAAK+G,OAAQ/G,KAAK6V,KAAKpB,WAAYzU,KAAK2uB,WAO7D0D,sBAAA,WACE,MACE,aACAryB,KAAK6V,KACL,KACA7V,KAAK+G,OAAOmC,WACZ,WACAlJ,KAAK2uB,SAASzlB,WACd,SA1CJ,YAC2BnC,EACA8O,EACA8Y,GAFA3uB,YAAA+G,EACA/G,UAAA6V,EACA7V,cAAA2uB,EAL3B3uB,UAAO6vB,GAAcyC,MCPvB,QAgBEC,gCAAA,WACE,OAAOvyB,KAAKwyB,mBAOdD,wBAAA,WACE,OAAOvyB,KAAKyyB,WAOdF,+BAAA,SAAkB1c,GAChB,GAAIA,EAAKpL,UACP,OAAOzK,KAAK0yB,uBAAyB1yB,KAAKyyB,UAG5C,IAAM5D,EAAWhZ,EAAKvB,WACtB,OAAOtU,KAAK2yB,mBAAmB9D,IAOjC0D,gCAAA,SAAmBtpB,GACjB,OACGjJ,KAAK0yB,uBAAyB1yB,KAAKyyB,WAAczyB,KAAKyoB,MAAMmK,SAAS3pB,IAO1EspB,qBAAA,WACE,OAAOvyB,KAAKyoB,WAjDd,YACUA,EACA+J,EACAC,GAFAzyB,WAAAyoB,EACAzoB,uBAAAwyB,EACAxyB,eAAAyyB,ECPZ,QAkCEI,6BAAA,SACEC,EACAC,EACAC,GAEA,OAAO,IAAIH,GACT,IAAIN,GAAUO,EAAWC,EAAUC,GACnChzB,KAAKizB,eAUTJ,8BAAA,SACEK,EACAH,EACAC,GAEA,OAAO,IAAIH,GACT7yB,KAAKmzB,YACL,IAAIZ,GAAUW,EAAYH,EAAUC,KAOxCH,2BAAA,WACE,OAAO7yB,KAAKmzB,aAMdN,kCAAA,WACE,OAAO7yB,KAAKmzB,YAAYT,qBACpB1yB,KAAKmzB,YAAYC,UACjB,MAMNP,4BAAA,WACE,OAAO7yB,KAAKizB,cAMdJ,mCAAA,WACE,OAAO7yB,KAAKizB,aAAaP,qBACrB1yB,KAAKizB,aAAaG,UAClB,MA5ECP,SAAQ,IAAIA,GACjB,IAAIN,GACF1N,GAAapH,YACS,GACR,GAEhB,IAAI8U,GACF1N,GAAapH,YACS,GACR,QAlBlB,YACmB0V,EACAF,GADAjzB,iBAAAmzB,EACAnzB,kBAAAizB,ECRrB,QAaSI,eAAP,SAAmB/X,GACjB,OAAO,IAAI+X,GAAOA,GAAOC,MAAOhY,IAQ3B+X,oBAAP,SAAwBxE,EAAkBvT,GACxC,OAAO,IAAI+X,GAAOA,GAAOE,YAAajY,EAAUuT,IAQ3CwE,sBAAP,SAA0BxE,EAAkBvT,GAC1C,OAAO,IAAI+X,GAAOA,GAAOG,cAAelY,EAAUuT,IAS7CwE,sBAAP,SACExE,EACA4E,EACAC,GAEA,OAAO,IAAIL,GAAOA,GAAOM,cAAeF,EAAa5E,EAAU6E,IAQ1DL,oBAAP,SAAwBxE,EAAkBvT,GACxC,OAAO,IAAI+X,GAAOA,GAAOO,YAAatY,EAAUuT,IAK3CwE,eAAc,cAGdA,iBAAgB,gBAGhBA,iBAAgB,gBAGhBA,eAAc,cAGdA,SAAQ,YAvEf,YACS3c,EACAsT,EACAxM,EACAqW,EACApK,GAJAzpB,UAAA0W,EACA1W,kBAAAgqB,EACAhqB,eAAAwd,EACAxd,aAAA6zB,EACA7zB,cAAAypB,ECCX,QAGEqK,yBAAA,SACE3L,EACAlf,EACAooB,EACA0C,EACAhtB,EACAitB,GAEAlwB,EACEqkB,EAAK8L,UAAUj0B,KAAK+oB,QACpB,qDAEF,IAAMmL,EAAW/L,EAAKlD,kBAAkBhc,GAExC,OACEirB,EAAShP,SAAS6O,GAAchV,OAAOsS,EAASnM,SAAS6O,KAKrDG,EAASzpB,WAAa4mB,EAAS5mB,UAK1B0d,GAIiB,MAAxB6L,IACE3C,EAAS5mB,UACP0d,EAAKyK,SAAS3pB,GAChB+qB,EAAqBG,iBACnBd,GAAOe,mBAAmBnrB,EAAKirB,IAGjCpwB,EACEqkB,EAAKnL,aACL,uEAGKkX,EAASzpB,UAClBupB,EAAqBG,iBACnBd,GAAOgB,iBAAiBprB,EAAKooB,IAG/B2C,EAAqBG,iBACnBd,GAAOiB,mBAAmBrrB,EAAKooB,EAAU6C,KAI3C/L,EAAKnL,cAAgBqU,EAAS5mB,UACzB0d,EAGAA,EAAKtK,qBAAqB5U,EAAKooB,GAAUkD,UAAUv0B,KAAK+oB,UAOnE+K,4BAAA,SACED,EACAW,EACAR,GA6BA,OA3B4B,MAAxBA,IACGH,EAAQ7W,cACX6W,EAAQnO,aAAa1G,GAAgB,SAAS/V,EAAKyU,GAC5C8W,EAAQ5B,SAAS3pB,IACpB+qB,EAAqBG,iBACnBd,GAAOe,mBAAmBnrB,EAAKyU,MAKlC8W,EAAQxX,cACXwX,EAAQ9O,aAAa1G,GAAgB,SAAS/V,EAAKyU,GACjD,GAAImW,EAAQjB,SAAS3pB,GAAM,CACzB,IAAMirB,EAAWL,EAAQ5O,kBAAkBhc,GACtCirB,EAASnV,OAAOrB,IACnBsW,EAAqBG,iBACnBd,GAAOiB,mBAAmBrrB,EAAKyU,EAAWwW,SAI9CF,EAAqBG,iBACnBd,GAAOgB,iBAAiBprB,EAAKyU,OAMhC8W,EAAQD,UAAUv0B,KAAK+oB,SAMhC+K,4BAAA,SAAeD,EAAe1O,GAC5B,OAAI0O,EAAQppB,UACHoa,GAAapH,WAEboW,EAAQjW,eAAeuH,IAOlC2O,0BAAA,WACE,OAAO,GAMTA,8BAAA,WACE,OAAO9zB,MAMT8zB,sBAAA,WACE,OAAO9zB,KAAK+oB,YAhId,YAA6BA,GAAA/oB,YAAA+oB,ECnB/B,QAME0L,8BAAA,SAAiB7K,GACf,IAAMlT,EAAOkT,EAAOlT,KACdmY,EAAWjF,EAAOpM,UACxB1Z,EACE4S,GAAQ2c,GAAOE,aACb7c,GAAQ2c,GAAOM,eACfjd,GAAQ2c,GAAOG,cACjB,6CAEF1vB,EACe,cAAb+qB,EACA,mDAEF,IAAM6F,EAAY10B,KAAK20B,UAAUzkB,IAAI2e,GACrC,GAAI6F,EAAW,CACb,IAAME,EAAUF,EAAUhe,KAC1B,GAAIA,GAAQ2c,GAAOE,aAAeqB,GAAWvB,GAAOG,cAClDxzB,KAAK20B,UAAU7kB,IACb+e,EACAwE,GAAOiB,mBACLzF,EACAjF,EAAOI,aACP0K,EAAU1K,oBAGT,GACLtT,GAAQ2c,GAAOG,eACfoB,GAAWvB,GAAOE,YAElBvzB,KAAK20B,UAAUtF,OAAOR,QACjB,GACLnY,GAAQ2c,GAAOG,eACfoB,GAAWvB,GAAOM,cAElB3zB,KAAK20B,UAAU7kB,IACb+e,EACAwE,GAAOe,mBAAmBvF,EAAU6F,EAAUb,eAE3C,GACLnd,GAAQ2c,GAAOM,eACfiB,GAAWvB,GAAOE,YAElBvzB,KAAK20B,UAAU7kB,IACb+e,EACAwE,GAAOgB,iBAAiBxF,EAAUjF,EAAOI,mBAEtC,CAAA,GACLtT,GAAQ2c,GAAOM,eACfiB,GAAWvB,GAAOM,cAWlB,MAAM1vB,EACJ,mCACE2lB,EACA,mBACA8K,GAbJ10B,KAAK20B,UAAU7kB,IACb+e,EACAwE,GAAOiB,mBACLzF,EACAjF,EAAOI,aACP0K,EAAUb,gBAYhB7zB,KAAK20B,UAAU7kB,IAAI+e,EAAUjF,IAIjC6K,wBAAA,WACE,OAAO90B,MAAMk1B,KAAK70B,KAAK20B,UAAUG,eA3ErC,cACmB90B,eAAiC,IAAI0vB,ICqCxD,eAyBO,IAAMqF,GAA2B,IArBtCC,8BAAA,SAAiBnG,GACf,OAAO,MAMTmG,gCAAA,SACEhX,EACA5I,EACA1C,GAEA,OAAO,cAiCTuiB,8BAAA,SAAiBpG,GACf,IAAM7S,EAAOhc,KAAKk1B,WAAWC,gBAC7B,GAAInZ,EAAK2W,mBAAmB9D,GAC1B,OAAO7S,EAAKoX,UAAUnO,kBAAkB4J,GAExC,IAAMuG,EAC4B,MAAhCp1B,KAAKq1B,wBACD,IAAI9C,GAAUvyB,KAAKq1B,yBAAyB,GAAM,GAClDr1B,KAAKk1B,WAAWI,iBACtB,OAAOt1B,KAAKu1B,QAAQC,kBAAkB3G,EAAUuG,IAOpDH,gCAAA,SACEjX,EACA5I,EACA1C,GAEA,IAAM+iB,EAC4B,MAAhCz1B,KAAKq1B,wBACDr1B,KAAKq1B,wBACLr1B,KAAKk1B,WAAWQ,wBAChBC,EAAQ31B,KAAKu1B,QAAQK,iBACzBH,EACArgB,EACA,EACA1C,EACAsL,GAEF,OAAqB,IAAjB2X,EAAMh1B,OACD,KAEAg1B,EAAM,QA5CjB,YACUJ,EACAL,EACAG,gBAAAA,QAFAr1B,aAAAu1B,EACAv1B,gBAAAk1B,EACAl1B,6BAAAq1B,EC3DZ,OAKE,SACkBQ,EACAC,GADA91B,eAAA61B,EACA71B,aAAA81B,OAgBlBC,2BAAA,SAAcF,GACZ/xB,EACE+xB,EACGV,gBACA/B,UACAa,UAAUj0B,KAAKg2B,QAAQjM,YAC1B,0BAEFjmB,EACE+xB,EACGP,iBACAlC,UACAa,UAAUj0B,KAAKg2B,QAAQjM,YAC1B,4BAWJgM,4BAAA,SACEE,EACAC,EACAC,EACAC,GAEA,IACIC,EAAcC,EADZC,EAAc,IAAI9B,GAExB,GAAIyB,EAAUxf,OAASmZ,GAAcuC,UAAW,CAC9C,IAAMoE,EAAYN,EAEhBG,EADEG,EAAUzvB,OAAOqpB,SACJpwB,KAAKy2B,oBAClBR,EACAO,EAAU3gB,KACV2gB,EAAUrO,KACVgO,EACAC,EACAG,IAGFzyB,EAAO0yB,EAAUzvB,OAAOspB,WAAY,mBAIpCiG,EACEE,EAAUzvB,OAAOupB,QAChB2F,EAAaX,iBAAiBoB,eAC5BF,EAAU3gB,KAAKpL,UACLzK,KAAK22B,sBAClBV,EACAO,EAAU3gB,KACV2gB,EAAUrO,KACVgO,EACAC,EACAE,EACAC,SAGC,GAAIL,EAAUxf,OAASmZ,GAAcyC,MAAO,CACjD,IAAMsE,EAAQV,EAEZG,EADEO,EAAM7vB,OAAOqpB,SACApwB,KAAK62B,gBAClBZ,EACAW,EAAM/gB,KACN+gB,EAAMjI,SACNwH,EACAC,EACAG,IAGFzyB,EAAO8yB,EAAM7vB,OAAOspB,WAAY,mBAEhCiG,EACEM,EAAM7vB,OAAOupB,QAAU2F,EAAaX,iBAAiBoB,aACxC12B,KAAK82B,kBAClBb,EACAW,EAAM/gB,KACN+gB,EAAMjI,SACNwH,EACAC,EACAE,EACAC,SAGC,GAAIL,EAAUxf,OAASmZ,GAAcgB,eAAgB,CAC1D,IAAMkG,EAAeb,EAWnBG,EAVGU,EAAanG,OAUD5wB,KAAKg3B,iBAClBf,EACAc,EAAalhB,KACbsgB,EACAC,EACAG,GAdav2B,KAAKi3B,cAClBhB,EACAc,EAAalhB,KACbkhB,EAAatG,aACb0F,EACAC,EACAG,OAWC,CAAA,GAAIL,EAAUxf,OAASmZ,GAAcqC,gBAQ1C,MAAMjuB,EAAe,2BAA6BiyB,EAAUxf,MAP5D2f,EAAer2B,KAAKk3B,gBAClBjB,EACAC,EAAUrgB,KACVsgB,EACAI,GAKJ,IAAMT,EAAUS,EAAYY,aAE5B,OADApB,GAAcqB,oBAAoBnB,EAAcI,EAAcP,GACvD,IAAIuB,GAAgBhB,EAAcP,IAS5BC,uBAAf,SACEE,EACAI,EACAE,GAEA,IAAMzD,EAAYuD,EAAalB,gBAC/B,GAAIrC,EAAUJ,qBAAsB,CAClC,IAAM4E,EACJxE,EAAUM,UAAUpW,cAAgB8V,EAAUM,UAAU3oB,UACpD8sB,EAAkBtB,EAAauB,wBAEd,EAArBjB,EAAY51B,SACXs1B,EAAad,gBAAgBzC,sBAC7B4E,IACExE,EAAUM,UAAUrU,OAA4BwY,KAClDzE,EACEM,UACAnW,cACA8B,OAAOwY,EAAgBta,iBAE1BsZ,EAAYl0B,KACVgxB,GAAOoE,YACgBpB,EAAamB,2BAgBpCzB,iDAAR,SACEF,EACA6B,EACAvB,EACApvB,EACAwvB,GAEA,IAAMoB,EAAe9B,EAAUV,gBAC/B,GAA8C,MAA1CgB,EAAYyB,eAAeF,GAE7B,OAAO7B,EAEP,IAAIgC,SAAezC,SACnB,GAAIsC,EAAWjtB,UAMb,GAJA3G,EACE+xB,EAAUP,iBAAiB5C,qBAC3B,8DAEEmD,EAAUP,iBAAiBoB,aAAc,CAI3C,IAAMoB,EAAcjC,EAAUH,wBACxBqC,EACJD,aAAuBjT,GACnBiT,EACAjT,GAAapH,WACbua,EAAwB7B,EAAY8B,0BACxCF,GAEFF,EAAgB73B,KAAKg2B,QAAQkC,eAC3BrC,EAAUV,gBAAgB/B,UAC1B4E,EACAzB,OAEG,CACL,IAAM4B,EAAehC,EAAYiC,uBAC/BvC,EAAUH,yBAEZmC,EAAgB73B,KAAKg2B,QAAQkC,eAC3BrC,EAAUV,gBAAgB/B,UAC1B+E,EACA5B,OAGC,CACL,IAAM1H,EAAW6I,EAAWpjB,WAC5B,GAAgB,aAAZua,EAAyB,CAC3B/qB,EAC4B,GAA1B4zB,EAAW1iB,YACX,yDAEF,IAAMqjB,EAAeV,EAAavE,UAClCgC,EAAaS,EAAUP,iBAAiBlC,UAExC,IAAMkF,EAAkBnC,EAAYoC,mCAClCb,EACAW,EACAjD,GAGAyC,EADqB,MAAnBS,EACct4B,KAAKg2B,QAAQpY,eAC3Bya,EACAC,GAIcX,EAAavE,cAE1B,CACL,IAAMoF,EAAkBd,EAAWjjB,WAE/BgkB,SACJ,GAAId,EAAahF,mBAAmB9D,GAAW,CAC7CuG,EAAaS,EAAUP,iBAAiBlC,UACxC,IAAMsF,EAAmBvC,EAAYoC,mCACnCb,EACAC,EAAavE,UACbgC,GAGAqD,EADsB,MAApBC,EACcf,EACbvE,UACAnO,kBAAkB4J,GAClB9Q,YAAYya,EAAiBE,GAGhBf,EACbvE,UACAnO,kBAAkB4J,QAGvB4J,EAAgBtC,EAAYX,kBAC1B3G,EACAgH,EAAUP,kBAIZuC,EADmB,MAAjBY,EACcz4B,KAAKg2B,QAAQjY,YAC3B4Z,EAAavE,UACbvE,EACA4J,EACAD,EACAzxB,EACAwvB,GAIcoB,EAAavE,WAInC,OAAOyC,EAAU8C,gBACfd,EACAF,EAAajF,sBAAwBgF,EAAWjtB,UAChDzK,KAAKg2B,QAAQ4C,iBAgBnB7C,mCAAA,SACEE,EACAyB,EACAmB,EACA1C,EACAC,EACAE,EACAC,GAEA,IACIuC,EADEC,EAAgB9C,EAAaX,iBAE7B0D,EAAe1C,EACjBt2B,KAAKg2B,QACLh2B,KAAKg2B,QAAQiD,mBACjB,GAAIvB,EAAWjtB,UACbquB,EAAiBE,EAAad,eAC5Ba,EAAc3F,UACdyF,EACA,WAEG,GAAIG,EAAaJ,iBAAmBG,EAAcrC,aAAc,CAErE,IAAMwC,EAAgBH,EACnB3F,UACArV,YAAY2Z,EAAYmB,GAC3BC,EAAiBE,EAAad,eAC5Ba,EAAc3F,UACd8F,EACA,UAEG,CACL,IAAMrK,EAAW6I,EAAWpjB,WAC5B,IACGykB,EAAcI,kBAAkBzB,IACR,EAAzBA,EAAW1iB,YAGX,OAAOihB,EAET,IAAMuC,EAAkBd,EAAWjjB,WAE7BkJ,EADYob,EAAc3F,UAAUnO,kBAAkB4J,GAC7B9Q,YAAYya,EAAiBK,GAE1DC,EADc,aAAZjK,EACemK,EAAapb,eAC5Bmb,EAAc3F,UACdzV,GAGeqb,EAAajb,YAC5Bgb,EAAc3F,UACdvE,EACAlR,EACA6a,EACAzD,GACA,MAIN,IAAMsB,EAAeJ,EAAamD,iBAChCN,EACAC,EAAcrG,sBAAwBgF,EAAWjtB,UACjDuuB,EAAaJ,gBAET7xB,EAAS,IAAIkuB,GACjBkB,EACAE,EACAD,GAEF,OAAOp2B,KAAKq5B,oCACVhD,EACAqB,EACAvB,EACApvB,EACAwvB,IAcJR,iCAAA,SACEE,EACAyB,EACAmB,EACA1C,EACAC,EACAG,GAEA,IACIF,EAAcwB,EADZF,EAAe1B,EAAad,gBAE5BpuB,EAAS,IAAIkuB,GACjBkB,EACAF,EACAG,GAEF,GAAIsB,EAAWjtB,UACbotB,EAAgB73B,KAAKg2B,QAAQkC,eAC3BjC,EAAad,gBAAgB/B,UAC7ByF,EACAtC,GAEFF,EAAeJ,EAAa0C,gBAC1Bd,GACA,EACA73B,KAAKg2B,QAAQ4C,oBAEV,CACL,IAAM/J,EAAW6I,EAAWpjB,WAC5B,GAAiB,cAAbua,EACFgJ,EAAgB73B,KAAKg2B,QAAQpY,eAC3BqY,EAAad,gBAAgB/B,UAC7ByF,GAEFxC,EAAeJ,EAAa0C,gBAC1Bd,EACAF,EAAajF,qBACbiF,EAAajB,kBAEV,CACL,IAAM8B,EAAkBd,EAAWjjB,WAC7Byf,EAAWyD,EAAavE,UAAUnO,kBAAkB4J,GACtDwC,SACJ,GAAImH,EAAgB/tB,UAElB4mB,EAAWwH,MACN,CACL,IAAMnb,EAAY3W,EAAOuyB,iBAAiBzK,GAQtCwC,EAPa,MAAb3T,EAE8B,cAA9B8a,EAAgB9f,WAChBgF,EAAUwH,SAASsT,EAAgBe,UAAU9uB,UAIlCiT,EAEAA,EAAUK,YAAYya,EAAiBK,GAIzChU,GAAapH,WAG5B,GAAKyW,EAASnV,OAAOsS,GAenBgF,EAAeJ,MAfe,CAC9B,IAAMuD,EAAex5B,KAAKg2B,QAAQjY,YAChC4Z,EAAavE,UACbvE,EACAwC,EACAmH,EACAzxB,EACAwvB,GAEFF,EAAeJ,EAAa0C,gBAC1Ba,EACA7B,EAAajF,qBACb1yB,KAAKg2B,QAAQ4C,kBAOrB,OAAOvC,GASMN,kBAAf,SACEF,EACAhH,GAEA,OAAOgH,EAAUV,gBAAgBxC,mBAAmB9D,IAa9CkH,6BAAR,SACEF,EACAhgB,EACA4jB,EACAtD,EACA2B,EACAvB,GANF,WAcMmD,EAAe7D,EA6BnB,OA5BA4D,EAAgBE,QAAQ,SAACnlB,EAAckJ,GACrC,IAAMkc,EAAY/jB,EAAKT,MAAMZ,GACzBuhB,GAAc8D,eAAehE,EAAW+D,EAAUtlB,cACpDolB,EAAenyB,EAAKkvB,oBAClBiD,EACAE,EACAlc,EACAyY,EACA2B,EACAvB,MAKNkD,EAAgBE,QAAQ,SAACnlB,EAAckJ,GACrC,IAAMkc,EAAY/jB,EAAKT,MAAMZ,GACxBuhB,GAAc8D,eAAehE,EAAW+D,EAAUtlB,cACrDolB,EAAenyB,EAAKkvB,oBAClBiD,EACAE,EACAlc,EACAyY,EACA2B,EACAvB,MAKCmD,GASD3D,yBAAR,SAAoB/Z,EAAY4a,GAI9B,OAHAA,EAAM+C,QAAQ,SAASnlB,EAAckJ,GACnC1B,EAAOA,EAAK+B,YAAYvJ,EAAckJ,KAEjC1B,GAcD+Z,+BAAR,SACEF,EACAhgB,EACA4jB,EACAtD,EACA2B,EACAxB,EACAC,GAPF,WAWE,GACEV,EACGP,iBACAlC,UACA3oB,YACForB,EAAUP,iBAAiB5C,qBAE5B,OAAOmD,EAST,IACIiE,EADAJ,EAAe7D,EAGjBiE,EADEjkB,EAAKpL,UACSgvB,EAEA1I,GAAcJ,MAAMY,QAAQ1b,EAAM4jB,GAEpD,IAAMrE,EAAaS,EAAUP,iBAAiBlC,UAyC9C,OAxCA0G,EAAcnL,SAAS3O,iBAAiB,SAAC6O,EAAU9L,GACjD,GAAIqS,EAAWxC,SAAS/D,GAAW,CACjC,IAAMkL,EAAclE,EACjBP,iBACAlC,UACAnO,kBAAkB4J,GACfwC,EAAW9pB,EAAKyyB,YAAYD,EAAahX,GAC/C2W,EAAenyB,EAAKovB,sBAClB+C,EACA,IAAIjmB,GAAKob,GACTwC,EACA8E,EACA2B,EACAxB,EACAC,MAINuD,EAAcnL,SAAS3O,iBAAiB,SAAC6O,EAAUoL,GACjD,IAAMC,GACHrE,EAAUP,iBAAiB3C,mBAAmB9D,IACvB,MAAxBoL,EAAe93B,MACjB,IAAKizB,EAAWxC,SAAS/D,KAAcqL,EAAoB,CACzD,IAAMH,EAAclE,EACjBP,iBACAlC,UACAnO,kBAAkB4J,GACfwC,EAAW9pB,EAAKyyB,YAAYD,EAAaE,GAC/CP,EAAenyB,EAAKovB,sBAClB+C,EACA,IAAIjmB,GAAKob,GACTwC,EACA8E,EACA2B,EACAxB,EACAC,MAKCmD,GAaD3D,2BAAR,SACEF,EACAsE,EACA1J,EACA0F,EACAC,EACAG,GAEA,GAA2C,MAAvCJ,EAAYyB,eAAeuC,GAC7B,OAAOtE,EAIT,IAAMS,EAAmBT,EAAUP,iBAAiBoB,aAI9CoB,EAAcjC,EAAUP,iBAC9B,GAA0B,MAAtB7E,EAAatuB,MAAe,CAE9B,GACGg4B,EAAQ1vB,WAAaqtB,EAAYpF,sBAClCoF,EAAYqB,kBAAkBgB,GAE9B,OAAOn6B,KAAK22B,sBACVd,EACAsE,EACArC,EAAY1E,UAAUlO,SAASiV,GAC/BhE,EACAC,EACAE,EACAC,GAEG,GAAI4D,EAAQ1vB,UAAW,CAG5B,IAAI2vB,EAAkBrJ,GAAcJ,MAIpC,OAHAmH,EAAY1E,UAAU1N,aAAa9I,GAAW,SAAShP,EAAMoO,GAC3Doe,EAAkBA,EAAgBtqB,IAAI,IAAI2D,GAAK7F,GAAOoO,KAEjDhc,KAAK82B,kBACVjB,EACAsE,EACAC,EACAjE,EACAC,EACAE,EACAC,GAGF,OAAOV,EAIT,IAAIwE,EAAkBtJ,GAAcJ,MAUpC,OATAF,EAAakJ,QAAQ,SAASW,EAAWn4B,GACvC,IAAMo4B,EAAkBJ,EAAQ/kB,MAAMklB,GAClCxC,EAAYqB,kBAAkBoB,KAChCF,EAAkBA,EAAgBvqB,IAChCwqB,EACAxC,EAAY1E,UAAUlO,SAASqV,OAI9Bv6B,KAAK82B,kBACVjB,EACAsE,EACAE,EACAlE,EACAC,EACAE,EACAC,IAaER,6BAAR,SACEF,EACAhgB,EACAsgB,EACAI,GAEA,IAAMiE,EAAgB3E,EAAUP,iBAC1Be,EAAeR,EAAUuD,iBAC7BoB,EAAcpH,UACdoH,EAAc9H,sBAAwB7c,EAAKpL,UAC3C+vB,EAAc9D,cAEhB,OAAO12B,KAAKq5B,oCACVhD,EACAxgB,EACAsgB,EACApB,GACAwB,IAaIR,8BAAR,SACEF,EACAhgB,EACAsgB,EACAsE,EACAlE,GAEA,IAAIxD,EACJ,GAAwC,MAApCoD,EAAYyB,eAAe/hB,GAC7B,OAAOggB,EAEP,IAAM9uB,EAAS,IAAIkuB,GACjBkB,EACAN,EACA4E,GAEIC,EAAgB7E,EAAUV,gBAAgB/B,UAC5CyE,SACJ,GAAIhiB,EAAKpL,WAAiC,cAApBoL,EAAKvB,WAA4B,CACrD,IAAI+H,SACJ,GAAIwZ,EAAUP,iBAAiB5C,qBAC7BrW,EAAU8Z,EAAYiC,uBACpBvC,EAAUH,6BAEP,CACL,IAAMiF,EAAiB9E,EAAUP,iBAAiBlC,UAClDtvB,EACE62B,aAA0B9V,GAC1B,iDAEFxI,EAAU8Z,EAAY8B,0BACpB0C,GAGJte,EAAUA,EACVwb,EAAgB73B,KAAKg2B,QAAQkC,eAC3BwC,EACAre,EACAka,OAEG,CACL,IAAM1H,EAAWhZ,EAAKvB,WAClB+c,EAAW8E,EAAYX,kBACzB3G,EACAgH,EAAUP,kBAGE,MAAZjE,GACAwE,EAAUP,iBAAiB3C,mBAAmB9D,KAE9CwC,EAAWqJ,EAAczV,kBAAkB4J,KAG3CgJ,EADc,MAAZxG,EACcrxB,KAAKg2B,QAAQjY,YAC3B2c,EACA7L,EACAwC,EACAxb,EAAKpB,WACL1N,EACAwvB,GAGFV,EACGV,gBACA/B,UACAR,SAAS/D,GAGI7uB,KAAKg2B,QAAQjY,YAC3B2c,EACA7L,EACAhK,GAAapH,WACb5H,EAAKpB,WACL1N,EACAwvB,GAGcmE,GAGFjwB,WACdorB,EAAUP,iBAAiB5C,uBAG3BK,EAAWoD,EAAYiC,uBACrBvC,EAAUH,0BAEC1Y,eACX6a,EAAgB73B,KAAKg2B,QAAQkC,eAC3BL,EACA9E,EACAwD,IAQR,OAHAxD,EACE8C,EAAUP,iBAAiB5C,sBACe,MAA1CyD,EAAYyB,eAAenkB,GAAKkd,OAC3BkF,EAAU8C,gBACfd,EACA9E,EACA/yB,KAAKg2B,QAAQ4C,qBAz2BnB,YAA6B5C,GAAAh2B,aAAAg2B,EC5B/B,QA6BE4E,sCAAA,SACE9E,EACA+E,EACAC,GAHF,WAKQC,EAAkB,GAClBC,EAAkB,GAuDxB,OArDAlF,EAAQrG,QAAQ,SAAA7F,GAEZA,EAAOlT,OAAS2c,GAAOM,eACvBpsB,EAAKwhB,OAAOkS,oBACVrR,EAAOiK,QACPjK,EAAOI,eAGTgR,EAAM34B,KACJgxB,GAAO6H,iBACLtR,EAAOpM,UACPoM,EAAOI,iBAMfhqB,KAAKm7B,uBACHJ,EACA1H,GAAOG,cACPsC,EACAgF,EACAD,GAEF76B,KAAKm7B,uBACHJ,EACA1H,GAAOE,YACPuC,EACAgF,EACAD,GAEF76B,KAAKm7B,uBACHJ,EACA1H,GAAOO,YACPoH,EACAF,EACAD,GAEF76B,KAAKm7B,uBACHJ,EACA1H,GAAOM,cACPmC,EACAgF,EACAD,GAEF76B,KAAKm7B,uBACHJ,EACA1H,GAAOC,MACPwC,EACAgF,EACAD,GAGKE,GAaDH,oCAAR,SACEG,EACA/hB,EACA8c,EACAsF,EACAP,GALF,WAOQQ,EAAkBvF,EAAQwF,OAAO,SAAA1R,GAAU,OAAAA,EAAOlT,OAASsC,IAEjEqiB,EAAgBxpB,KAAK7R,KAAKu7B,gBAAgB3rB,KAAK5P,OAC/Cq7B,EAAgB5L,QAAQ,SAAA7F,GACtB,IAAM4R,EAAqBj0B,EAAKk0B,yBAC9B7R,EACAiR,GAEFO,EAAc3L,QAAQ,SAAAiM,GAChBA,EAAaC,WAAW/R,EAAOlT,OACjCqkB,EAAO14B,KACLq5B,EAAaE,YAAYJ,EAAoBj0B,EAAKs0B,cAapDjB,sCAAR,SAAiChR,EAAgBiR,GAC/C,MAAoB,UAAhBjR,EAAOlT,MAAoC,kBAAhBkT,EAAOlT,OAGpCkT,EAAOH,SAAWoR,EAAWiB,wBAE3BlS,EAAOpM,UACPoM,EAAOI,aACPhqB,KAAK+oB,SANAa,GAkBHgR,6BAAR,SAAwBrvB,EAAWhM,GACjC,GAAmB,MAAfgM,EAAEiS,WAAoC,MAAfje,EAAEie,UAC3B,MAAMvZ,EAAe,sCAEvB,IAAM83B,EAAW,IAAIhgB,GAAUxQ,EAAEiS,UAAWjS,EAAEye,cACxCgS,EAAW,IAAIjgB,GAAUxc,EAAEie,UAAWje,EAAEyqB,cAC9C,OAAOhqB,KAAK+oB,OAAO5M,QAAQ4f,EAAUC,QAzJvC,YAAoBH,GAAA77B,YAAA67B,EAKlB77B,KAAK+oB,OAAS/oB,KAAK67B,OAAO/R,iBAAiBC,WCA/C,ICbIU,OD6EFwR,sBAAA,WACE,OAAOj8B,KAAK67B,QAMdI,4BAAA,WACE,OAAOj8B,KAAKk1B,WAAWI,iBAAiBlC,WAO1C6I,oCAAA,SAAuBpmB,GACrB,IAAMqmB,EAAQl8B,KAAKk1B,WAAWQ,wBAC9B,OAAIwG,IAIAl8B,KAAK67B,OAAO/R,iBAAiBqS,iBAC3BtmB,EAAKpL,YAAcyxB,EAAMjX,kBAAkBpP,EAAKvB,YAAY7J,WAEvDyxB,EAAMhX,SAASrP,GAGnB,MAMTomB,qBAAA,WACE,OAA2C,IAApCj8B,KAAKo8B,oBAAoBz7B,QAMlCs7B,kCAAA,SAAqB3S,GACnBtpB,KAAKo8B,oBAAoB/5B,KAAKinB,IAQhC2S,qCAAA,SACE3S,EACA+S,GAEA,IAAMC,EAA8B,GACpC,GAAID,EAAa,CACfv4B,EACuB,MAArBwlB,EACA,mDAEF,IAAMiT,EAAOv8B,KAAK67B,OAAOhmB,KACzB7V,KAAKo8B,oBAAoB3M,QAAQ,SAASiM,GACxCW,EAAoCA,EACpC,IAAMG,EAAad,EAAae,kBAAkBJ,EAAaE,GAC3DC,GACFF,EAAaj6B,KAAKm6B,KAKxB,GAAIlT,EAAmB,CAErB,IADA,IAAIoT,EAAY,GACPl8B,EAAI,EAAGA,EAAIR,KAAKo8B,oBAAoBz7B,SAAUH,EAAG,CACxD,IAAMm8B,EAAW38B,KAAKo8B,oBAAoB57B,GAC1C,GAAKm8B,EAASC,QAAQtT,IAEf,GAAIA,EAAkBuT,iBAAkB,CAE7CH,EAAYA,EAAU15B,OAAOhD,KAAKo8B,oBAAoB3yB,MAAMjJ,EAAI,IAChE,YAJAk8B,EAAUr6B,KAAKs6B,GAOnB38B,KAAKo8B,oBAAsBM,OAE3B18B,KAAKo8B,oBAAsB,GAE7B,OAAOE,GAWTL,4BAAA,SACE/F,EACAC,EACAsE,GAGEvE,EAAUxf,OAASmZ,GAAcyC,OACJ,OAA7B4D,EAAUnvB,OAAOopB,UAEjBrsB,EACE9D,KAAKk1B,WAAWQ,wBAChB,6DAEF5xB,EACE9D,KAAKk1B,WAAWsC,uBAChB,4DAIJ,IAAMvB,EAAej2B,KAAKk1B,WACpB1V,EAASxf,KAAK88B,WAAWC,eAC7B9G,EACAC,EACAC,EACAsE,GAYF,OAVAz6B,KAAK88B,WAAWE,cAAcxd,EAAOqW,WAErC/xB,EACE0b,EAAOqW,UAAUP,iBAAiB5C,uBAC/BuD,EAAaX,iBAAiB5C,qBACjC,2DAGF1yB,KAAKk1B,WAAa1V,EAAOqW,UAElB71B,KAAKi9B,0BACVzd,EAAOsW,QACPtW,EAAOqW,UAAUV,gBAAgB/B,UACjC,OAQJ6I,8BAAA,SAAiBP,GACf,IAAM5I,EAAY9yB,KAAKk1B,WAAWC,gBAC5B+H,EAA2B,GAUjC,OATKpK,EAAUM,UAAUpW,cACL8V,EAAUM,UAClB1N,aAAa1G,GAAgB,SAAS/V,EAAKyU,GACnDwf,EAAe76B,KAAKgxB,GAAOgB,iBAAiBprB,EAAKyU,MAGjDoV,EAAUJ,sBACZwK,EAAe76B,KAAKgxB,GAAOoE,YAAY3E,EAAUM,YAE5CpzB,KAAKi9B,0BACVC,EACApK,EAAUM,UACVsI,IAWJO,uCAAA,SACEnG,EACA+E,EACAvR,GAEA,IAAM8R,EAAgB9R,EAClB,CAACA,GACDtpB,KAAKo8B,oBACT,OAAOp8B,KAAKm9B,gBAAgBC,yBAC1BtH,EACA+E,EACAO,QAzOJ,YAAoBS,EAAewB,GAAfr9B,YAAA67B,EARZ77B,yBAA2C,GASjD,IAAM2W,EAAS3W,KAAK67B,OAAO/R,iBAErBwT,EAAc,IAAIxJ,GAAcnd,EAAOoT,YACvCuR,EAAS3kB,EAAO4mB,gBAMtBv9B,KAAK88B,WAAa,IAAI/G,GAAcuF,GAEpC,IAAMkC,EAAqBH,EAAiB/H,iBACtCmI,EAAoBJ,EAAiBlI,gBAGrCjC,EAAaoK,EAAYpF,eAC7BrT,GAAapH,WACb+f,EAAmBpK,UACnB,MAEIN,EAAYwI,EAAOpD,eACvBrT,GAAapH,WACbggB,EAAkBrK,UAClB,MAEI0F,EAAiB,IAAIvG,GACzBW,EACAsK,EAAmB9K,qBACnB4K,EAAY1E,gBAERf,EAAgB,IAAItF,GACxBO,EACA2K,EAAkB/K,qBAClB4I,EAAO1C,gBAOT54B,KAAKk1B,WAAa,IAAIrC,GAAUgF,EAAeiB,GAM/C94B,KAAKm9B,gBAAkB,IAAIvC,GAAe56B,KAAK67B,QC3DnD,QACEr8B,sBAAWk+B,iCAQX,WAEE,OADA55B,EAAO2mB,GAAwB,oCACxBA,QAVT,SAAkCrc,GAChCtK,GACG2mB,GACD,mDAEFA,GAAyBrc,mCAgB3BsvB,qBAAA,WACE,OAA2B,IAApB19B,KAAK29B,MAAM/O,MAGpB8O,4BAAA,SACExH,EACAC,EACAyH,WAEMzN,EAAU+F,EAAUnvB,OAAOopB,QACjC,GAAgB,OAAZA,EAAkB,CACpB,IAAM0N,EAAO79B,KAAK29B,MAAMztB,IAAIigB,GAE5B,OADArsB,EAAe,MAAR+5B,EAAc,gDACdA,EAAKd,eACV7G,EACAC,EACAyH,GAGF,IAAI7C,EAAkB,OAEtB,IAAmB,IAAAzxB,EAAA2Q,EAAAja,KAAK29B,MAAM7I,wCAAnB+I,UACT9C,EAASA,EAAO/3B,OACd66B,EAAKd,eAAe7G,EAAWC,EAAayH,qGAIhD,OAAO7C,GAcX2C,kCAAA,SACE7T,EACAP,EACA6M,EACA2B,EACAgG,GAEA,IAAM3N,EAAUtG,EAAM2E,kBAClBqP,EAAO79B,KAAK29B,MAAMztB,IAAIigB,GAC1B,IAAK0N,EAAM,CAET,IAAIhD,EAAa1E,EAAYiC,uBAC3B0F,EAAsBhG,EAAc,MAElCiG,GAAqB,EAEvBA,IADElD,IAGFA,EADS/C,aAAuBjT,GACnBsR,EAAY8B,0BAA0BH,GAGtCjT,GAAapH,YAFL,GAKvB,IAAMoY,EAAY,IAAIhD,GACpB,IAAIN,GACmBsI,EACrBkD,GACA,GAEF,IAAIxL,GACmBuF,EACrBgG,GACA,IAGJD,EAAO,IAAI5B,GAAKpS,EAAOgM,GACvB71B,KAAK29B,MAAM7tB,IAAIqgB,EAAS0N,GAK1B,OADAA,EAAKG,qBAAqB1U,GACnBuU,EAAKI,iBAAiB3U,IAc/BoU,qCAAA,SACE7T,EACAP,EACA+S,WAEMlM,EAAUtG,EAAM2E,kBAChB0P,EAAmB,GACrB5B,EAAwB,GACtB6B,EAAkBn+B,KAAKo+B,kBAC7B,GAAgB,YAAZjO,MAEF,IAAkC,IAAA7mB,EAAA2Q,EAAAja,KAAK29B,MAAMU,yCAAW,CAA7C,IAAAC,eAACC,OAAaV,OACvBvB,EAAeA,EAAat5B,OAC1B66B,EAAKW,wBAAwBlV,EAAmB+S,IAE9CwB,EAAKpzB,YACPzK,KAAK29B,MAAMtO,OAAOkP,GAIfV,EACEY,WACA3U,iBACAqS,gBAEH+B,EAAQ77B,KAAKw7B,EAAKY,oHAMlBZ,EAAO79B,KAAK29B,MAAMztB,IAAIigB,MAE1BmM,EAAeA,EAAat5B,OAC1B66B,EAAKW,wBAAwBlV,EAAmB+S,IAE9CwB,EAAKpzB,YACPzK,KAAK29B,MAAMtO,OAAOc,GAIf0N,EACEY,WACA3U,iBACAqS,gBAEH+B,EAAQ77B,KAAKw7B,EAAKY,cAa1B,OAPIN,IAAoBn+B,KAAKo+B,mBAE3BF,EAAQ77B,KACN,IAAIq7B,GAAUjT,uBAAuBZ,EAAMuC,KAAMvC,EAAMhU,OAIpD,CAAEqoB,QAASA,EAASnD,OAAQuB,IAGrCoB,2BAAA,mBACQle,EAAS,OACf,IAAmB,IAAAlW,EAAA2Q,EAAAja,KAAK29B,MAAM7I,wCAAU,CAAnC,IAAM+I,UAENA,EACEY,WACA3U,iBACAqS,gBAEH3c,EAAOnd,KAAKw7B,qGAGhB,OAAOre,GAOTke,oCAAA,SAAuB7nB,WACjBiiB,EAA2B,SAC/B,IAAmB,IAAAxuB,EAAA2Q,EAAAja,KAAK29B,MAAM7I,wCAAU,CAAnC,IAAM+I,UACT/F,EAAcA,GAAe+F,EAAKa,uBAAuB7oB,qGAE3D,OAAOiiB,GAGT4F,0BAAA,SAAa7T,GAEX,GADeA,EAAMC,iBACVqS,eACT,OAAOn8B,KAAK2+B,kBAEZ,IAAMxO,EAAUtG,EAAM2E,kBACtB,OAAOxuB,KAAK29B,MAAMztB,IAAIigB,IAI1BuN,gCAAA,SAAmB7T,GACjB,OAAmC,MAA5B7pB,KAAK4+B,aAAa/U,IAG3B6T,6BAAA,WACE,OAAiC,MAA1B19B,KAAK2+B,mBAGdjB,6BAAA,uBACE,IAAmB,IAAAp0B,EAAA2Q,EAAAja,KAAK29B,MAAM7I,wCAAU,CAAnC,IAAM+I,UACT,GACEA,EACGY,WACA3U,iBACAqS,eAEH,OAAO0B,oGAGX,OAAO,UA7OX,cAoBmB79B,WAA2B,IAAI0vB,IChClD,QAKEmP,sBAAA,SAAShpB,EAAYmG,GACnB,GAAInG,EAAKpL,UACP,OAAO,IAAIo0B,GAAc,IAAI9N,GAAc/U,IAE3C,IAAM8iB,EAAW9+B,KAAK++B,WAAWC,yBAAyBnpB,GAC1D,GAAgB,MAAZipB,EAAkB,CACpB,IAAMG,EAAeH,EAASjpB,KAC1B1T,EAAQ28B,EAAS38B,MACfqS,EAAef,GAAKe,aAAayqB,EAAcppB,GAErD,OADA1T,EAAQA,EAAM4b,YAAYvJ,EAAcwH,GACjC,IAAI6iB,GAAc7+B,KAAK++B,WAAWjvB,IAAImvB,EAAc98B,IAE3D,IAAMuuB,EAAU,IAAIK,GAAc/U,GAElC,OAAO,IAAI6iB,GADU7+B,KAAK++B,WAAWxN,QAAQ1b,EAAM6a,KAMzDmO,uBAAA,SAAUhpB,EAAYqpB,GACpB,IAAIC,EAAWn/B,KAIf,OAHA8R,GAAKotB,EAAS,SAASrQ,EAAkB7S,GACvCmjB,EAAWA,EAASC,SAASvpB,EAAKT,MAAMyZ,GAAW7S,KAE9CmjB,GAUTN,yBAAA,SAAYhpB,GACV,OAAIA,EAAKpL,UACAo0B,GAAclO,MAGd,IAAIkO,GADU7+B,KAAK++B,WAAWxN,QAAQ1b,EAAMkb,GAAcJ,SAYrEkO,8BAAA,SAAiBhpB,GACf,OAAqC,MAA9B7V,KAAKq/B,gBAAgBxpB,IAU9BgpB,6BAAA,SAAgBhpB,GACd,IAAMipB,EAAW9+B,KAAK++B,WAAWC,yBAAyBnpB,GAC1D,OAAgB,MAAZipB,EACK9+B,KAAK++B,WACT7uB,IAAI4uB,EAASjpB,MACbqP,SAASzR,GAAKe,aAAasqB,EAASjpB,KAAMA,IAEtC,MASXgpB,iCAAA,WACE,IAAMlQ,EAAwB,GAC1B3S,EAAOhc,KAAK++B,WAAW58B,MAkB3B,OAjBY,MAAR6Z,EAEGA,EAAKgB,cACPhB,EAAsB0J,aAAa1G,GAAgB,SAClDxB,EACAE,GAEAiR,EAAStsB,KAAK,IAAI0Z,GAAUyB,EAAWE,MAI3C1d,KAAK++B,WAAWpQ,SAAS3O,iBAAiB,SAASxC,EAAWuF,GACrC,MAAnBA,EAAU5gB,OACZwsB,EAAStsB,KAAK,IAAI0Z,GAAUyB,EAAWuF,EAAU5gB,UAIhDwsB,GAGTkQ,gCAAA,SAAmBhpB,GACjB,GAAIA,EAAKpL,UACP,OAAOzK,KAEP,IAAMs/B,EAAgBt/B,KAAKq/B,gBAAgBxpB,GAC3C,OACS,IAAIgpB,GADQ,MAAjBS,EACuB,IAAIvO,GAAcuO,GAElBt/B,KAAK++B,WAAWrO,QAAQ7a,KASvDgpB,qBAAA,WACE,OAAO7+B,KAAK++B,WAAWt0B,WASzBo0B,mBAAA,SAAM7iB,GACJ,OAIJ,SAASujB,EACP/qB,EACAgrB,EACAxjB,GAEA,GAAuB,MAAnBwjB,EAAUr9B,MAEZ,OAAO6Z,EAAK+B,YAAYvJ,EAAcgrB,EAAUr9B,OAEhD,IAAIs9B,EAAgB,KAkBpB,OAjBAD,EAAU7Q,SAAS3O,iBAAiB,SAAS6O,EAAU9L,GACpC,cAAb8L,GAGF/qB,EACsB,OAApBif,EAAU5gB,MACV,6CAEFs9B,EAAgB1c,EAAU5gB,OAE1B6Z,EAAOujB,EAAkB/qB,EAAaY,MAAMyZ,GAAW9L,EAAW/G,KAIjEA,EAAKkJ,SAAS1Q,GAAc/J,WAA+B,OAAlBg1B,IAC5CzjB,EAAOA,EAAK+B,YAAYvJ,EAAaY,MAAM,aAAcqqB,IAEpDzjB,EA/BAujB,CAAkB9rB,GAAKkd,MAAO3wB,KAAK++B,WAAY/iB,IAlIjD6iB,SAAQ,IAAIA,GAAc,IAAI9N,GAAc,WAFnD,YAAoBgO,GAAA/+B,gBAAA++B,ECetB,QA4BEW,yBAAA,SAAY7pB,GACV,OAAO,IAAI8pB,GAAa9pB,EAAM7V,OAWhC0/B,0BAAA,SAAa7pB,EAAYsS,EAAYyX,EAAiBC,GACpD/7B,EACE87B,EAAU5/B,KAAK8/B,aACf,qDAEc34B,IAAZ04B,IACFA,GAAU,GAEZ7/B,KAAK+/B,WAAW19B,KAAK,CACnBwT,KAAMA,EACNsS,KAAMA,EACNyX,QAASA,EACTC,QAASA,IAGPA,IACF7/B,KAAKggC,eAAiBhgC,KAAKggC,eAAeZ,SAASvpB,EAAMsS,IAE3DnoB,KAAK8/B,aAAeF,GAUtBF,sBAAA,SACE7pB,EACA4jB,EACAmG,GAEA97B,EACE87B,EAAU5/B,KAAK8/B,aACf,gDAEF9/B,KAAK+/B,WAAW19B,KAAK,CACnBwT,KAAMA,EACN8Y,SAAU8K,EACVmG,QAASA,EACTC,SAAS,IAGX7/B,KAAKggC,eAAiBhgC,KAAKggC,eAAeC,UAAUpqB,EAAM4jB,GAC1Dz5B,KAAK8/B,aAAeF,GAOtBF,sBAAA,SAASE,GACP,IAAK,IAAIp/B,EAAI,EAAGA,EAAIR,KAAK+/B,WAAWp/B,OAAQH,IAAK,CAC/C,IAAM0/B,EAASlgC,KAAK+/B,WAAWv/B,GAC/B,GAAI0/B,EAAON,UAAYA,EACrB,OAAOM,EAGX,OAAO,MAWTR,yBAAA,SAAYE,GAAZ,WAMQ7Z,EAAM/lB,KAAK+/B,WAAWI,UAAU,SAAS5/B,GAC7C,OAAOA,EAAEq/B,UAAYA,IAEvB97B,EAAc,GAAPiiB,EAAU,gDACjB,IAAMqa,EAAgBpgC,KAAK+/B,WAAWha,GACtC/lB,KAAK+/B,WAAWM,OAAOta,EAAK,GAO5B,IALA,IAAIua,EAAyBF,EAAcP,QACvCU,GAAsC,EAEtC//B,EAAIR,KAAK+/B,WAAWp/B,OAAS,EAE1B2/B,GAA+B,GAAL9/B,GAAQ,CACvC,IAAMggC,EAAexgC,KAAK+/B,WAAWv/B,GACjCggC,EAAaX,UAER9Z,GAALvlB,GACAR,KAAKygC,oBAAoBD,EAAcJ,EAAcvqB,MAGrDyqB,GAAyB,EAChBF,EAAcvqB,KAAKvL,SAASk2B,EAAa3qB,QAElD0qB,GAAsC,IAG1C//B,IAGF,QAAK8/B,IAEMC,EAETvgC,KAAK0gC,aAIDN,EAAcjY,KAChBnoB,KAAKggC,eAAiBhgC,KAAKggC,eAAeW,YACxCP,EAAcvqB,MAIhB/D,GADiBsuB,EAAczR,SAChB,SAACnR,GACdjW,EAAKy4B,eAAiBz4B,EAAKy4B,eAAeW,YACxCP,EAAcvqB,KAAKT,MAAMoI,OAXxB,IA0BXkiB,kCAAA,SAAqB7pB,GACnB,OAAO7V,KAAKggC,eAAeX,gBAAgBxpB,IAa7C6pB,oCAAA,SACEkB,EACAnG,EACAoG,EACAC,GAEA,GAAKD,GAAsBC,EAmBpB,CACL,IAAMlK,EAAQ52B,KAAKggC,eAAee,mBAAmBH,GACrD,IAAKE,GAAuBlK,EAAMnsB,UAChC,OAAOgwB,EAGP,GACGqG,GACsB,MAAvBrG,GACC7D,EAAMoK,iBAAiBvtB,GAAKkd,OAGxB,CACL,IAQMsQ,EAAcvB,GAAUwB,WAC5BlhC,KAAK+/B,WATQ,SAASoB,GACtB,OACGA,EAAMtB,SAAWiB,MAChBD,KACEA,EAAkBzpB,QAAQ+pB,EAAMvB,YACnCuB,EAAMtrB,KAAKvL,SAASs2B,IAAaA,EAASt2B,SAAS62B,EAAMtrB,QAM5D+qB,GAGF,OADMQ,EAAe3G,GAAuB5V,GAAapH,WAClDwjB,EAAYpgC,MAAMugC,GAhBzB,OAAO,KA7BX,IAAM9B,EAAgBt/B,KAAKggC,eAAeX,gBAAgBuB,GAC1D,GAAqB,MAAjBtB,EACF,OAAOA,EAEP,IAAM+B,EAAWrhC,KAAKggC,eAAee,mBAAmBH,GACxD,GAAIS,EAAS52B,UACX,OAAOgwB,EACF,GACkB,MAAvBA,GACC4G,EAASL,iBAAiBvtB,GAAKkd,OAI3B,CACL,IAAMyQ,EAAe3G,GAAuB5V,GAAapH,WACzD,OAAO4jB,EAASxgC,MAAMugC,GAHtB,OAAO,MA+Cf1B,uCAAA,SACEkB,EACAU,GAEA,IAAIvJ,EAAmBlT,GAAapH,WAC9B8jB,EAAcvhC,KAAKggC,eAAeX,gBAAgBuB,GACxD,GAAIW,EAaF,OAZKA,EAAYvkB,cAEfukB,EAAY7b,aAAa1G,GAAgB,SACvCxB,EACAwT,GAEA+G,EAAmBA,EAAiBla,qBAClCL,EACAwT,KAIC+G,EACF,GAAIuJ,EAAwB,CAGjC,IAAME,EAAQxhC,KAAKggC,eAAee,mBAAmBH,GAoBrD,OAnBAU,EAAuB5b,aAAa1G,GAAgB,SAClDxB,EACAE,GAEA,IAAM1B,EAAOwlB,EACVT,mBAAmB,IAAIttB,GAAK+J,IAC5B3c,MAAM6c,GACTqa,EAAmBA,EAAiBla,qBAClCL,EACAxB,KAIJwlB,EAAMC,sBAAsBhS,QAAQ,SAAShN,GAC3CsV,EAAmBA,EAAiBla,qBAClC4E,EAAU7U,KACV6U,EAAUzG,QAGP+b,EAWP,OAPc/3B,KAAKggC,eAAee,mBAAmBH,GAC/Ca,sBAAsBhS,QAAQ,SAAShN,GAC3CsV,EAAmBA,EAAiBla,qBAClC4E,EAAU7U,KACV6U,EAAUzG,QAGP+b,GAwBX2H,gDAAA,SACEkB,EACAhY,EACA8Y,EACAC,GAEA79B,EACE49B,GAAqBC,EACrB,6DAEF,IAAM9rB,EAAO+qB,EAASxrB,MAAMwT,GAC5B,GAAI5oB,KAAKggC,eAAegB,iBAAiBnrB,GAGvC,OAAO,KAGP,IAAM+rB,EAAa5hC,KAAKggC,eAAee,mBAAmBlrB,GAC1D,OAAI+rB,EAAWn3B,UAENk3B,EAAmBzc,SAAS0D,GAQ5BgZ,EAAW/gC,MAAM8gC,EAAmBzc,SAAS0D,KAc1D8W,+BAAA,SACEkB,EACA/R,EACA8S,GAEA,IAAM9rB,EAAO+qB,EAASxrB,MAAMyZ,GACtByQ,EAAgBt/B,KAAKggC,eAAeX,gBAAgBxpB,GAC1D,OAAqB,MAAjBypB,EACKA,EAEHqC,EAAmBhP,mBAAmB9D,GACrB7uB,KAAKggC,eAAee,mBAAmBlrB,GACxChV,MAChB8gC,EAAmBvO,UAAUnO,kBAAkB4J,IAG1C,MAUb6Q,4BAAA,SAAe7pB,GACb,OAAO7V,KAAKggC,eAAeX,gBAAgBxpB,IAO7C6pB,8BAAA,SACEkB,EACAnL,EACAjP,EACAzG,EACArN,EACAsL,GAEA,IAAI6jB,EACEjL,EAAQ52B,KAAKggC,eAAee,mBAAmBH,GAC/CtB,EAAgB1I,EAAMyI,gBAAgB5rB,GAAKkd,OACjD,GAAqB,MAAjB2O,EACFuC,EAAYvC,MACP,CAAA,GAA0B,MAAtB7J,EAIT,MAAO,GAHPoM,EAAYjL,EAAM/1B,MAAM40B,GAM1B,IADAoM,EAAYA,EAAUtN,UAAUvW,IACjBvT,WAAco3B,EAAU7kB,aAerC,MAAO,GARP,IANA,IAAM2Y,EAAQ,GACR7gB,EAAMkJ,EAAMoG,aACZL,EAAOrR,EACRmvB,EAA2Bnb,uBAAuBF,EAAWxI,GAC7D6jB,EAA2Bvb,gBAAgBE,EAAWxI,GACvDvc,EAAOsiB,EAAKG,UACTziB,GAAQk0B,EAAMh1B,OAASof,GACC,IAAzBjL,EAAIrT,EAAM+kB,IACZmP,EAAMtzB,KAAKZ,GAEbA,EAAOsiB,EAAKG,UAEd,OAAOyR,GAMH+J,iCAAR,SAA4BoC,EAA0BjsB,GACpD,GAAIisB,EAAY3Z,KACd,OAAO2Z,EAAYjsB,KAAKvL,SAASuL,GAEjC,IAAK,IAAM2H,KAAaskB,EAAYnT,SAClC,GACEmT,EAAYnT,SAAS9uB,eAAe2d,IACpCskB,EAAYjsB,KAAKT,MAAMoI,GAAWlT,SAASuL,GAE3C,OAAO,EAGX,OAAO,GAOH6pB,wBAAR,WACE1/B,KAAKggC,eAAiBN,GAAUwB,WAC9BlhC,KAAK+/B,WACLL,GAAUqC,eACVtuB,GAAKkd,OAEsB,EAAzB3wB,KAAK+/B,WAAWp/B,OAClBX,KAAK8/B,aAAe9/B,KAAK+/B,WAAW//B,KAAK+/B,WAAWp/B,OAAS,GAAGi/B,QAEhE5/B,KAAK8/B,cAAgB,GAOVJ,kBAAf,SAA8ByB,GAC5B,OAAOA,EAAMtB,SAOAH,cAAf,SACEsC,EACA1G,EACA2G,GAGA,IADA,IAAIC,EAAgBrD,GAAclO,MACzBnwB,EAAI,EAAGA,EAAIwhC,EAAOrhC,SAAUH,EAAG,CACtC,IAAM2gC,EAAQa,EAAOxhC,GAIrB,GAAI86B,EAAO6F,GAAQ,CACjB,IAAMvH,EAAYuH,EAAMtrB,KACpBrB,SACJ,GAAI2sB,EAAMhZ,KACJ8Z,EAAS33B,SAASsvB,IACpBplB,EAAef,GAAKe,aAAaytB,EAAUrI,GAC3CsI,EAAgBA,EAAc9C,SAAS5qB,EAAc2sB,EAAMhZ,OAClDyR,EAAUtvB,SAAS23B,KAC5BztB,EAAef,GAAKe,aAAaolB,EAAWqI,GAC5CC,EAAgBA,EAAc9C,SAC5B3rB,GAAKkd,MACLwQ,EAAMhZ,KAAKjD,SAAS1Q,SAKnB,CAAA,IAAI2sB,EAAMxS,SA0Bf,MAAM1qB,EAAe,8CAzBrB,GAAIg+B,EAAS33B,SAASsvB,GACpBplB,EAAef,GAAKe,aAAaytB,EAAUrI,GAC3CsI,EAAgBA,EAAcjC,UAC5BzrB,EACA2sB,EAAMxS,eAEH,GAAIiL,EAAUtvB,SAAS23B,GAE5B,IADAztB,EAAef,GAAKe,aAAaolB,EAAWqI,IAC3Bx3B,UACfy3B,EAAgBA,EAAcjC,UAC5BxsB,GAAKkd,MACLwQ,EAAMxS,cAEH,CACL,IAAMvZ,EAAQ5K,EAAQ22B,EAAMxS,SAAUna,EAAaF,YACnD,GAAIc,EAAO,CAET,IAAM+sB,EAAW/sB,EAAM8P,SAAS1Q,EAAaC,YAC7CytB,EAAgBA,EAAc9C,SAAS3rB,GAAKkd,MAAOwR,OAW/D,OAAOD,OAriBX,cAQUliC,oBAAgC6+B,GAAclO,MAU9C3wB,gBAA4B,GAE5BA,mBAAgB,EA2hB1B,QA2CE2/B,oCAAA,SACElF,EACAoG,EACAC,GAEA,OAAO9gC,KAAK++B,WAAW3G,uBACrBp4B,KAAKoiC,UACL3H,EACAoG,EACAC,IAWJnB,uCAAA,SACE2B,GAEA,OAAOthC,KAAK++B,WAAW9G,0BACrBj4B,KAAKoiC,UACLd,IAuBJ3B,gDAAA,SACE9pB,EACA6rB,EACAC,GAEA,OAAO3hC,KAAK++B,WAAWxG,mCACrBv4B,KAAKoiC,UACLvsB,EACA6rB,EACAC,IAYJhC,4BAAA,SAAe9pB,GACb,OAAO7V,KAAK++B,WAAWnH,eAAe53B,KAAKoiC,UAAUhtB,MAAMS,KAc7D8pB,8BAAA,SACElK,EACAjP,EACAzG,EACArN,EACAsL,GAEA,OAAOhe,KAAK++B,WAAWnJ,iBACrB51B,KAAKoiC,UACL3M,EACAjP,EACAzG,EACArN,EACAsL,IAYJ2hB,+BAAA,SACE9Q,EACAwT,GAEA,OAAOriC,KAAK++B,WAAWvJ,kBACrBx1B,KAAKoiC,UACLvT,EACAwT,IAUJ1C,mBAAA,SAAMniB,GACJ,OAAO,IAAImiB,GAAa3/B,KAAKoiC,UAAUhtB,MAAMoI,GAAYxd,KAAK++B,iBA9IhE,YAAYlpB,EAAY2pB,GACtBx/B,KAAKoiC,UAAYvsB,EACjB7V,KAAK++B,WAAaS,EC5iBtB,QAyBE8C,gCAAA,SACEzsB,EACA0sB,EACA3C,EACAC,GAKA,OAFA7/B,KAAKwiC,kBAAkBC,aAAa5sB,EAAM0sB,EAAS3C,EAASC,GAEvDA,EAGI7/B,KAAK0iC,4BACV,IAAIvQ,GAAUjC,GAAgBY,KAAMjb,EAAM0sB,IAHrC,IAaXD,4BAAA,SACEzsB,EACA4jB,EACAmG,GAGA5/B,KAAKwiC,kBAAkBG,SAAS9sB,EAAM4jB,EAAiBmG,GAEvD,IAAMgD,EAAa7R,GAAc8R,WAAWpJ,GAE5C,OAAOz5B,KAAK0iC,4BACV,IAAIrQ,GAAMnC,GAAgBY,KAAMjb,EAAM+sB,KAU1CN,0BAAA,SAAa1C,EAAiBhP,gBAAAA,MAC5B,IAAMuQ,EAAQnhC,KAAKwiC,kBAAkBM,SAASlD,GAE9C,GADyB5/B,KAAKwiC,kBAAkB7B,YAAYf,GAGrD,CACL,IAAImD,EAAehS,GAAcJ,MASjC,OARkB,MAAdwQ,EAAMhZ,KAER4a,EAAeA,EAAajzB,IAAI2D,GAAKkd,OAAO,GAE5C7e,GAAKqvB,EAAMxS,SAAU,SAAS9a,EAAoBmI,GAChD+mB,EAAeA,EAAajzB,IAAI,IAAI2D,GAAKI,GAAamI,KAGnDhc,KAAK0iC,4BACV,IAAIlS,GAAa2Q,EAAMtrB,KAAMktB,EAAcnS,IAZ7C,MAAO,IAsBX0R,kCAAA,SAAqBzsB,EAAY0sB,GAC/B,OAAOviC,KAAK0iC,4BACV,IAAIvQ,GAAUjC,GAAgB8S,OAAQntB,EAAM0sB,KAShDD,8BAAA,SACEzsB,EACA4jB,GAEA,IAAMmJ,EAAa7R,GAAc8R,WAAWpJ,GAE5C,OAAOz5B,KAAK0iC,4BACV,IAAIrQ,GAAMnC,GAAgB8S,OAAQntB,EAAM+sB,KAS5CN,iCAAA,SAAoBzsB,GAClB,OAAO7V,KAAK0iC,4BACV,IAAIzQ,GAAe/B,GAAgB8S,OAAQntB,KAS/CysB,uCAAA,SAA0BzsB,EAAYsS,EAAY8a,GAChD,IAAMC,EAAWljC,KAAKmjC,gBAAgBF,GACtC,GAAgB,MAAZC,EAaF,MAAO,GAZP,IAAMtgC,EAAI0/B,GAASc,eAAeF,GAC5BG,EAAYzgC,EAAEiT,KAClBsa,EAAUvtB,EAAEutB,QACR3b,EAAef,GAAKe,aAAa6uB,EAAWxtB,GAC5C7T,EAAK,IAAImwB,GACbjC,GAAgBoT,qBAAqBnT,GACrC3b,EACA2T,GAEF,OAAOnoB,KAAKujC,sBAAsBF,EAAWrhC,IAYjDsgC,mCAAA,SACEzsB,EACA4jB,EACAwJ,GAEA,IAAMC,EAAWljC,KAAKmjC,gBAAgBF,GACtC,GAAIC,EAAU,CACZ,IAAMtgC,EAAI0/B,GAASc,eAAeF,GAC5BG,EAAYzgC,EAAEiT,KAClBsa,EAAUvtB,EAAEutB,QACR3b,EAAef,GAAKe,aAAa6uB,EAAWxtB,GAC5C+sB,EAAa7R,GAAc8R,WAAWpJ,GACtCz3B,EAAK,IAAIqwB,GACbnC,GAAgBoT,qBAAqBnT,GACrC3b,EACAouB,GAEF,OAAO5iC,KAAKujC,sBAAsBF,EAAWrhC,GAG7C,MAAO,IASXsgC,uCAAA,SAA0BzsB,EAAYotB,GACpC,IAAMC,EAAWljC,KAAKmjC,gBAAgBF,GACtC,GAAIC,EAAU,CACZ,IAAMtgC,EAAI0/B,GAASc,eAAeF,GAC5BG,EAAYzgC,EAAEiT,KAClBsa,EAAUvtB,EAAEutB,QACR3b,EAAef,GAAKe,aAAa6uB,EAAWxtB,GAC5C7T,EAAK,IAAIiwB,GACb/B,GAAgBoT,qBAAqBnT,GACrC3b,GAEF,OAAOxU,KAAKujC,sBAAsBF,EAAWrhC,GAG7C,MAAO,IASXsgC,kCAAA,SACEzY,EACAP,GAEA,IAAMzT,EAAOgU,EAAMhU,KAEfiiB,EAA2B,KAC3B0L,GAA2B,EAG/BxjC,KAAKyjC,eAAeC,cAAc7tB,EAAM,SAAS8tB,EAAiBC,GAChE,IAAMpvB,EAAef,GAAKe,aAAamvB,EAAiB9tB,GACxDiiB,EAAcA,GAAe8L,EAAGlF,uBAAuBlqB,GACvDgvB,EACEA,GAA4BI,EAAGxF,oBAEnC,IAUIN,EAVA+F,EAAY7jC,KAAKyjC,eAAevzB,IAAI2F,GACnCguB,GAIHL,EACEA,GAA4BK,EAAUzF,kBACxCtG,EAAcA,GAAe+L,EAAUnF,uBAAuBjrB,GAAKkd,SALnEkT,EAAY,IAAInG,GAChB19B,KAAKyjC,eAAiBzjC,KAAKyjC,eAAe3zB,IAAI+F,EAAMguB,IAQnC,MAAf/L,EACFgG,GAAsB,GAEtBA,GAAsB,EACtBhG,EAAcjT,GAAapH,WACXzd,KAAKyjC,eAAe/S,QAAQ7a,GACpCiuB,aAAa,SAAStmB,EAAWumB,GACvC,IAAM3N,EAAgB2N,EAAerF,uBAAuBjrB,GAAKkd,OAC7DyF,IACF0B,EAAcA,EAAYja,qBACxBL,EACA4Y,OAMR,IAAM4N,EAAoBH,EAAUI,mBAAmBpa,GACvD,IAAKma,IAAsBna,EAAMC,iBAAiBqS,eAAgB,CAEhE,IAAM+G,EAAWZ,GAAS4B,cAAcra,GACxC/lB,GACG9D,KAAKmkC,cAAcrV,IAAIoU,GACxB,0CAEF,IAAMD,EAAMX,GAAS8B,mBACrBpkC,KAAKmkC,cAAcr0B,IAAIozB,EAAUD,GACjCjjC,KAAKqkC,cAAcv0B,IAAImzB,EAAKC,GAE9B,IAAM/M,EAAcn2B,KAAKwiC,kBAAkB8B,YAAYzuB,GACnDklB,EAAS8I,EAAU7F,qBACrBnU,EACAP,EACA6M,EACA2B,EACAgG,GAEF,IAAKkG,IAAsBR,EAA0B,CACnD,IAAM3F,EAA0BgG,EAAUjF,aAAa/U,GACvDkR,EAASA,EAAO/3B,OAAOhD,KAAKukC,eAAe1a,EAAOgU,IAEpD,OAAO9C,GAaTuH,qCAAA,SACEzY,EACAP,EACA+S,GAHF,WAMQxmB,EAAOgU,EAAMhU,KACb2uB,EAAiBxkC,KAAKyjC,eAAevzB,IAAI2F,GAC3CymB,EAAwB,GAI5B,GACEkI,IAC6B,YAA5B3a,EAAM2E,mBACLgW,EAAeP,mBAAmBpa,IACpC,CAIA,IAAM4a,EAAmBD,EAAehG,wBACtC3U,EACAP,EACA+S,GAEEmI,EAAe/5B,YACjBzK,KAAKyjC,eAAiBzjC,KAAKyjC,eAAe1zB,OAAO8F,IAEnD,IAAMqoB,EAAUuG,EAAiBvG,QACjC5B,EAAemI,EAAiB1J,OAOhC,IAAM2J,GACH,IACDxG,EAAQiC,UAAU,SAAStW,GACzB,OAAOA,EAAMC,iBAAiBqS,iBAE5BwI,EAAU3kC,KAAKyjC,eAAemB,WAAW/uB,EAAM,SACnDrB,EACAqwB,GAEA,OAAOA,EAAgBzG,oBAGzB,GAAIsG,IAAoBC,EAAS,CAC/B,IAAMjU,EAAU1wB,KAAKyjC,eAAe/S,QAAQ7a,GAG5C,IAAK6a,EAAQjmB,UAKX,IAHA,IAAMq6B,EAAW9kC,KAAK+kC,gCAAgCrU,GAG7ClwB,EAAI,EAAGA,EAAIskC,EAASnkC,SAAUH,EAAG,CACxC,IAAMq9B,EAAOiH,EAAStkC,GACpBwkC,EAAWnH,EAAKY,WACZwG,EAAWjlC,KAAKklC,uBAAuBrH,GAC7C79B,KAAKmlC,gBAAgBC,eACnB9C,GAAS+C,mBAAmBL,GAC5BhlC,KAAKslC,aAAaN,GAClBC,EAASM,OACTN,EAASvqB,cAUZiqB,GAA4B,EAAjBzG,EAAQv9B,SAAe07B,IAGjCqI,EAGF1kC,KAAKmlC,gBAAgBK,cACnBlD,GAAS+C,mBAAmBxb,GAFI,MAMlCqU,EAAQzO,QAAQ,SAACgW,GACf,IAAMC,EAAcn+B,EAAK48B,cAAcj0B,IACrCoyB,GAAS4B,cAAcuB,IAEzBl+B,EAAK49B,gBAAgBK,cACnBlD,GAAS+C,mBAAmBI,GAC5BC,MAMR1lC,KAAK2lC,YAAYzH,GAInB,OAAO5B,GAYTgG,oCAAA,SACEzsB,EACAgrB,GAEA,IACMrB,EAAYx/B,KAAKwiC,kBACjB1K,EAAc93B,KAAKyjC,eAAemB,WAAW/uB,EAAM,SACvD4b,EACAoS,GAEA,IAAMrvB,EAAef,GAAKe,aAAaid,EAAW5b,GAC5CiiB,EAAc+L,EAAUnF,uBAAuBlqB,GACrD,GAAIsjB,EACF,OAAOA,IAGX,OAAO0H,EAAUpH,uBACfviB,EACAiiB,EACA+I,GAfwB,IAwBpByB,6CAAR,SACE5R,GAEA,OAAOA,EAAQkV,KACb,SAACpxB,EAAcqxB,EAAqBC,GAClC,GAAID,GAAuBA,EAAoBzH,kBAE7C,MAAO,CADcyH,EAAoBlH,mBAIzC,IAAIoH,EAAgB,GAOpB,OANIF,IACFE,EAAQF,EAAoBG,iBAE9Bl0B,GAAKg0B,EAAU,SAASG,EAAcC,GACpCH,EAAQA,EAAM/iC,OAAOkjC,KAEhBH,KAMPzD,yBAAR,SAAoB6D,GAClB,IAAK,IAAIl6B,EAAI,EAAGA,EAAIk6B,EAAQxlC,SAAUsL,EAAG,CACvC,IAAMm6B,EAAeD,EAAQl6B,GAC7B,IAAKm6B,EAAatc,iBAAiBqS,eAAgB,CAEjD,IAAMkK,EAAkB/D,GAAS4B,cAAckC,GACzCE,EAAkBtmC,KAAKmkC,cAAcj0B,IAAIm2B,GAC/CrmC,KAAKmkC,cAAc9U,OAAOgX,GAC1BrmC,KAAKqkC,cAAchV,OAAOiX,MAUjBhE,sBAAf,SAAkCzY,GAChC,OACEA,EAAMC,iBAAiBqS,iBACtBtS,EAAMC,iBAAiByc,YAKjB1c,EAAMX,SAENW,GASHyY,4BAAR,SAAuBzY,EAAcgU,GACnC,IAAMhoB,EAAOgU,EAAMhU,KACbotB,EAAMjjC,KAAKslC,aAAazb,GACxBob,EAAWjlC,KAAKklC,uBAAuBrH,GAEvC9C,EAAS/6B,KAAKmlC,gBAAgBC,eAClC9C,GAAS+C,mBAAmBxb,GAC5BoZ,EACAgC,EAASM,OACTN,EAASvqB,YAGLgW,EAAU1wB,KAAKyjC,eAAe/S,QAAQ7a,GAG5C,GAAIotB,EACFn/B,GACG4sB,EAAQvuB,MAAMi8B,kBACf,0DA6BF,IAzBA,IAAMoI,EAAgB9V,EAAQkV,KAAc,SAC1CpxB,EACAqxB,EACAC,GAEA,IACGtxB,EAAa/J,WACdo7B,GACAA,EAAoBzH,kBAEpB,MAAO,CAACyH,EAAoBlH,kBAAkBF,YAG9C,IAAIgI,EAAmB,GASvB,OARIZ,IACFY,EAAUA,EAAQzjC,OAChB6iC,EAAoBG,gBAAgBt7B,IAAI,SAAAmzB,GAAQ,OAAAA,EAAKY,eAGzD3sB,GAAKg0B,EAAU,SAASG,EAAcS,GACpCD,EAAUA,EAAQzjC,OAAO0jC,KAEpBD,IAGFjmC,EAAI,EAAGA,EAAIgmC,EAAc7lC,SAAUH,EAAG,CAC7C,IAAMmmC,EAAcH,EAAchmC,GAClCR,KAAKmlC,gBAAgBK,cACnBlD,GAAS+C,mBAAmBsB,GAC5B3mC,KAAKslC,aAAaqB,IAIxB,OAAO5L,GAGDuH,oCAAR,SACEzE,GADF,WAGQhU,EAAQgU,EAAKY,WACbwE,EAAMjjC,KAAKslC,aAAazb,GAE9B,MAAO,CACL0b,OAAQ,WAEN,OADc1H,EAAKvI,kBAAoBzQ,GAAapH,YACvCqI,QAEfpL,WAAY,SAACksB,GACX,GAAe,OAAXA,EACF,OAAI3D,EACK17B,EAAKs/B,0BAA0Bhd,EAAMhU,KAAMotB,GAE3C17B,EAAKu/B,oBAAoBjd,EAAMhU,MAKxC,IAAM/S,E/C/HkB,SAASqF,EAAc0hB,GACvD,IAAIkd,EAAS,gBACA,YAAT5+B,EACF4+B,EACE,0FAEe,qBAAR5+B,EACT4+B,EAAS,6DACQ,eAAR5+B,IACT4+B,EAAS,8BAGX,IAAMjkC,EAAQ,IAAIoB,MAChBiE,EAAO,OAAS0hB,EAAMhU,KAAK3M,WAAa,KAAO69B,GAGjD,OADCjkC,EAAcqF,KAAOA,EAAK6+B,cACpBlkC,E+C+GemkC,CAAmBL,EAAQ/c,GACzC,OAAOtiB,EAAKi3B,wBACV3U,EACsB,KACtB/mB,MAUKw/B,iBAAf,SAA6BzY,GAC3B,OAAOA,EAAMhU,KAAK3M,WAAa,IAAM2gB,EAAM2E,mBAM9B8T,kBAAf,SACEY,GAEA,IAAMgE,EAAahE,EAAS9rB,QAAQ,KAKpC,OAJAtT,GACkB,IAAhBojC,GAAqBA,EAAahE,EAASviC,OAAS,EACpD,iBAEK,CACLwvB,QAAS+S,EAASpwB,OAAOo0B,EAAa,GACtCrxB,KAAM,IAAIpC,GAAKyvB,EAASpwB,OAAO,EAAGo0B,MAO9B5E,6BAAR,SAAwBW,GACtB,OAAOjjC,KAAKqkC,cAAcn0B,IAAI+yB,IAMxBX,0BAAR,SAAqBzY,GACnB,IAAMqZ,EAAWZ,GAAS4B,cAAcra,GACxC,OAAO7pB,KAAKmkC,cAAcj0B,IAAIgzB,IAWjBZ,oBAAf,WACE,OAAOA,GAAS6E,iBAMV7E,mCAAR,SACEe,EACAnN,GAEA,IAAM2N,EAAY7jC,KAAKyjC,eAAevzB,IAAImzB,GAC1Cv/B,EAAO+/B,EAAW,wDAClB,IAAM1N,EAAcn2B,KAAKwiC,kBAAkB8B,YAAYjB,GACvD,OAAOQ,EAAU9G,eACf7G,EACAC,EACiB,OAiBbmM,yCAAR,SAAoCpM,GAClC,OAAOl2B,KAAKonC,sBACVlR,EACAl2B,KAAKyjC,eACY,KACjBzjC,KAAKwiC,kBAAkB8B,YAAY7wB,GAAKkd,SAOpC2R,mCAAR,SACEpM,EACAmR,EACAvP,EACA3B,GAEA,GAAID,EAAUrgB,KAAKpL,UACjB,OAAOzK,KAAKsnC,iCACVpR,EACAmR,EACAvP,EACA3B,GAGF,IAAM0N,EAAYwD,EAAcn3B,IAAIuD,GAAKkd,OAGtB,MAAfmH,GAAoC,MAAb+L,IACzB/L,EAAc+L,EAAUnF,uBAAuBjrB,GAAKkd,QAGtD,IAAIoK,EAAkB,GAChBvd,EAAY0Y,EAAUrgB,KAAKvB,WAC3BizB,EAAiBrR,EAAUsR,kBAAkBhqB,GAC7CuF,EAAYskB,EAAc1Y,SAASze,IAAIsN,GAC7C,GAAIuF,GAAawkB,EAAgB,CAC/B,IAAME,EAAmB3P,EACrBA,EAAY7S,kBAAkBzH,GAC9B,KACEkqB,EAAmBvR,EAAY/gB,MAAMoI,GAC3Cud,EAASA,EAAO/3B,OACdhD,KAAKonC,sBACHG,EACAxkB,EACA0kB,EACAC,IAWN,OANI7D,IACF9I,EAASA,EAAO/3B,OACd6gC,EAAU9G,eAAe7G,EAAWC,EAAa2B,KAI9CiD,GAOHuH,8CAAR,SACEpM,EACAmR,EACAvP,EACA3B,GAJF,WAMQ0N,EAAYwD,EAAcn3B,IAAIuD,GAAKkd,OAGtB,MAAfmH,GAAoC,MAAb+L,IACzB/L,EAAc+L,EAAUnF,uBAAuBjrB,GAAKkd,QAGtD,IAAIoK,EAAkB,GAyBtB,OAxBAsM,EAAc1Y,SAAS3O,iBAAiB,SAACxC,EAAWuF,GAClD,IAAM0kB,EAAmB3P,EACrBA,EAAY7S,kBAAkBzH,GAC9B,KACEkqB,EAAmBvR,EAAY/gB,MAAMoI,GACrC+pB,EAAiBrR,EAAUsR,kBAAkBhqB,GAC/C+pB,IACFxM,EAASA,EAAO/3B,OACduE,EAAK+/B,iCACHC,EACAxkB,EACA0kB,EACAC,OAMJ7D,IACF9I,EAASA,EAAO/3B,OACd6gC,EAAU9G,eAAe7G,EAAWC,EAAa2B,KAI9CiD,GA9IMuH,iBAAgB,MA9lB/B,YAAoB6C,GAAAnlC,qBAAAmlC,EAdZnlC,oBAA2C+wB,GAAcJ,MAKzD3wB,uBAAoB,IAAI0/B,GAEf1/B,mBAAqC,IAAI0vB,IACzC1vB,mBAAqC,IAAI0vB,IClE5D,QAGEiY,qBAAA,SAAQ9xB,GACN,OAAO7V,KAAK4nC,UAAU1iB,SAASrP,IAGjC8xB,4BAAA,SAAe9xB,EAAYgyB,GACzB7nC,KAAK4nC,UAAY5nC,KAAK4nC,UAAU7pB,YAAYlI,EAAMgyB,QARtD,cACU7nC,eAAkB6kB,GAAapH,WCczC,QAGEqqB,sBAAA,SAASC,GACP,OAAO/nC,KAAKgoC,KAAe,SAAY,SAAED,GAAcE,KACrD,KAEA,SAASnlC,GAGP,OAAIA,GAAwB,+BAAfA,EAAMqF,MACjBwF,EAAI,kEACG,MAEA/F,QAAQJ,OAAO1E,MAM9BglC,oCAAA,SAAuB7C,GAGrBjlC,KAAKgoC,KAAe,SAAwB,qBAAE/C,IAGhD6C,uCAAA,SAA0B7C,GACxBjlC,KAAKgoC,KAAe,SAA2B,wBAAE/C,IAGnD6C,mCAAA,WACE,IAAII,EACF,0DACAloC,KAAKgoC,KAAKp6B,KACV,iFAEE,eAAgB5N,KAAKgoC,KAAKG,QAC5BD,GACE,uJAGO,mBAAoBloC,KAAKgoC,KAAKG,QACvCD,GACE,2JAIFA,GACE,kKAIJx+B,GAAKw+B,QAnDP,YAAoBF,GAAAhoC,UAAAgoC,ECrBtB,OAGE,SAAmBI,GAAApoC,iBAAAooC,OAMnBC,sBAAA,SAASN,GACP,OAAOngC,QAAQH,QAAQ,IAAI6gC,GAAkB,WAG/CD,oCAAA,SAAuBpD,KAEvBoD,uCAAA,SAA0BpD,KAE1BoD,mCAAA,WAGE3+B,GADE,0EAZJ,YAAoBs+B,GAAAhoC,UAAAgoC,ECHtB,QAGEO,8BAAA,SAAiB36B,EAAc46B,gBAAAA,KACxBl+B,EAAStK,KAAKyoC,UAAW76B,KAAO5N,KAAKyoC,UAAU76B,GAAQ,GAE5D5N,KAAKyoC,UAAU76B,IAAS46B,GAG1BD,iBAAA,WACE,OAAO3hC,EAAS5G,KAAKyoC,gBAVzB,cACUzoC,eAAqC,GCT/C,QAOS0oC,iBAAP,SAAqB9wB,GACnB,IAAM+wB,EAAa/wB,EAAS1O,WAM5B,OAJKlJ,KAAK4oC,aAAaD,KACrB3oC,KAAK4oC,aAAaD,GAAc,IAAIJ,IAG/BvoC,KAAK4oC,aAAaD,IAGpBD,uBAAP,SACE9wB,EACAixB,GAEA,IAAMF,EAAa/wB,EAAS1O,WAM5B,OAJKlJ,KAAK8oC,WAAWH,KACnB3oC,KAAK8oC,WAAWH,GAAcE,KAGzB7oC,KAAK8oC,WAAWH,IAvBVD,gBAAiD,GACjDA,cAAmC,OAFpD,eCMA,QAKEK,iBAAA,WACE,IAAMC,EAAWhpC,KAAKipC,YAAY/4B,MAE5Bg5B,OAAaF,GAQnB,OAPIhpC,KAAKmpC,OACPr3B,GAAK9R,KAAKmpC,MAAO,SAACC,EAAcjnC,GAC9B+mC,EAAME,GAAQF,EAAME,GAAQjnC,IAGhCnC,KAAKmpC,MAAQH,EAENE,OAbT,YAAoBD,GAAAjpC,iBAAAipC,EAFZjpC,WAAwC,KCDlD,QA0BEqpC,yBAAA,SAAYD,GACVppC,KAAKspC,eAAeF,IAAQ,GAGtBC,0BAAR,WAAA,WACQE,EAAQvpC,KAAKwpC,eAAet5B,MAC5Bu5B,EAA8B,GAChCC,GAAoB,EAExB53B,GAAKy3B,EAAO,SAACH,EAAcjnC,GACb,EAARA,GAAamI,EAAS/C,EAAK+hC,eAAgBF,KAC7CK,EAAcL,GAAQjnC,EACtBunC,GAAoB,KAIpBA,GACF1pC,KAAK2pC,QAAQC,YAAYH,GAI3Bt2B,GACEnT,KAAK6pC,aAAaj6B,KAAK5P,MACvBmS,KAAKI,MAAsB,EAAhBJ,KAAK2J,SA7CQ,WAa5B,YAAYguB,EAAqCH,GAAA3pC,aAAA2pC,EANzC3pC,oBAA2C,GAOjDA,KAAKwpC,eAAiB,IAAIT,GAAce,GAExC,IAAMz2B,EApBmB,IAsBvB,IAAgDlB,KAAK2J,SACvD3I,GAAsBnT,KAAK6pC,aAAaj6B,KAAK5P,MAAOmS,KAAKI,MAAMc,ICdnE,QAiBE02B,yBAAA,SAAYC,GAGV,IADA,IAAIC,EAAW,KACNzpC,EAAI,EAAGA,EAAIwpC,EAAcrpC,OAAQH,IAAK,CAC7C,IAAMypB,EAAY+f,EAAcxpC,GAC1B0pC,EAAYjgB,EAAUT,UACX,OAAbygB,GAAsBC,EAAUnrB,OAAOkrB,EAASzgB,aAClDxpB,KAAKmqC,YAAY9nC,KAAK4nC,GACtBA,EAAW,MAGI,OAAbA,IACFA,EAAW,IAAIG,GAAUF,IAG3BD,EAASI,IAAIpgB,GAEXggB,GACFjqC,KAAKmqC,YAAY9nC,KAAK4nC,IAa1BF,+BAAA,SAAkBl0B,EAAYm0B,GAC5BhqC,KAAKsqC,YAAYN,GACjBhqC,KAAKuqC,oCAAoC,SAACL,GACxC,OAAAA,EAAUnrB,OAAOlJ,MAarBk0B,uCAAA,SAA0BS,EAAmBR,GAC3ChqC,KAAKsqC,YAAYN,GAEjBhqC,KAAKuqC,oCAAoC,SAACL,GACxC,OAAOA,EAAU5/B,SAASkgC,IAAgBA,EAAYlgC,SAAS4/B,MAQ3DH,iDAAR,SACE9Y,GAEAjxB,KAAKyqC,kBAGL,IADA,IAAIC,GAAU,EACLlqC,EAAI,EAAGA,EAAIR,KAAKmqC,YAAYxpC,OAAQH,IAAK,CAChD,IAAMmqC,EAAY3qC,KAAKmqC,YAAY3pC,GAC/BmqC,IAEE1Z,EADc0Z,EAAUnhB,YAE1BxpB,KAAKmqC,YAAY3pC,GAAGoqC,QACpB5qC,KAAKmqC,YAAY3pC,GAAK,MAEtBkqC,GAAU,GAKZA,IACF1qC,KAAKmqC,YAAc,IAGrBnqC,KAAKyqC,uBAnGT,cAKUzqC,iBAA2B,GAO3BA,qBAAkB,EA+F5B,QAYEoqC,iBAAA,SAAIngB,GACFjqB,KAAK6qC,QAAQxoC,KAAK4nB,IAMpBmgB,mBAAA,WACE,IAAK,IAAI5pC,EAAI,EAAGA,EAAIR,KAAK6qC,QAAQlqC,OAAQH,IAAK,CAC5C,IAAMypB,EAAYjqB,KAAK6qC,QAAQrqC,GAC/B,GAAkB,OAAdypB,EAAoB,CACtBjqB,KAAK6qC,QAAQrqC,GAAK,KAClB,IAAMsqC,EAAU7gB,EAAUV,iBACtB5Z,IACFhC,EAAI,UAAYsc,EAAU/gB,YAE5B8J,GAAe83B,MAQrBV,qBAAA,WACE,OAAOpqC,KAAKsa,WA9Bd,YAA6BA,GAAAta,WAAAsa,EAFrBta,aAAmB,GC5H7B,QAgCY+qC,qBAAV,SAAkB/xB,OAAmB,aAAAxQ,mBAAAA,IAAAwH,oBACnC,GAAIrQ,MAAMoF,QAAQ/E,KAAKgrC,WAAWhyB,IAIhC,IAFA,IAAMiyB,IAAgBjrC,KAAKgrC,WAAWhyB,IAE7BxY,EAAI,EAAGA,EAAIyqC,EAAUtqC,OAAQH,IACpCyqC,EAAUzqC,GAAG8G,SAASzG,MAAMoqC,EAAUzqC,GAAGuM,QAASiD,IAKxD+6B,gBAAA,SAAG/xB,EAAmB1R,EAA4ByF,GAChD/M,KAAKkrC,mBAAmBlyB,GACxBhZ,KAAKgrC,WAAWhyB,GAAahZ,KAAKgrC,WAAWhyB,IAAc,GAC3DhZ,KAAKgrC,WAAWhyB,GAAW3W,KAAK,CAAEiF,WAAUyF,YAE5C,IAAMkd,EAAYjqB,KAAKmrC,gBAAgBnyB,GACnCiR,GACF3iB,EAASzG,MAAMkM,EAASkd,IAI5B8gB,iBAAA,SAAI/xB,EAAmB1R,EAA4ByF,GACjD/M,KAAKkrC,mBAAmBlyB,GAExB,IADA,IAAMiyB,EAAYjrC,KAAKgrC,WAAWhyB,IAAc,GACvCxY,EAAI,EAAGA,EAAIyqC,EAAUtqC,OAAQH,IACpC,GACEyqC,EAAUzqC,GAAG8G,WAAaA,KACxByF,GAAWA,IAAYk+B,EAAUzqC,GAAGuM,SAGtC,YADAk+B,EAAU5K,OAAO7/B,EAAG,IAMlBuqC,gCAAR,SAA2B/xB,GACzBlV,EACE9D,KAAKorC,eAAerc,KAAK,SAASsc,GAChC,OAAOA,IAAOryB,IAEhB,kBAAoBA,QA9DxB,YAAoBoyB,GAAAprC,oBAAAorC,EAVZprC,gBAKJ,GAMF8D,EACEnE,MAAMoF,QAAQqmC,IAA2C,EAAxBA,EAAezqC,OAChD,8BCZN,WAAuCuH,QAAA6iC,IAG9BO,eAAP,WACE,OAAO,IAAIA,IAoDbA,6BAAA,SAAgBtyB,GAEd,OADAlV,EAAqB,YAAdkV,EAAyB,uBAAyBA,GAClD,CAAChZ,KAAKurC,eAnDf,cAAA,IAEMC,EACAC,IAFJrjC,aAAM,CAAC,wBAIe,oBAAbsjC,eAC8B,IAA9BA,SAASC,wBAEkB,IAAvBD,SAAiB,QAE1BD,EAAmB,mBACnBD,EAAS,eACiC,IAA1BE,SAAoB,WACpCD,EAAmB,sBACnBD,EAAS,kBACgC,IAAzBE,SAAmB,UACnCD,EAAmB,qBACnBD,EAAS,iBACoC,IAA7BE,SAAuB,eACvCD,EAAmB,yBACnBD,EAAS,iBAQbjkC,EAAKgkC,UAAW,EAEZE,GACFC,SAASC,iBACPF,EACA,WACE,IAAM5L,GAAW6L,SAASF,GACtB3L,IAAYt4B,EAAKgkC,WACnBhkC,EAAKgkC,SAAW1L,EAChBt4B,EAAKqkC,QAAQ,UAAW/L,MAG5B,KC1CR,WAAmC33B,QAAA6iC,IAG1Bc,eAAP,WACE,OAAO,IAAIA,IA2CbA,6BAAA,SAAgB7yB,GAEd,OADAlV,EAAqB,WAAdkV,EAAwB,uBAAyBA,GACjD,CAAChZ,KAAK8rC,UAMfD,6BAAA,WACE,OAAO7rC,KAAK8rC,aAjDd,cAAA,MACE1jC,aAAM,CAAC,wBAPDb,WAAU,EAcI,oBAAXO,aAC4B,IAA5BA,OAAO6jC,kBACb9jC,MAEDC,OAAO6jC,iBACL,SACA,WACOpkC,EAAKukC,UACRvkC,EAAKukC,SAAU,EACfvkC,EAAKqkC,QAAQ,UAAU,MAG3B,GAGF9jC,OAAO6jC,iBACL,UACA,WACMpkC,EAAKukC,UACPvkC,EAAKukC,SAAU,EACfvkC,EAAKqkC,QAAQ,UAAU,MAG3B,MC5CR,QAWEG,wBAAA,SAAWC,EAAqB1kC,GAC9BtH,KAAKisC,mBAAqBD,EAC1BhsC,KAAKksC,QAAU5kC,EACXtH,KAAKisC,mBAAqBjsC,KAAKmsC,qBACjCnsC,KAAKksC,UACLlsC,KAAKksC,QAAU,OAWnBH,4BAAA,SAAeK,EAAoB3jC,GAAnC,WACEzI,KAAKqsC,iBAAiBD,GAAc3jC,EACpC,qBACE,IAAM6jC,EAAYC,EAAKF,iBAAiBE,EAAKJ,2BACtCI,EAAKF,iBAAiBE,EAAKJ,oBAClC,mBAAS3rC,GACH8rC,EAAU9rC,IACZwS,GAAe,WACbzL,EAAKilC,WAAWF,EAAU9rC,OAHvBA,EAAI,EAAGA,EAAI8rC,EAAU3rC,SAAUH,IAA/BA,GAOT,GAAI+rC,EAAKJ,qBAAuBI,EAAKN,0BAC/BM,EAAKL,UACPK,EAAKL,UACLK,EAAKL,QAAU,cAInBK,EAAKJ,6BAjBAnsC,KAAKqsC,iBAAiBrsC,KAAKmsC,2CApBpC,YAAoBK,GAAAxsC,gBAAAwsC,EARpBxsC,sBAA0B,GAC1BA,wBAAqB,EACrBA,yBAAsB,EACtBA,aAA+B,KCiB1B,QAqFLysC,kBAAA,SAAKC,EAAkCC,GAAvC,WACE3sC,KAAK4sC,cAAgB,EACrB5sC,KAAK6sC,cAAgBF,EACrB3sC,KAAK8sC,gBAAkB,IAAIf,GAAeW,GAC1C1sC,KAAK+sC,WAAY,EAEjB/sC,KAAKgtC,qBAAuB/5B,WAAW,WACrC1L,EAAK0lC,KAAK,gCAEV1lC,EAAK2lC,YACL3lC,EAAKylC,qBAAuB,MAC3B76B,KAAKI,MA7De,M5DyJQ,SAAS5H,GAC1C,GAA2C,aAAxB+gC,SAASyB,WAC1BxiC,QACK,CAIL,IAAIyiC,GAAS,EACTC,EAAY,WACT3B,SAAS1qC,KAKTosC,IACHA,GAAS,EACTziC,KANAsI,WAAWo6B,EAAWl7B,KAAKI,MAAM,MAUjCm5B,SAASC,kBACXD,SAASC,iBAAiB,mBAAoB0B,GAAW,GAEzDvlC,OAAO6jC,iBAAiB,OAAQ0B,GAAW,IACjC3B,SAAiB4B,cAE1B5B,SAAiB4B,YAAY,qBAAsB,WACtB,aAAxB5B,SAASyB,YAA2BE,MAGzCvlC,OAAewlC,YAAY,SAAUD,K4DvHxCE,CAAoB,WAClB,IAAIhmC,EAAKwlC,UAAT,CAGAxlC,EAAKimC,gBAAkB,IAAIC,GACzB,eAAC,aAAAjlC,mBAAAA,IAAA6E,kBACO,IAAA7D,SAACkkC,OAASC,OAAMC,OAEtB,aADArmC,EAAKsmC,wBAAwBxgC,GACxB9F,EAAKimC,gBAOV,GALIjmC,EAAKylC,uBACPc,aAAavmC,EAAKylC,sBAClBzlC,EAAKylC,qBAAuB,MAE9BzlC,EAAKwmC,gBAAiB,EAjHa,SAkH/BL,EACFnmC,EAAK2J,GAAKy8B,EACVpmC,EAAKymC,SAAWJ,MACX,CAAA,GApH8B,UAoH1BF,EAgBT,MAAM,IAAIxpC,MAAM,kCAAoCwpC,GAdhDC,GAGFpmC,EAAKimC,gBAAgBS,cAAe,EAIpC1mC,EAAKulC,gBAAgBoB,WAAWP,EAAM,WACpCpmC,EAAK2lC,eAGP3lC,EAAK2lC,cAMX,eAAC,aAAA1kC,mBAAAA,IAAA6E,kBACO,IAAA7D,SAAC2kC,OAAI1lC,OACXlB,EAAKsmC,wBAAwBxgC,GAC7B9F,EAAKulC,gBAAgBsB,eAAeD,EAAI1lC,IAE1C,WACElB,EAAK2lC,aAEP3lC,EAAK8mC,OAKP,IAAMC,EAA8C,CACpDC,MAA2C,KAC3CD,EAAwC,IAAIn8B,KAAKI,MAC/B,IAAhBJ,KAAK2J,UAEHvU,EAAKimC,gBAAgBgB,2BACvBF,EACqC,GACjC/mC,EAAKimC,gBAAgBgB,0BAC3BF,EAAuB,E1D1LG,I0D2LtB/mC,EAAKknC,qBACPH,EAAiC,EAAI/mC,EAAKknC,oBAExClnC,EAAKmnC,gBACPJ,EAA4B,GAAI/mC,EAAKmnC,eAGjB,oBAAbj3B,UACPA,SAASk3B,OACgC,IAAzCl3B,SAASk3B,KAAKv3B,QAAQrB,MAEtBu4B,EAAuB,E1D9LN,K0DgMnB,IAAMM,EAAarnC,EAAK8mC,MAAMC,GAC9B/mC,EAAK0lC,KAAK,+BAAiC2B,GAC3CrnC,EAAKimC,gBAAgBqB,OAAOD,EAAY,kBAS5CnC,mBAAA,WACEzsC,KAAKwtC,gBAAgBsB,cAAc9uC,KAAKkR,GAAIlR,KAAKguC,UACjDhuC,KAAK+uC,uBAAuB/uC,KAAKkR,GAAIlR,KAAKguC,WAQrCvB,cAAP,WACEA,GAAsBuC,aAAc,GAQ/BvC,iBAAP,WACEA,GAAsBwC,gBAAiB,GAIlCxC,eAAP,WACE,QAEWA,GAAsBuC,eAM5BvC,GAAsBwC,gBACH,oBAAbvD,UACmB,MAA1BA,SAASwD,e5D+OK,iBAAXpnC,QACPA,OAAe,QACfA,OAAe,OAAa,YAC3B,UAAUC,KAAKD,OAAO2P,SAASk3B,OAUR,iBAAZQ,SAA8C,iBAAfA,QAAQC,K4DlPrD3C,mCAAA,aAMQA,uBAAR,WACEzsC,KAAK+sC,WAAY,EAEb/sC,KAAKwtC,kBACPxtC,KAAKwtC,gBAAgB6B,QACrBrvC,KAAKwtC,gBAAkB,MAIrBxtC,KAAKsvC,iBACP5D,SAAS1qC,KAAKuuC,YAAYvvC,KAAKsvC,gBAC/BtvC,KAAKsvC,eAAiB,MAGpBtvC,KAAKgtC,uBACPc,aAAa9tC,KAAKgtC,sBAClBhtC,KAAKgtC,qBAAuB,OAQxBP,uBAAR,WACOzsC,KAAK+sC,YACR/sC,KAAKitC,KAAK,8BACVjtC,KAAKwvC,YAEDxvC,KAAK6sC,gBACP7sC,KAAK6sC,cAAc7sC,KAAK+tC,gBACxB/tC,KAAK6sC,cAAgB,QAS3BJ,mBAAA,WACOzsC,KAAK+sC,YACR/sC,KAAKitC,KAAK,6BACVjtC,KAAKwvC,cAST/C,kBAAA,SAAKhkC,GACH,IAAMgnC,EAAU3lC,EAAUrB,GAC1BzI,KAAK0vC,WAAaD,EAAQ9uC,OAC1BX,KAAK2vC,OAAOC,iBAAiB,aAAcH,EAAQ9uC,QAWnD,IARA,IAAMkvC,E7ECkB,SAAS3sC,GACnC,IAAMkM,EAAYnM,EAAkBC,GACpC,OAAOK,EAAOqB,gBAAgBwK,GAAW,G6EHpB0gC,CAAaL,GAI1Bz+B,EAAWH,GAAkBg/B,EArRdE,MAyRZvvC,EAAI,EAAGA,EAAIwQ,EAASrQ,OAAQH,IACnCR,KAAKwtC,gBAAgBwC,eACnBhwC,KAAK4sC,cACL57B,EAASrQ,OACTqQ,EAASxQ,IAEXR,KAAK4sC,iBAWTH,oCAAA,SAAuBv7B,EAAY++B,GAEjCjwC,KAAKsvC,eAAiB5D,SAASwD,cAAc,UAC7C,IAAMZ,EAAqC,CAC3C4B,OAA2D,KAC3D5B,EAAoC,GAAIp9B,EACxCo9B,EAAoC,GAAI2B,EACxCjwC,KAAKsvC,eAAea,IAAMnwC,KAAKquC,MAAMC,GACrCtuC,KAAKsvC,eAAec,MAAMC,QAAU,OAEpC3E,SAAS1qC,KAAKsvC,YAAYtwC,KAAKsvC,iBAQzB7C,qCAAR,SAAgCp/B,GAE9B,IAAMkjC,EAAgBzmC,EAAUuD,GAAM1M,OACtCX,KAAKuwC,eAAiBA,EACtBvwC,KAAK2vC,OAAOC,iBAAiB,iBAAkBW,QA/QjD,YACSC,EACA54B,EACA62B,EACAC,GAHA1uC,YAAAwwC,EACAxwC,cAAA4X,EACA5X,wBAAAyuC,EACAzuC,mBAAA0uC,EA5BT1uC,eAAY,EACZA,mBAAgB,EAURA,qBAAiB,EAmBvBA,KAAKitC,KAAO78B,EAAWogC,GACvBxwC,KAAK2vC,OAASjH,GAAa+H,cAAc74B,GACzC5X,KAAKquC,MAAQ,SAAC13B,GACZ,OAAAiB,EAAS84B,cAAcz6B,GAAcU,IAkR3C,QA0FiB82B,iBAAf,WACE,IAAMkD,EAASjF,SAASwD,cAAc,UAItC,GAHAyB,EAAOP,MAAMC,QAAU,QAGnB3E,SAAS1qC,KAqBX,KAAM,oGApBN0qC,SAAS1qC,KAAKsvC,YAAYK,GAC1B,IAIYA,EAAOC,cAAclF,UAG7B/9B,EAAI,iCAEN,MAAOrL,GACP,IAAMiU,EAASm1B,SAASn1B,OACxBo6B,EAAOR,IACL,gEACA55B,EACA,2BAiBN,OARIo6B,EAAOE,gBACRF,EAAeG,IAAMH,EAAOE,gBACpBF,EAAOC,cACfD,EAAeG,IAAMH,EAAOC,cAAclF,SACjCiF,EAAejF,WACxBiF,EAAeG,IAAOH,EAAejF,UAGjCiF,GAMTlD,mBAAA,WAAA,WAEEztC,KAAK+wC,OAAQ,EAET/wC,KAAKgxC,WAIPhxC,KAAKgxC,SAASF,IAAI9vC,KAAKiwC,UAAY,GACnCh+B,WAAW,WACa,OAAlB1L,EAAKypC,WACPtF,SAAS1qC,KAAKuuC,YAAYhoC,EAAKypC,UAC/BzpC,EAAKypC,SAAW,OAEjB7+B,KAAKI,MAAM,KAIhB,IAAMo6B,EAAe3sC,KAAK2sC,aACtBA,IACF3sC,KAAK2sC,aAAe,KACpBA,MASJc,2BAAA,SAAcv8B,EAAY++B,GAMxB,IALAjwC,KAAKkxC,KAAOhgC,EACZlR,KAAKmxC,KAAOlB,EACZjwC,KAAK+wC,OAAQ,EAGN/wC,KAAKoxC,kBAUN3D,yBAAR,WAIE,GACEztC,KAAK+wC,OACL/wC,KAAKiuC,cACLjuC,KAAKqxC,oBAAoBziB,MAAkC,EAA1B5uB,KAAKsxC,YAAY3wC,OAAa,EAAI,GACnE,CAEAX,KAAKuxC,gBACL,IAAMjD,EAA8C,GACpDA,EAAoC,GAAItuC,KAAKkxC,KAC7C5C,EAAoC,GAAItuC,KAAKmxC,KAC7C7C,EAAwC,IAAItuC,KAAKuxC,cAMjD,IALA,IAAIC,EAASxxC,KAAKquC,MAAMC,GAEpBmD,EAAgB,GAChBjxC,EAAI,EAEyB,EAA1BR,KAAKsxC,YAAY3wC,QAENX,KAAKsxC,YAAY,GAEvBhyC,EAAEqB,OAzhBI,GAyhBuB8wC,EAAc9wC,QA1hBnC,MAshBgB,CAQhC,IAAM+wC,EAAS1xC,KAAKsxC,YAAYK,QAChCF,EACEA,EACA,OAEAjxC,EACA,IACAkxC,EAAOE,IACP,MAEApxC,EACA,IACAkxC,EAAOG,GACP,KAEArxC,EACA,IACAkxC,EAAOpyC,EACTkB,IASJ,OAHAgxC,GAAkBC,EAClBzxC,KAAK8xC,gBAAgBN,EAAQxxC,KAAKuxC,gBAE3B,EAEP,OAAO,GAUX9D,4BAAA,SAAesE,EAAgBC,EAAmBvpC,GAEhDzI,KAAKsxC,YAAYjvC,KAAK,CAAEuvC,IAAKG,EAAQF,GAAIG,EAAW1yC,EAAGmJ,IAInDzI,KAAK+wC,OACP/wC,KAAKoxC,eAUD3D,6BAAR,SAAwBwE,EAAaC,GAArC,WAIuB,SAAfC,IACJ5qC,EAAK8pC,oBAAoBhiB,OAAO6iB,GAChC3qC,EAAK6pC,cAJPpxC,KAAKqxC,oBAAoBhH,IAAI6H,GAE7B,IAOME,EAAmBn/B,WACvBk/B,EACAhgC,KAAKI,MAxlBwB,OAmmB/BvS,KAAK6uC,OAAOoD,EARS,WAEnBnE,aAAasE,GAGbD,OAWJ1E,oBAAA,SAAOwE,EAAaI,GAApB,WAIIp/B,WAAW,WACT,IAEE,IAAK1L,EAAK0mC,aAAc,OACxB,IAAMqE,EAAY/qC,EAAKypC,SAASF,IAAI5B,cAAc,UAClDoD,EAAU57B,KAAO,kBACjB47B,EAAUC,OAAQ,EAClBD,EAAUnC,IAAM8B,EAChBK,EAAUE,OAAUF,EAAkBG,mBAAqB,WACzD,IAAMC,EAAUJ,EAAkBnF,WAC7BuF,GAAqB,WAAXA,GAAkC,aAAXA,IACpCJ,EAAUE,OAAUF,EAAkBG,mBAAqB,KACvDH,EAAUK,YACZL,EAAUK,WAAWpD,YAAY+C,GAEnCD,MAGJC,EAAUM,QAAU,WAClBjlC,EAAI,oCAAsCskC,GAC1C1qC,EAAK0mC,cAAe,EACpB1mC,EAAK8nC,SAEP9nC,EAAKypC,SAASF,IAAI9vC,KAAKsvC,YAAYgC,GACnC,MAAOhwC,MAGR6P,KAAKI,MAAM,SAtSlB,YACEsgC,EACAC,EACOnG,EACA0B,GADAruC,kBAAA2sC,EACA3sC,WAAAquC,EAlCTruC,yBAAsB,IAAI+yC,IAG1B/yC,iBAAqD,GAOrDA,mBAAgBmS,KAAKI,MAAsB,IAAhBJ,KAAK2J,UAIhC9b,mBAAe,EA2BXA,KAAKwuC,yBAA2Bn9B,KAC/BvJ,OA1Y0C,aA2YL9H,KAAKwuC,0BACvCqE,EACH/qC,OA5YuC,UA6YL9H,KAAKwuC,0BACpCsE,EAGJ9yC,KAAKgxC,SAAWvD,GAA2BuF,gBAG3C,IAAIC,EAAS,GAIXjzC,KAAKgxC,SAASb,KACwC,gBAAtDnwC,KAAKgxC,SAASb,IAAIr9B,OAAO,EAAG,cAAcnS,UAG1CsyC,EAAS,4BADavH,SAASn1B,OACwB,gBAEzD,IAAM28B,EAAiB,eAAiBD,EAAS,iBACjD,IACEjzC,KAAKgxC,SAASF,IAAIqC,OAClBnzC,KAAKgxC,SAASF,IAAI3P,MAAM+R,GACxBlzC,KAAKgxC,SAASF,IAAIzB,QAClB,MAAO/sC,GACPqL,EAAI,2BACArL,EAAE4Q,OACJvF,EAAIrL,EAAE4Q,OAERvF,EAAIrL,ICtcL,IAAIuB,GAAc,GCuBzB,IAGIuvC,GAAgB,KACQ,oBAAjBC,aACTD,GAAgBC,aACc,oBAAdC,YAChBF,GAAgBE,WAYlB,QA6CiBC,kBAAf,SACE37B,EACA62B,EACAC,GAEA,IAAMJ,EAAqC,CAC3CvsC,E5D9F4B,K4D8G5B,MAZsB,oBAAb0V,UACPA,SAASk3B,OACgC,IAAzCl3B,SAASk3B,KAAKv3B,QAAQrB,MAEtBu4B,EAAuB,E5D9FJ,K4DgGjBG,IACFH,EAAiC,EAAIG,GAEnCC,IACFJ,EAA4B,GAAII,GAE3B92B,EAAS84B,cAAc16B,GAAWs4B,IAQ3CiF,kBAAA,SAAK7G,EAAkCC,GAAvC,WACE3sC,KAAK2sC,aAAeA,EACpB3sC,KAAK0sC,UAAYA,EAEjB1sC,KAAKitC,KAAK,2BAA6BjtC,KAAK4W,SAE5C5W,KAAK+tC,gBAAiB,EAEtB58B,GAAkBrB,IAAI,8BAA8B,GAEpD,IACE,GAAI7H,IAAa,CACf,IAAMurC,EAASC,EAAc7vC,WAAa,YAAc,OAElDukC,EAAmC,CACvCuL,QAAS,CACPC,aAAc,cAAgC9vC,OAAe+vC,QAAQC,aAAYL,IAK/EM,EAAMF,QAAa,IACnBG,EAC8B,GAAlC/zC,KAAK4W,QAAQQ,QAAQ,UACjB08B,EAAiB,aAAKA,EAAiB,YACvCA,EAAgB,YAAKA,EAAgB,WAEvCC,IACF5L,EAAe,MAAI,CAAE6L,OAAQD,IAG/B/zC,KAAKi0C,OAAS,IAAIb,GAAcpzC,KAAK4W,QAAS,GAAIuxB,QAElDnoC,KAAKi0C,OAAS,IAAIb,GAAcpzC,KAAK4W,SAEvC,MAAOtU,GACPtC,KAAKitC,KAAK,kCACV,IAAMnqC,EAAQR,EAAE0B,SAAW1B,EAAEmG,KAK7B,OAJI3F,GACF9C,KAAKitC,KAAKnqC,QAEZ9C,KAAKktC,YAIPltC,KAAKi0C,OAAOC,OAAS,WACnB3sC,EAAK0lC,KAAK,wBACV1lC,EAAKwmC,gBAAiB,GAGxB/tC,KAAKi0C,OAAOE,QAAU,WACpB5sC,EAAK0lC,KAAK,0CACV1lC,EAAK0sC,OAAS,KACd1sC,EAAK2lC,aAGPltC,KAAKi0C,OAAOG,UAAY,SAAC1xC,GACvB6E,EAAK8sC,oBAAoB3xC,IAG3B1C,KAAKi0C,OAAOrB,QAAU,SAACtwC,GACrBiF,EAAK0lC,KAAK,yCACV,IAAMnqC,EAAQR,EAAE0B,SAAW1B,EAAEmG,KACzB3F,GACFyE,EAAK0lC,KAAKnqC,GAEZyE,EAAK2lC,cAOTqG,mBAAA,aAIOA,iBAAP,WACEA,GAAoBtE,gBAAiB,GAGhCsE,eAAP,WACE,IAAIe,GAAe,EACnB,GAAyB,oBAAdtsC,WAA6BA,UAAUusC,UAAW,CAC3D,IACMC,EAAkBxsC,UAAUusC,UAAUE,MADpB,kCAEpBD,GAA4C,EAAzBA,EAAgB7zC,QACjC+zC,WAAWF,EAAgB,IAAM,MACnCF,GAAe,GAKrB,OACGA,GACiB,OAAlBlB,KACCG,GAAoBtE,gBAoBlBsE,oBAAP,WAGE,OACEpiC,GAAkBwjC,oBACsC,IAAxDxjC,GAAkBjB,IAAI,+BAI1BqjC,mCAAA,WACEpiC,GAAkBpB,OAAO,+BAGnBwjC,0BAAR,SAAqB9qC,GAEnB,GADAzI,KAAK40C,OAAOvyC,KAAKoG,GACbzI,KAAK40C,OAAOj0C,QAAUX,KAAK60C,YAAa,CAC1C,IAAMC,EAAW90C,KAAK40C,OAAOhvC,KAAK,IAClC5F,KAAK40C,OAAS,KACd,IAAMG,EAAWprC,EAASmrC,GAG1B90C,KAAK0sC,UAAUqI,KAQXxB,kCAAR,SAA6ByB,GAC3Bh1C,KAAK60C,YAAcG,EACnBh1C,KAAK40C,OAAS,IASRrB,gCAAR,SAA2B9qC,GAIzB,GAHA3E,EAAuB,OAAhB9D,KAAK40C,OAAiB,kCAGzBnsC,EAAK9H,QAAU,EAAG,CACpB,IAAMq0C,EAAaxkC,OAAO/H,GAC1B,IAAKwsC,MAAMD,GAET,OADAh1C,KAAKk1C,qBAAqBF,GACnB,KAIX,OADAh1C,KAAKk1C,qBAAqB,GACnBzsC,GAOT8qC,iCAAA,SAAoB4B,GAClB,GAAoB,OAAhBn1C,KAAKi0C,OAAT,CACA,IAAMxrC,EAAO0sC,EAAW,KAMxB,GALAn1C,KAAKuwC,eAAiB9nC,EAAK9H,OAC3BX,KAAK2vC,OAAOC,iBAAiB,iBAAkBnnC,EAAK9H,QAEpDX,KAAKo1C,iBAEe,OAAhBp1C,KAAK40C,OAEP50C,KAAKq1C,aAAa5sC,OACb,CAEL,IAAM6sC,EAAgBt1C,KAAKu1C,mBAAmB9sC,GACxB,OAAlB6sC,GACFt1C,KAAKq1C,aAAaC,MASxB/B,kBAAA,SAAK9qC,GACHzI,KAAKo1C,iBAEL,IAAM3F,EAAU3lC,EAAUrB,GAC1BzI,KAAK0vC,WAAaD,EAAQ9uC,OAC1BX,KAAK2vC,OAAOC,iBAAiB,aAAcH,EAAQ9uC,QAKnD,IAAMqQ,EAAWH,GAAkB4+B,EA/SN,OAkTP,EAAlBz+B,EAASrQ,QACXX,KAAKw1C,YAAYtvC,OAAO8K,EAASrQ,SAInC,IAAK,IAAIH,EAAI,EAAGA,EAAIwQ,EAASrQ,OAAQH,IACnCR,KAAKw1C,YAAYxkC,EAASxQ,KAItB+yC,uBAAR,WACEvzC,KAAK+sC,WAAY,EACb/sC,KAAKy1C,iBACPC,cAAc11C,KAAKy1C,gBACnBz1C,KAAKy1C,eAAiB,MAGpBz1C,KAAKi0C,SACPj0C,KAAKi0C,OAAO5E,QACZrvC,KAAKi0C,OAAS,OAIVV,uBAAR,WACOvzC,KAAK+sC,YACR/sC,KAAKitC,KAAK,+BACVjtC,KAAKwvC,YAGDxvC,KAAK2sC,eACP3sC,KAAK2sC,aAAa3sC,KAAK+tC,gBACvB/tC,KAAK2sC,aAAe,QAS1B4G,mBAAA,WACOvzC,KAAK+sC,YACR/sC,KAAKitC,KAAK,6BACVjtC,KAAKwvC,cAQT+D,4BAAA,WAAA,WACEmC,cAAc11C,KAAKy1C,gBACnBz1C,KAAKy1C,eAAiBE,YAAY,WAE5BpuC,EAAK0sC,QACP1sC,EAAKiuC,YAAY,KAEnBjuC,EAAK6tC,kBACJjjC,KAAKI,MA5WyB,QAqX3BghC,yBAAR,SAAoBrwC,GAIlB,IACElD,KAAKi0C,OAAO2B,KAAK1yC,GACjB,MAAOZ,GACPtC,KAAKitC,KACH,0CACA3qC,EAAE0B,SAAW1B,EAAEmG,KACf,uBAEFwK,WAAWjT,KAAKktC,UAAUt9B,KAAK5P,MAAO,KA5LnCuzC,gCAA+B,EAM/BA,kBAAiB,QAnKxB,YACS/C,EACP54B,EACA62B,EACAC,GAHO1uC,YAAAwwC,EAtBTxwC,oBAAgC,KAChCA,YAA0B,KAC1BA,iBAAc,EACdA,eAAY,EACZA,mBAAgB,EAuBdA,KAAKitC,KAAO78B,EAAWpQ,KAAKwwC,QAC5BxwC,KAAK2vC,OAASjH,GAAa+H,cAAc74B,GACzC5X,KAAK4W,QAAU28B,GAAoBsC,eACjCj+B,EACA62B,EACAC,GC9DN,QAOElvC,sBAAWs2C,yBAAX,WACE,MAAO,CAACrJ,GAAuB8G,qCAczBuC,6BAAR,SAAwBl+B,WAChBm+B,EACJxC,IAAuBA,GAAiC,cACtDyC,EACFD,IAA0BxC,GAAoB0C,mBAWhD,GATIr+B,EAAST,gBACN4+B,GACHrsC,GACE,mFAGJssC,GAAuB,GAGrBA,EACFh2C,KAAKk2C,YAAc,CAAC3C,QACf,CACL,IAAM4C,EAAcn2C,KAAKk2C,YAAc,OACvC,IAAwB,IAAA5sC,EAAA2Q,EAAA67B,GAAiBM,8CAAgB,CAApD,IAAMC,UACLA,GAAaA,EAAuB,eACtCF,EAAW9zC,KAAKg0C,wGAUxBP,8BAAA,WACE,GAA8B,EAA1B91C,KAAKk2C,YAAYv1C,OACnB,OAAOX,KAAKk2C,YAAY,GAExB,MAAM,IAAIhyC,MAAM,4BAQpB4xC,8BAAA,WACE,OAA8B,EAA1B91C,KAAKk2C,YAAYv1C,OACZX,KAAKk2C,YAAY,GAEjB,UAvDX,YAAYt+B,GACV5X,KAAKs2C,gBAAgB1+B,GCfzB,QAiFU2+B,oBAAR,WAAA,WACQC,EAAOx2C,KAAKy2C,kBAAkBC,mBACpC12C,KAAK22C,MAAQ,IAAIH,EACfx2C,KAAK42C,mBACL52C,KAAK62C,eACL1vC,EACAnH,KAAK0uC,eAKP1uC,KAAK82C,0BAA4BN,EAAmC,8BAAK,EAEzE,IAAMO,EAAoB/2C,KAAKg3C,cAAch3C,KAAK22C,OAC5CM,EAAmBj3C,KAAKk3C,iBAAiBl3C,KAAK22C,OACpD32C,KAAKm3C,IAAMn3C,KAAK22C,MAChB32C,KAAKo3C,IAAMp3C,KAAK22C,MAChB32C,KAAKq3C,eAAiB,KACtBr3C,KAAKs3C,YAAa,EAQlBrkC,WAAW,WAET1L,EAAKovC,OAASpvC,EAAKovC,MAAMxD,KAAK4D,EAAmBE,IAChD9kC,KAAKI,MAAM,IAEd,IAAMglC,EAAoBf,EAAqB,gBAAK,EAC5B,EAApBe,IACFv3C,KAAKw3C,gBAAkBrkC,GAAsB,WAC3C5L,EAAKiwC,gBAAkB,KAClBjwC,EAAK+vC,aAEN/vC,EAAKovC,OA5GuB,OA6G5BpvC,EAAKovC,MAAMpG,eAEXhpC,EAAK0lC,KACH,wDACE1lC,EAAKovC,MAAMpG,cACX,wCAEJhpC,EAAK+vC,YAAa,EAClB/vC,EAAKovC,MAAMc,yBAEXlwC,EAAKovC,OAxHmB,MAyHxBpvC,EAAKovC,MAAMjH,UAEXnoC,EAAK0lC,KACH,oDACE1lC,EAAKovC,MAAMjH,UACX,uCAKJnoC,EAAK0lC,KAAK,+CACV1lC,EAAK8nC,WAGRl9B,KAAKI,MAAMglC,MAQVhB,8BAAR,WACE,MAAO,KAAOv2C,KAAKkR,GAAK,IAAMlR,KAAK03C,mBAG7BnB,8BAAR,SAAyBC,GAAzB,WACE,OAAO,SAAAmB,GACDnB,IAASjvC,EAAKovC,MAChBpvC,EAAKqwC,kBAAkBD,GACdnB,IAASjvC,EAAK8vC,gBACvB9vC,EAAK0lC,KAAK,8BACV1lC,EAAKswC,8BAELtwC,EAAK0lC,KAAK,+BAKRsJ,2BAAR,SAAsBC,GAAtB,WACE,OAAO,SAACxyC,MACFuD,EAAKuwC,SACHtB,IAASjvC,EAAK6vC,IAChB7vC,EAAKwwC,0BAA0B/zC,GACtBwyC,IAASjvC,EAAK8vC,eACvB9vC,EAAKywC,4BAA4Bh0C,GAEjCuD,EAAK0lC,KAAK,gCAUlBsJ,yBAAA,SAAY0B,GAEV,IAAMC,EAAM,CAAE53C,EAAG,IAAKhB,EAAG24C,GACzBj4C,KAAKm4C,UAAUD,IAGjB3B,kCAAA,WACMv2C,KAAKm3C,MAAQn3C,KAAKq3C,gBAAkBr3C,KAAKo3C,MAAQp3C,KAAKq3C,iBACxDr3C,KAAKitC,KACH,2CAA6CjtC,KAAKq3C,eAAe7G,QAEnExwC,KAAK22C,MAAQ32C,KAAKq3C,eAClBr3C,KAAKq3C,eAAiB,OAKlBd,iCAAR,SAA4B6B,GAC1B,GA3LiB,MA2LGA,EAAa,CAC/B,IAAMC,EAAMD,EAAwB,EAtLvB,MAuLTC,EACFr4C,KAAKs4C,6BA3LS,MA4LLD,GAETr4C,KAAKitC,KAAK,wCACVjtC,KAAKq3C,eAAehI,QAGlBrvC,KAAKm3C,MAAQn3C,KAAKq3C,gBAClBr3C,KAAKo3C,MAAQp3C,KAAKq3C,gBAElBr3C,KAAKqvC,SAnMM,MAqMJgJ,IACTr4C,KAAKitC,KAAK,0BACVjtC,KAAKu4C,8BACLv4C,KAAKs4C,gCAKH/B,yCAAR,SAAoCiC,GAClC,IAAMC,EAAgB7nC,GAAW,IAAK4nC,GAChC/vC,EAAYmI,GAAW,IAAK4nC,GAClC,GAAa,KAATC,EACFz4C,KAAK04C,oBAAoBjwC,OACpB,CAAA,GAAa,KAATgwC,EAIT,MAAM,IAAIv0C,MAAM,2BAA6Bu0C,GAF7Cz4C,KAAK24C,oBAAoBt2C,KAAKoG,KAM1B8tC,wCAAR,WACMv2C,KAAKu4C,6BAA+B,GACtCv4C,KAAKitC,KAAK,oCACVjtC,KAAKs3C,YAAa,EAClBt3C,KAAKq3C,eAAeI,wBACpBz3C,KAAK44C,wBAGL54C,KAAKitC,KAAK,8BACVjtC,KAAKq3C,eAAezB,KAAK,CAAEt1C,EAAG,IAAKhB,EAAG,CAAEgB,EAhOjC,IAgO0ChB,EAAG,QAIhDi3C,iCAAR,WAEEv2C,KAAKq3C,eAAe9I,QAEpBvuC,KAAKitC,KAAK,mCACVjtC,KAAKq3C,eAAezB,KAAK,CAAEt1C,EAAG,IAAKhB,EAAG,CAAEgB,EA3OzB,IA2OwChB,EAAG,MAI1DU,KAAKitC,KAAK,kCACVjtC,KAAK22C,MAAMf,KAAK,CAAEt1C,EAAG,IAAKhB,EAAG,CAAEgB,EA/OV,IA+O+BhB,EAAG,MACvDU,KAAKm3C,IAAMn3C,KAAKq3C,eAEhBr3C,KAAK64C,wBAGCtC,uCAAR,SAAkCiC,GAEhC,IAAMC,EAAgB7nC,GAAW,IAAK4nC,GAChC/vC,EAAYmI,GAAW,IAAK4nC,GACrB,KAATC,EACFz4C,KAAK84C,WAAWrwC,GACE,KAATgwC,GACTz4C,KAAK+4C,eAAetwC,IAIhB8tC,4BAAR,SAAuBvyC,GACrBhE,KAAKg5C,qBAGLh5C,KAAKwsC,WAAWxoC,IAGVuyC,gCAAR,WACOv2C,KAAKs3C,aACRt3C,KAAK82C,4BACD92C,KAAK82C,2BAA6B,IACpC92C,KAAKitC,KAAK,kCACVjtC,KAAKs3C,YAAa,EAClBt3C,KAAK22C,MAAMc,2BAKTlB,wBAAR,SAAmB6B,GACjB,IAAMC,EAAcznC,GA1RH,IA0R4BwnC,GAC7C,GA1RiB,MA0RGA,EAAa,CAC/B,IAAMa,EAAUb,EAAwB,EACxC,GAnRe,MAmRXC,EACFr4C,KAAKk5C,aAAaD,QACb,GAxRY,MAwRRZ,EAA0B,CACnCr4C,KAAKitC,KAAK,qCACVjtC,KAAKo3C,IAAMp3C,KAAKq3C,eAChB,IAAK,IAAI72C,EAAI,EAAGA,EAAIR,KAAK24C,oBAAoBh4C,SAAUH,EACrDR,KAAK+4C,eAAe/4C,KAAK24C,oBAAoBn4C,IAE/CR,KAAK24C,oBAAsB,GAC3B34C,KAAK64C,2BApSY,MAqSRR,EAGTr4C,KAAKm5C,sBAAsBF,GAvSb,MAwSLZ,EAETr4C,KAAKo5C,SAASH,GAzSA,MA0SLZ,EACTv1C,EAAM,iBAAmBm2C,GA1SZ,MA2SJZ,GACTr4C,KAAKitC,KAAK,wBACVjtC,KAAKg5C,qBACLh5C,KAAKq5C,iCAELv2C,EAAM,mCAAqCu1C,KAUzC9B,0BAAR,SAAqB+C,GAMnB,IAAMC,EAAYD,EAAUzH,GACtB2H,EAAUF,EAAUv3C,EACpBoU,EAAOmjC,EAAUG,EACvBz5C,KAAK05C,UAAYJ,EAAU/4C,EAC3BP,KAAK62C,UAAU8C,WAAWxjC,MAEtBnW,KAAK83C,SACP93C,KAAK22C,MAAMpI,QACXvuC,KAAK45C,yBAAyB55C,KAAK22C,MAAO4C,G9D7WhB,M8D8WDC,GACvB9vC,GAAK,sCAGP1J,KAAK65C,qBAIDtD,8BAAR,WACE,IAAMC,EAAOx2C,KAAKy2C,kBAAkBqD,mBAChCtD,GACFx2C,KAAK+5C,cAAcvD,IAIfD,2BAAR,SAAsBC,GAAtB,WACEx2C,KAAKq3C,eAAiB,IAAIb,EACxBx2C,KAAK42C,mBACL52C,KAAK62C,UACL72C,KAAK05C,WAIP15C,KAAKu4C,4BACH/B,EAAmC,8BAAK,EAE1C,IAAM9J,EAAY1sC,KAAKg3C,cAAch3C,KAAKq3C,gBACpC1K,EAAe3sC,KAAKk3C,iBAAiBl3C,KAAKq3C,gBAChDr3C,KAAKq3C,eAAelE,KAAKzG,EAAWC,GAGpCx5B,GAAsB,WAChB5L,EAAK8vC,iBACP9vC,EAAK0lC,KAAK,gCACV1lC,EAAK8vC,eAAehI,UAErBl9B,KAAKI,MApYY,OAuYdgkC,sBAAR,SAAiBpgC,GACfnW,KAAKitC,KAAK,qCAAuC92B,GACjDnW,KAAK62C,UAAU8C,WAAWxjC,OAGtBnW,KAAK83C,OACP93C,KAAKqvC,SAGLrvC,KAAKg6C,oBACLh6C,KAAKi6C,WAID1D,sCAAR,SAAiCC,EAAiB+C,GAAlD,WACEv5C,KAAKitC,KAAK,oCACVjtC,KAAK22C,MAAQH,EACbx2C,KAAK83C,SAED93C,KAAKk6C,WACPl6C,KAAKk6C,SAASX,EAAWv5C,KAAK05C,WAC9B15C,KAAKk6C,SAAW,MAKqB,IAAnCl6C,KAAK82C,2BACP92C,KAAKitC,KAAK,kCACVjtC,KAAKs3C,YAAa,GAElBnkC,GAAsB,WACpB5L,EAAK8xC,iCACJlnC,KAAKI,MAna8B,OAualCgkC,2CAAR,WAEOv2C,KAAKs3C,gBAAct3C,KAAK83C,SAC3B93C,KAAKitC,KAAK,4BACVjtC,KAAKm4C,UAAU,CAAE73C,EAAG,IAAKhB,EAAG,CAAEgB,EArZvB,IAqZgChB,EAAG,QAItCi3C,wCAAR,WACE,IAAMC,EAAOx2C,KAAKq3C,eAClBr3C,KAAKq3C,eAAiB,KAClBr3C,KAAKm3C,MAAQX,GAAQx2C,KAAKo3C,MAAQZ,GAEpCx2C,KAAKqvC,SAUDkH,+BAAR,SAA0BoB,GACxB33C,KAAK22C,MAAQ,KAIRgB,OAAiB33C,KAAK83C,WAQhB93C,KAAK83C,QACd93C,KAAKitC,KAAK,8BARVjtC,KAAKitC,KAAK,+BAENjtC,KAAK62C,UAAUpgC,oBACjBtF,GAAkBpB,OAAO,QAAU/P,KAAK62C,UAAU1gC,MAElDnW,KAAK62C,UAAUzgC,aAAepW,KAAK62C,UAAU1gC,OAMjDnW,KAAKqvC,SAQCkH,mCAAR,SAA8BxP,GAC5B/mC,KAAKitC,KAAK,0DAENjtC,KAAKm6C,UACPn6C,KAAKm6C,QAAQpT,GACb/mC,KAAKm6C,QAAU,MAKjBn6C,KAAK6sC,cAAgB,KAErB7sC,KAAKqvC,SAGCkH,uBAAR,SAAkB9tC,GAChB,OAAIzI,KAAK83C,OACP,KAAM,8BAEN93C,KAAKm3C,IAAIvB,KAAKntC,IAOlB8tC,mBAAA,eACMv2C,KAAK83C,SACP93C,KAAKitC,KAAK,gCACVjtC,KAAK83C,SAEL93C,KAAKg6C,oBAEDh6C,KAAK6sC,gBACP7sC,KAAK6sC,gBACL7sC,KAAK6sC,cAAgB,QASnB0J,+BAAR,WACEv2C,KAAKitC,KAAK,iCACNjtC,KAAK22C,QACP32C,KAAK22C,MAAMtH,QACXrvC,KAAK22C,MAAQ,MAGX32C,KAAKq3C,iBACPr3C,KAAKq3C,eAAehI,QACpBrvC,KAAKq3C,eAAiB,MAGpBr3C,KAAKw3C,kBACP1J,aAAa9tC,KAAKw3C,iBAClBx3C,KAAKw3C,gBAAkB,WAvd3B,YACStmC,EACC2lC,EACArK,EACA0N,EACArN,EACAsN,EACDzL,GANA1uC,QAAAkR,EACClR,eAAA62C,EACA72C,gBAAAwsC,EACAxsC,cAAAk6C,EACAl6C,mBAAA6sC,EACA7sC,aAAAm6C,EACDn6C,mBAAA0uC,EAhCT1uC,qBAAkB,EAClBA,yBAA6B,GAWrBA,cAsBNA,KAAKitC,KAAO78B,EAAW,KAAOpQ,KAAKkR,GAAK,KACxClR,KAAKy2C,kBAAoB,IAAIX,GAAiBe,GAC9C72C,KAAKitC,KAAK,sBACVjtC,KAAKi6C,SChFT,QA4BEG,iBAAA,SACEvmC,EACApL,EACAiS,EACAoL,KASFs0B,mBAAA,SACEvmC,EACApL,EACAiS,EACAoL,KAOFs0B,8BAAA,SAAiBpwC,KAOjBowC,6BAAA,SACEvmC,EACApL,EACAiS,KAQF0/B,+BAAA,SACEvmC,EACApL,EACAiS,KAOF0/B,gCAAA,SACEvmC,EACA6G,KAMF0/B,yBAAA,SAAY7Q,SAxFd,eCQA,WAuC0CrhC,QAAAkyC,IAkF9BC,yBAAV,SACEp8B,EACAjd,EACAs5C,GAEA,IAAMC,IAAcv6C,KAAKw6C,eAEnBtC,EAAM,CAAEt1C,EAAG23C,EAAWhvC,EAAG0S,EAAQ1e,EAAGyB,GAC1ChB,KAAKitC,KAAKnjC,EAAUouC,IACpBp0C,EACE9D,KAAKy6C,WACL,0DAEFz6C,KAAK06C,UAAUC,YAAYzC,GACvBoC,IACFt6C,KAAK46C,eAAeL,GAAaD,IAOrCD,oBAAA,SACExwB,EACAgxB,EACA5X,EACAvoB,GAEA,IAAMyV,EAAUtG,EAAM2E,kBAChB3a,EAAagW,EAAMhU,KAAK3M,WAC9BlJ,KAAKitC,KAAK,qBAAuBp5B,EAAa,IAAMsc,GAC/CnwB,KAAK86C,QAAQhsB,IAAIjb,IACpB7T,KAAK86C,QAAQhrC,IAAI+D,EAAY,IAAI6b,KAEnC5rB,EACE+lB,EAAMC,iBAAiByc,cACpB1c,EAAMC,iBAAiBqS,eAC1B,sDAEFr4B,GACG9D,KAAK86C,QAAQ5qC,IAAI2D,GAAaib,IAAIqB,GACnC,gDAEF,IAAM4qB,EAAyB,CAC7BrgC,WAAYA,EACZ6qB,OAAQsV,EACRhxB,MAAOA,EACPoZ,IAAKA,GAEPjjC,KAAK86C,QAAQ5qC,IAAI2D,GAAa/D,IAAIqgB,EAAS4qB,GAEvC/6C,KAAKy6C,YACPz6C,KAAKg7C,YAAYD,IAIbV,yBAAR,SAAoBU,GAApB,WACQlxB,EAAQkxB,EAAWlxB,MACnBhW,EAAagW,EAAMhU,KAAK3M,WACxBinB,EAAUtG,EAAM2E,kBACtBxuB,KAAKitC,KAAK,aAAep5B,EAAa,QAAUsc,GAChD,IAAM8qB,EAA4B,CAAWr7C,EAAGiU,GAK5CknC,EAAW9X,MACbgY,EAAO,EAAIpxB,EAAMuE,cACjB6sB,EAAO,EAAIF,EAAW9X,KAGxBgY,EAAgB,EAAIF,EAAWxV,SAE/BvlC,KAAK26C,YAVU,IAUUM,EAAK,SAACj3C,GAC7B,IAAMi1C,EAAej1C,EAAoB,EACnC4iC,EAAiB5iC,EAAsB,EAG7Cq2C,GAAqBa,sBAAsBjC,EAASpvB,IAGlDtiB,EAAKuzC,QAAQ5qC,IAAI2D,IACjBtM,EAAKuzC,QAAQ5qC,IAAI2D,GAAa3D,IAAIigB,MAEV4qB,IACxBxzC,EAAK0lC,KAAK,kBAAmBjpC,GAEd,OAAX4iC,GACFr/B,EAAK4zC,cAActnC,EAAYsc,GAG7B4qB,EAAWrgC,YACbqgC,EAAWrgC,WAAWksB,EAAQqS,OAMvBoB,yBAAf,SAAqCpB,EAAcpvB,GACjD,GAAIovB,GAA8B,iBAAZA,GAAwB3uC,EAAS2uC,EAAS,KAAM,CACpE,IAAMmC,EAAW5wC,EAAQyuC,EAAS,KAClC,GAAIt5C,MAAMoF,QAAQq2C,KAAcA,EAAShkC,QAAQ,YAAa,CAC5D,IAAMikC,EACJ,gBACAxxB,EACGC,iBACAC,WACA7gB,WACH,IACIoyC,EAAYzxB,EAAMhU,KAAK3M,WAC7BQ,GACE,wGAC6C2xC,SACxCC,wDASbjB,8BAAA,SAAiBrwC,GACfhK,KAAKu7C,WAAavxC,EAClBhK,KAAKitC,KAAK,wBACNjtC,KAAKu7C,WACPv7C,KAAKw7C,UAIDx7C,KAAKy6C,YACPz6C,KAAK26C,YAAY,SAAU,GAAI,cAInC36C,KAAKy7C,uCAAuCzxC,IAGtCqwC,oDAAR,SAA+CqB,IAGpBA,GAAoC,KAAtBA,EAAW/6C,Q3EzJ/B,SAASqJ,GAC9B,IAAME,EAAiBH,EAAOC,GAAOE,OACrC,MAAyB,iBAAXA,IAA2C,IAApBA,EAAc,M2EwJzByxC,CAAQD,MAC9B17C,KAAKitC,KACH,iEAEFjtC,KAAK47C,mBAzQ4B,MAiRrCvB,qBAAA,WAAA,WACE,GAAIr6C,KAAKy6C,YAAcz6C,KAAKu7C,WAAY,CACtC,IAAMM,EAAQ77C,KAAKu7C,WACbO,E3EvLiB,SAAS9xC,GACpC,IACEE,EADcH,EAAOC,GACJE,OAEnB,QAASA,GAA4B,iBAAXA,GAAuBA,EAAOrK,eAAe,O2EmLhDk8C,CAAcF,GAAS,OAAS,QAC7CG,EAAoC,CAAEC,KAAMJ,GACvB,OAAvB77C,KAAKk8C,cACPF,EAAoB,QAAI,EACe,iBAAvBh8C,KAAKk8C,gBACrBF,EAAqB,QAAIh8C,KAAKk8C,eAEhCl8C,KAAK26C,YAAYmB,EAAYE,EAAa,SAACnxC,GACzC,IAAM+7B,EAAiB/7B,EAAkB,EACnCpC,EAAeoC,EAAgB,GAAK,QAEtCtD,EAAKg0C,aAAeM,IACP,OAAXjV,EACFr/B,EAAK40C,uBAAyB,EAG9B50C,EAAK60C,eAAexV,EAAQn+B,QAUtC4xC,sBAAA,SAASxwB,EAAcoZ,GACrB,IAAMpvB,EAAagW,EAAMhU,KAAK3M,WACxBinB,EAAUtG,EAAM2E,kBAEtBxuB,KAAKitC,KAAK,uBAAyBp5B,EAAa,IAAMsc,GAEtDrsB,EACE+lB,EAAMC,iBAAiByc,cACpB1c,EAAMC,iBAAiBqS,eAC1B,wDAEan8B,KAAKm7C,cAActnC,EAAYsc,IAChCnwB,KAAKy6C,YACjBz6C,KAAKq8C,cAAcxoC,EAAYsc,EAAStG,EAAMuE,cAAe6U,IAIzDoX,2BAAR,SACExmC,EACAsc,EACAmsB,EACArZ,GAEAjjC,KAAKitC,KAAK,eAAiBp5B,EAAa,QAAUsc,GAElD,IAAM8qB,EAA4B,CAAWr7C,EAAGiU,GAG5CovB,IACFgY,EAAO,EAAIqB,EACXrB,EAAO,EAAIhY,GAGbjjC,KAAK26C,YAPU,IAOUM,IAM3BZ,6BAAA,SACExmC,EACApL,EACAiS,GAEI1a,KAAKy6C,WACPz6C,KAAKu8C,kBAAkB,IAAK1oC,EAAYpL,EAAMiS,GAE9C1a,KAAKw8C,0BAA0Bn6C,KAAK,CAClCwR,aACAoK,OAAQ,IACRxV,OACAiS,gBAQN2/B,+BAAA,SACExmC,EACApL,EACAiS,GAEI1a,KAAKy6C,WACPz6C,KAAKu8C,kBAAkB,KAAM1oC,EAAYpL,EAAMiS,GAE/C1a,KAAKw8C,0BAA0Bn6C,KAAK,CAClCwR,aACAoK,OAAQ,KACRxV,OACAiS,gBAQN2/B,gCAAA,SACExmC,EACA6G,GAEI1a,KAAKy6C,WACPz6C,KAAKu8C,kBAAkB,KAAM1oC,EAAY,KAAM6G,GAE/C1a,KAAKw8C,0BAA0Bn6C,KAAK,CAClCwR,aACAoK,OAAQ,KACRxV,KAAM,KACNiS,gBAKE2/B,+BAAR,SACEp8B,EACApK,EACApL,EACAiS,GAEA,IAAM+hC,EAAU,CAAW78C,EAAGiU,EAAqBvU,EAAGmJ,GACtDzI,KAAKitC,KAAK,gBAAkBhvB,EAAQw+B,GACpCz8C,KAAK26C,YAAY18B,EAAQw+B,EAAS,SAACC,GAC7BhiC,GACFzH,WAAW,WACTyH,EAAWgiC,EAAuB,EAAGA,EAAuB,IAC3DvqC,KAAKI,MAAM,OAQpB8nC,iBAAA,SACExmC,EACApL,EACAiS,EACAoL,GAEA9lB,KAAK28C,YAAY,IAAK9oC,EAAYpL,EAAMiS,EAAYoL,IAMtDu0B,mBAAA,SACExmC,EACApL,EACAiS,EACAoL,GAEA9lB,KAAK28C,YAAY,IAAK9oC,EAAYpL,EAAMiS,EAAYoL,IAGtDu0B,yBAAA,SACEp8B,EACApK,EACApL,EACAiS,EACAoL,GAEA,IAAM22B,EAAgC,CAC3B78C,EAAGiU,EACHvU,EAAGmJ,QAGDtB,IAAT2e,IAAoB22B,EAAoB,EAAI32B,GAGhD9lB,KAAK48C,iBAAiBv6C,KAAK,CACzB4b,SACAw+B,UACA/hC,eAGF1a,KAAK68C,uBACL,IAAM7+B,EAAQhe,KAAK48C,iBAAiBj8C,OAAS,EAEzCX,KAAKy6C,WACPz6C,KAAK88C,SAAS9+B,GAEdhe,KAAKitC,KAAK,kBAAoBp5B,IAI1BwmC,sBAAR,SAAiBr8B,GAAjB,WACQC,EAASje,KAAK48C,iBAAiB5+B,GAAOC,OACtCw+B,EAAUz8C,KAAK48C,iBAAiB5+B,GAAOy+B,QACvC/hC,EAAa1a,KAAK48C,iBAAiB5+B,GAAOtD,WAChD1a,KAAK48C,iBAAiB5+B,GAAO++B,OAAS/8C,KAAKy6C,WAE3Cz6C,KAAK26C,YAAY18B,EAAQw+B,EAAS,SAACz4C,GACjCuD,EAAK0lC,KAAKhvB,EAAS,YAAaja,UAEzBuD,EAAKq1C,iBAAiB5+B,GAC7BzW,EAAKs1C,uBAG6B,IAA9Bt1C,EAAKs1C,uBACPt1C,EAAKq1C,iBAAmB,IAGtBliC,GACFA,EAAW1W,EAAsB,EAAGA,EAAsB,MAOhEq2C,yBAAA,SAAY9Q,GAAZ,WAEE,GAAIvpC,KAAKy6C,WAAY,CACnB,IAAMgC,EAAU,CAAer5C,EAAGmmC,GAClCvpC,KAAKitC,KAAK,cAAewP,GAEzBz8C,KAAK26C,YAAsB,IAAK8B,EAAS,SAAAj9B,GAEvC,GAAe,OADAA,EAAqB,EACf,CACnB,IAAMw9B,EAAcx9B,EAAqB,EACzCjY,EAAK0lC,KAAK,cAAe,wBAA0B+P,QAMnD3C,4BAAR,SAAuBr2C,GACrB,GAAI,MAAOA,EAAS,CAElBhE,KAAKitC,KAAK,gBAAkBnjC,EAAU9F,IACtC,IAAMi5C,EAASj5C,EAAW,EACpBs2C,EAAat6C,KAAK46C,eAAeqC,GACnC3C,WACKt6C,KAAK46C,eAAeqC,GAC3B3C,EAAWt2C,EAAoB,QAE5B,CAAA,GAAI,UAAWA,EACpB,KAAM,qCAAuCA,EAAe,MACnD,MAAOA,GAEhBhE,KAAKk9C,YAAYl5C,EAAW,EAAGA,EAAW,KAItCq2C,yBAAR,SAAoBp8B,EAAgBjd,GAClChB,KAAKitC,KAAK,sBAAuBhvB,EAAQjd,GAC1B,MAAXid,EACFje,KAAKm9C,cACHn8C,EAAiB,EACjBA,EAAiB,GACL,EACZA,EAAQ,GAEQ,MAAXid,EACPje,KAAKm9C,cACHn8C,EAAiB,EACjBA,EAAiB,GACJ,EACbA,EAAQ,GAEQ,MAAXid,EACPje,KAAKo9C,iBAAiBp8C,EAAiB,EAAGA,EAAkB,GAC1C,OAAXid,EACPje,KAAKo8C,eACHp7C,EAAwB,EACxBA,EAA0B,GAEV,OAAXid,EAAiBje,KAAKq9C,uBAAuBr8C,GAEpD8B,EACE,6CACEgH,EAAUmU,GACV,uCAIAo8B,sBAAR,SAAiBd,EAAmBG,GAClC15C,KAAKitC,KAAK,oBACVjtC,KAAKy6C,YAAa,EAClBz6C,KAAKs9C,gCAAiC,IAAIt2C,MAAOE,UACjDlH,KAAKu9C,iBAAiBhE,GACtBv5C,KAAK0uC,cAAgBgL,EACjB15C,KAAKw9C,kBACPx9C,KAAKy9C,oBAEPz9C,KAAK09C,gBACL19C,KAAKw9C,kBAAmB,EACxBx9C,KAAK29C,kBAAiB,IAGhBtD,8BAAR,SAAyBhnC,GAAzB,WACEvP,GACG9D,KAAK06C,UACN,0DAGE16C,KAAK49C,2BACP9P,aAAa9tC,KAAK49C,2BAMpB59C,KAAK49C,0BAA4B3qC,WAAW,WAC1C1L,EAAKq2C,0BAA4B,KACjCr2C,EAAKs2C,wBACJ1rC,KAAKI,MAAMc,KAGRgnC,wBAAR,SAAmBxa,GAGfA,IACC7/B,KAAKurC,UACNvrC,KAAK89C,kBAAoB99C,KAAK47C,qBAE9B57C,KAAKitC,KAAK,2CACVjtC,KAAK89C,gBA3lBiB,IA6lBjB99C,KAAK06C,WACR16C,KAAK+9C,iBAAiB,IAG1B/9C,KAAKurC,SAAW1L,GAGVwa,uBAAR,SAAkB2D,GACZA,GACFh+C,KAAKitC,KAAK,wBACVjtC,KAAK89C,gBAvmBiB,IAwmBjB99C,KAAK06C,WACR16C,KAAK+9C,iBAAiB,KAGxB/9C,KAAKitC,KAAK,8CACNjtC,KAAK06C,WACP16C,KAAK06C,UAAUrL,UAKbgL,mCAAR,WAWE,GAVAr6C,KAAKitC,KAAK,4BACVjtC,KAAKy6C,YAAa,EAClBz6C,KAAK06C,UAAY,KAGjB16C,KAAKi+C,0BAGLj+C,KAAK46C,eAAiB,GAElB56C,KAAKk+C,mBAAoB,CACtBl+C,KAAKurC,SAICvrC,KAAKs9C,iCA/nBgB,KAkoB5B,IAAIt2C,MAAOE,UAAYlH,KAAKs9C,iCAE5Bt9C,KAAK89C,gBAxoBa,KAyoBpB99C,KAAKs9C,+BAAiC,OATtCt9C,KAAKitC,KAAK,8CACVjtC,KAAK89C,gBAAkB99C,KAAK47C,mBAC5B57C,KAAKm+C,4BAA6B,IAAIn3C,MAAOE,WAU/C,IAAMk3C,GACJ,IAAIp3C,MAAOE,UAAYlH,KAAKm+C,2BAC1BE,EAAiBlsC,KAAK2D,IACxB,EACA9V,KAAK89C,gBAAkBM,GAEzBC,EAAiBlsC,KAAK2J,SAAWuiC,EAEjCr+C,KAAKitC,KAAK,0BAA4BoR,EAAiB,MACvDr+C,KAAK+9C,iBAAiBM,GAGtBr+C,KAAK89C,gBAAkB3rC,KAAKG,IAC1BtS,KAAK47C,mBAtpBsB,IAupB3B57C,KAAK89C,iBAGT99C,KAAK29C,kBAAiB,IAGhBtD,kCAAR,WACE,GAAIr6C,KAAKk+C,mBAAoB,CAC3Bl+C,KAAKitC,KAAK,+BACVjtC,KAAKm+C,4BAA6B,IAAIn3C,MAAOE,UAC7ClH,KAAKs9C,+BAAiC,KACtC,IAAMgB,EAAgBt+C,KAAK+4C,eAAenpC,KAAK5P,MACzCu+C,EAAUv+C,KAAKk6C,SAAStqC,KAAK5P,MAC7Bw+C,EAAex+C,KAAKy+C,sBAAsB7uC,KAAK5P,MAC/C0+C,EAAS1+C,KAAKkR,GAAK,IAAMmpC,GAAqBsE,oBAC9CzvB,EAAOlvB,KACP4+C,EAAgB5+C,KAAK0uC,cACvBmQ,GAAW,EACXC,EAAgC,KAC9BC,EAAU,WACVD,EACFA,EAAWzP,SAEXwP,GAAW,EACXL,MAWJx+C,KAAK06C,UAAY,CACfrL,MAAO0P,EACPpE,YAVoB,SAASzC,GAC7Bp0C,EACEg7C,EACA,0DAEFA,EAAWnE,YAAYzC,KAQzB,IAAMnQ,EAAe/nC,KAAKg/C,mBAC1Bh/C,KAAKg/C,oBAAqB,EAG1Bh/C,KAAKi/C,mBACFC,SAASnX,GACTE,KAAK,SAASzoB,GACRq/B,EAgBHlxC,EAAI,0CAfJA,EAAI,8CACJuhB,EAAKqsB,WAAa/7B,GAAUA,EAAO4oB,YACnC0W,EAAa,IAAIvI,GACfmI,EACAxvB,EAAK2nB,UACLyH,EACAC,EACAC,EACc,SAASzX,GACrBr9B,GAAKq9B,EAAS,KAAO7X,EAAK2nB,UAAU3tC,WAAa,KACjDgmB,EAAKiwB,UA/sBgB,gBAitBvBP,MAML3W,KAAK,KAAM,SAASnlC,GACnBosB,EAAK+d,KAAK,wBAA0BnqC,GAC/B+7C,GAOHE,QAMV1E,uBAAA,SAAUtT,GACRp5B,EAAI,uCAAyCo5B,GAC7C/mC,KAAKo/C,kBAAkBrY,IAAU,EAC7B/mC,KAAK06C,UACP16C,KAAK06C,UAAUrL,SAEXrvC,KAAK49C,4BACP9P,aAAa9tC,KAAK49C,2BAClB59C,KAAK49C,0BAA4B,MAE/B59C,KAAKy6C,YACPz6C,KAAKy+C,0BAKXpE,oBAAA,SAAOtT,GACLp5B,EAAI,mCAAqCo5B,UAClC/mC,KAAKo/C,kBAAkBrY,GAC1Bt8B,EAAQzK,KAAKo/C,qBACfp/C,KAAK89C,gBA/vBiB,IAgwBjB99C,KAAK06C,WACR16C,KAAK+9C,iBAAiB,KAKpB1D,8BAAR,SAAyBd,GACvB,IAAMrQ,EAAQqQ,GAAY,IAAIvyC,MAAOE,UACrClH,KAAKq/C,oBAAoB,CAAEC,iBAAkBpW,KAGvCmR,qCAAR,WACE,IAAK,IAAI75C,EAAI,EAAGA,EAAIR,KAAK48C,iBAAiBj8C,OAAQH,IAAK,CACrD,IAAM++C,EAAMv/C,KAAK48C,iBAAiBp8C,GAC9B++C,GAAgB,MAAOA,EAAI9C,SAAW8C,EAAIxC,SACxCwC,EAAI7kC,YAAY6kC,EAAI7kC,WAAW,qBAE5B1a,KAAK48C,iBAAiBp8C,GAC7BR,KAAK68C,wBAKyB,IAA9B78C,KAAK68C,uBAA4B78C,KAAK48C,iBAAmB,KAGvDvC,8BAAR,SAAyBxmC,EAAoBgW,GAE3C,IAAIsG,EAIFA,EAHGtG,EAGOA,EAAMnf,IAAI,SAAA80C,GAAK,OAAA5tC,GAAkB4tC,KAAI55C,KAAK,KAF1C,UAIZ,IAAM65C,EAASz/C,KAAKm7C,cAActnC,EAAYsc,GAC1CsvB,GAAUA,EAAO/kC,YAAY+kC,EAAO/kC,WAAW,sBAG7C2/B,2BAAR,SAAsBxmC,EAAoBsc,GACxC,IACIsvB,EADEC,EAAuB,IAAIjsC,GAAKI,GAAY3K,WAElD,GAAIlJ,KAAK86C,QAAQhsB,IAAI4wB,GAAuB,CAC1C,IAAMh1C,EAAM1K,KAAK86C,QAAQ5qC,IAAIwvC,GAC7BD,EAAS/0C,EAAIwF,IAAIigB,GACjBzlB,EAAI2kB,OAAOc,GACM,IAAbzlB,EAAIkkB,MACN5uB,KAAK86C,QAAQzrB,OAAOqwB,QAItBD,OAASt4C,EAEX,OAAOs4C,GAGDpF,4BAAR,SAAuBsF,EAAoBC,GACzCjyC,EAAI,uBAAyBgyC,EAAa,IAAMC,GAChD5/C,KAAKu7C,WAAa,KAClBv7C,KAAKg/C,oBAAqB,EAC1Bh/C,KAAK06C,UAAUrL,QACI,kBAAfsQ,GAAiD,sBAAfA,IAIpC3/C,KAAKm8C,yBAxzB0B,GAyzB3Bn8C,KAAKm8C,yBAEPn8C,KAAK89C,gBAj0B0B,IAq0B/B99C,KAAKi/C,mBAAmBY,2BAKtBxF,oCAAR,SAA+Br5C,GACzBhB,KAAK8/C,uBACP9/C,KAAK8/C,uBAAuB9+C,GAExB,QAASA,GACXyC,QAAQkK,IAAI,aAAe3M,EAAU,IAAE+H,QAAQ,KAAM,kBAKnDsxC,2BAAR,uBAEEr6C,KAAKw7C,cAIL,IAAsB,IAAAuE,EAAA9lC,EAAAja,KAAK86C,QAAQhmB,wCAAU,CAAxC,IAAMqR,cACT,IAAyB,IAAA6Z,YAAA/lC,EAAAksB,EAAQrR,yCAAU,CAAtC,IAAMimB,UACT/6C,KAAKg7C,YAAYD,wMAIrB,IAAK,IAAIv6C,EAAI,EAAGA,EAAIR,KAAK48C,iBAAiBj8C,OAAQH,IAC5CR,KAAK48C,iBAAiBp8C,IAAIR,KAAK88C,SAASt8C,GAG9C,KAAOR,KAAKw8C,0BAA0B77C,QAAQ,CAC5C,IAAM87C,EAAUz8C,KAAKw8C,0BAA0B7K,QAC/C3xC,KAAKu8C,kBACHE,EAAQx+B,OACRw+B,EAAQ5oC,WACR4oC,EAAQh0C,KACRg0C,EAAQ/hC,cAQN2/B,+BAAR,WACE,IAAM9Q,EAAiC,GASvCA,EAAM,UAA4B1lC,GAAYkF,QAAQ,MAAO,MAAQ,EAEjElB,IACF0hC,EAAM,qBAAuB,E9Ej1BV,iBAAdvhC,WAAmD,gBAAzBA,UAAmB,U8Em1BlDuhC,EAAM,yBAA2B,GAEnCvpC,KAAK4pC,YAAYL,IAGX8Q,8BAAR,WACE,IAAM2D,EAASnS,GAAcoU,cAAcC,kBAC3C,OAAOz1C,EAAQzK,KAAKo/C,oBAAsBpB,GA1zB7B3D,+BAA8B,EAK9BA,qBAAoB,MAOnC,YACUxD,EACAsG,EAMAQ,EACA0B,EACAJ,EACA/C,GAXV,MAaE9zC,oBAEA,GAdQb,YAAAsvC,EACAtvC,gBAAA41C,EAMA51C,mBAAAo2C,EACAp2C,sBAAA83C,EACA93C,qBAAA03C,EACA13C,gBAAA20C,EA9DV30C,KAAK8yC,GAAqB8F,8BAClB54C,OAAO6I,EAAW,KAAO7I,EAAK2J,GAAK,KAEnC3J,oBAAmD,GAE1CA,UAGb,IAAImoB,IACAnoB,mBAAqC,GACrCA,uBAAuB,EACvBA,4BAAmD,GACnDA,cAAa,EACbA,kBAtDkB,IAuDlBA,qBAtD0B,IAuD1BA,yBAAuD,KAC/DA,gBAA+B,KAEvBA,4BAA2C,KAE3CA,YAAoB,EAGpBA,iBAAoD,GACpDA,iBAAiB,EAEjBA,YAGG,KAEHA,aAA4B,KAC5BA,sBAAqB,EACrBA,yBAAyB,EAEzBA,oBAAmB,EACnBA,6BAA4C,KAC5CA,iCAAgD,KA6BlD20C,IAAkBj0C,IACpB,MAAM,IAAI/D,MACR,yFAGJqD,EAAKw2C,iBAAiB,GAEtBzS,GAAkB2U,cAAc5yB,GAAG,UAAW9lB,EAAK64C,WAAY74C,IAEpB,IAAvCsvC,EAAU1gC,KAAKiB,QAAQ,YACzBy0B,GAAcoU,cAAc5yB,GAAG,SAAU9lB,EAAK84C,UAAW94C,KCnH/D,WAAwCW,QAAAkyC,IACtCkG,yBAAA,SAAY/W,GACV,MAAM,IAAIrlC,MAAM,4BAoBXo8C,gBAAP,SAAoBz2B,EAAcoZ,GAChC,YAAY97B,IAAR87B,EACK,OAASA,GAEhBn/B,EACE+lB,EAAMC,iBAAiByc,YACvB,kDAEK1c,EAAMhU,KAAK3M,aAwBtBo3C,oBAAA,SACEz2B,EACAgxB,EACA5X,EACAvoB,GAJF,WAMQ7G,EAAagW,EAAMhU,KAAK3M,WAC9BlJ,KAAKitC,KACH,qBAAuBp5B,EAAa,IAAMgW,EAAM2E,mBAIlD,IAAM+xB,EAAWD,GAAmBE,aAAa32B,EAAOoZ,GAClDwd,EAAa,GACnBzgD,KAAK0gD,SAASH,GAAYE,EAE1B,IAAME,EAAwB92B,EAC3BC,iBACA82B,8BAEH5gD,KAAK6gD,aACHhtC,EAAa,QACb8sC,EACA,SAAC79C,EAAO0c,GACN,IAAI/W,EAAO+W,EAEG,MAAV1c,IAEFA,EADA2F,EAAO,MAIK,OAAV3F,GACFyE,EAAK41C,cAActpC,EAAYpL,GAAmB,EAAOw6B,GAGvDz4B,EAAQjD,EAAKm5C,SAAUH,KAAcE,GAUvC/lC,EARK5X,EAEe,KAATA,EACA,oBAEA,cAAgBA,EAJhB,KAOQ,SAO3Bw9C,sBAAA,SAASz2B,EAAcoZ,GACrB,IAAMsd,EAAWD,GAAmBE,aAAa32B,EAAOoZ,UACjDjjC,KAAK0gD,SAASH,IAIvBD,8BAAA,SAAiBt2C,KAaTs2C,0BAAR,SACEzsC,EACA8sC,EACAr5C,GAHF,wBAEEq5C,MAGAA,EAA8B,OAAI,SAElC3gD,KAAKi/C,mBACFC,UAA2B,GAC3BjX,KAAK,SAAA6Y,GACJ,IAAMC,EAAYD,GAAiBA,EAAc1Y,YAC7C2Y,IACFJ,EAA4B,KAAII,GAGlC,IAAM9O,GACH1qC,EAAKsvC,UAAUhgC,OAAS,WAAa,WACtCtP,EAAKsvC,UAAU1gC,KACftC,EACA,OAEAtM,EAAKsvC,UAAU9/B,UC/JzB,SAA4BiqC,GAI1B,IADA,IAAMrqC,EAAS,cACH1N,EAAK9G,GACXxC,MAAMoF,QAAQ5C,GAChBA,EAAMstB,QAAQ,SAAAwxB,GACZtqC,EAAOtU,KACLyR,mBAAmB7K,GAAO,IAAM6K,mBAAmBmtC,MAIvDtqC,EAAOtU,KAAKyR,mBAAmB7K,GAAO,IAAM6K,mBAAmB3R,SARxCqH,EAAAhK,OAAO6+B,QAAQ2iB,GAAfx4C,WAAAA,KAAhB,IAAAc,oBAWX,OAAOqN,EAAOhW,OAAS,IAAMgW,EAAO/Q,KAAK,KAAO,GDiJxCs7C,CAAYP,GAEdp5C,EAAK0lC,KAAK,4BAA8BgF,GACxC,IAAMkP,EAAM,IAAIC,eAChBD,EAAI1O,mBAAqB,WACvB,GAAInrC,GAA+B,IAAnB65C,EAAIhU,WAAkB,CACpC5lC,EAAK0lC,KACH,qBAAuBgF,EAAM,qBAC7BkP,EAAIva,OACJ,YACAua,EAAIE,cAEN,IAAIx2C,EAAM,KACV,GAAkB,KAAds2C,EAAIva,QAAiBua,EAAIva,OAAS,IAAK,CACzC,IACE/7B,EAAMlB,EAASw3C,EAAIE,cACnB,MAAO/+C,GACPoH,GACE,qCACEuoC,EACA,KACAkP,EAAIE,cAGV/5C,EAAS,KAAMuD,QAGI,MAAfs2C,EAAIva,QAAiC,MAAfua,EAAIva,QAC5Bl9B,GACE,sCACEuoC,EACA,YACAkP,EAAIva,QAGVt/B,EAAS65C,EAAIva,QAEft/B,EAAW,OAIf65C,EAAIhO,KAAK,MAAOlB,GAAuB,GACvCkP,EAAIvL,cArJV,YACUiB,EACAsG,EAMA8B,GARV,MAUE72C,2BATQb,YAAAsvC,EACAtvC,gBAAA41C,EAMA51C,qBAAA03C,EA1CF13C,OAAiC6I,EAAW,WAQ5C7I,WAAoC,KES9C,IAAM+5C,GAAmB,qBA2IvBC,sBAAA,WACE,OACGvhD,KAAK62C,UAAUhgC,OAAS,WAAa,WAAa7W,KAAK62C,UAAU1gC,MAOtEorC,kBAAA,WACE,OAAOvhD,KAAK62C,UAAU9/B,WAMxBwqC,wBAAA,WACE,IAGMp2C,EAHanL,KAAKwhD,UAAUpuB,QAChC,IAAI3f,GAAK,2BAEgBrF,OAAoB,EAC/C,OAAO,IAAIpH,MAAOE,UAAYiE,GAMhCo2C,kCAAA,WACE,OzClM8B,SAChCzsB,GAMA,OAFAA,EAASA,GAAU,IACD,UAAIA,EAAkB,YAAK,IAAI9tB,MAAOE,UACjD4tB,EyC2LE2sB,CAAmB,CACxBlI,UAAWv5C,KAAK0hD,gBAOZH,2BAAR,SACE1tC,EACApL,EACAk5C,EACA1e,GAGAjjC,KAAK4hD,kBACL,IAAM/rC,EAAO,IAAIpC,GAAKI,GACtBpL,EAAOzI,KAAK6hD,6BACR7hD,KAAK6hD,6BAA6BhuC,EAAYpL,GAC9CA,EACJ,IAAIsyB,EAAS,GACb,GAAIkI,EACF,GAAI0e,EAAS,CACX,IAAMG,EAAiBp3C,EAAIjC,EAA8B,SAACs5C,GACxD,OAAA5kC,GAAa4kC,KAEfhnB,EAAS/6B,KAAKgiD,gBAAgBC,sBAC5BpsC,EACAisC,EACA7e,OAEG,CACL,IAAMif,EAAa/kC,GAAa1U,GAChCsyB,EAAS/6B,KAAKgiD,gBAAgBG,0BAC5BtsC,EACAqsC,EACAjf,QAGC,GAAI0e,EAAS,CAClB,IAAMloB,EAAkB/uB,EAAIjC,EAA8B,SAACs5C,GACzD,OAAA5kC,GAAa4kC,KAEfhnB,EAAS/6B,KAAKgiD,gBAAgBI,iBAAiBvsC,EAAM4jB,OAChD,CACL,IAAMtR,EAAOhL,GAAa1U,GAC1BsyB,EAAS/6B,KAAKgiD,gBAAgBK,qBAAqBxsC,EAAMsS,GAE3D,IAAI4L,EAAele,EACC,EAAhBklB,EAAOp6B,SAGTozB,EAAe/zB,KAAKsiD,mBAAmBzsC,IAEzC7V,KAAKuiD,YAAYC,0BAA0BzuB,EAAcgH,IAI3DwmB,kCAAA,SAAqBj6C,GACnBtH,KAAK6hD,6BAA+Bv6C,GAG9Bi6C,8BAAR,SAAyBkB,GACvBziD,KAAK0iD,YAAY,YAAaD,IACR,IAAlBA,GACFziD,KAAK2iD,0BAIDpB,iCAAR,SAA4BriB,GAA5B,WACEptB,GAAKotB,EAAS,SAACj2B,EAAa9G,GAC1BoF,EAAKm7C,YAAYz5C,EAAK9G,MAIlBo/C,yBAAR,SAAoB1tC,EAAoB1R,GACtC,IAAM0T,EAAO,IAAIpC,GAAK,UAAYI,GAC5BwI,EAAUc,GAAahb,GAC7BnC,KAAKwhD,UAAUoB,eAAe/sC,EAAMwG,GACpC,IAAM0e,EAAS/6B,KAAK6iD,cAAcR,qBAAqBxsC,EAAMwG,GAC7Drc,KAAKuiD,YAAYC,0BAA0B3sC,EAAMklB,IAG3CwmB,6BAAR,WACE,OAAOvhD,KAAK8iD,gBAGdvB,6BAAA,SACE1rC,EACAktC,EACA59B,EACAzK,GAJF,WAME1a,KAAKitC,KAAK,MAAO,CACfp3B,KAAMA,EAAK3M,WACX/G,MAAO4gD,EACP5qC,SAAUgN,IAKZ,IAAMyK,EAAe5vB,KAAKgjD,uBACpBC,EAAoB9lC,GAAa4lC,EAAQ59B,GACzC9I,EAAUyT,GACdmzB,EACArzB,GAGIgQ,EAAU5/B,KAAKkjD,kBACfnoB,EAAS/6B,KAAKgiD,gBAAgBmB,mBAClCttC,EACAwG,EACAujB,GACA,GAEF5/B,KAAKuiD,YAAYjY,YAAYvP,GAC7B/6B,KAAK2pC,QAAQ4V,IACX1pC,EAAK3M,WACL+5C,EAAkB70C,KAAgB,GAClC,SAACw4B,EAAQoW,GACP,IAAMoG,EAAqB,OAAXxc,EACXwc,GACH15C,GAAK,UAAYmM,EAAO,YAAc+wB,GAGxC,IAAMyc,EAAc97C,EAAKy6C,gBAAgBjrB,aACvC6I,GACCwjB,GAEH77C,EAAKg7C,YAAYC,0BAA0B3sC,EAAMwtC,GACjD97C,EAAK+7C,uBAAuB5oC,EAAYksB,EAAQoW,KAGpD,IAAMjpB,EAAe/zB,KAAKujD,mBAAmB1tC,GAC7C7V,KAAKsiD,mBAAmBvuB,GAExB/zB,KAAKuiD,YAAYC,0BAA0BzuB,EAAc,KAG3DwtB,oBAAA,SACE1rC,EACA2tC,EACA9oC,GAHF,WAKE1a,KAAKitC,KAAK,SAAU,CAAEp3B,KAAMA,EAAK3M,WAAY/G,MAAOqhD,IAGpD,IAAIC,GAAQ,EACN7zB,EAAe5vB,KAAKgjD,uBACpBvpB,EAAyC,GAU/C,GATA3nB,GAAK0xC,EAAiB,SAACE,EAAoBC,GACzCF,GAAQ,EACR,IAAMR,EAAoB9lC,GAAawmC,GACvClqB,EAAgBiqB,GAAc5zB,GAC5BmzB,EACArzB,KAIC6zB,EAoCH91C,EAAI,wDACJ3N,KAAKsjD,uBAAuB5oC,EAAY,UArC9B,CACV,IAAMkpC,EAAU5jD,KAAKkjD,kBACfnoB,EAAS/6B,KAAKgiD,gBAAgB6B,eAClChuC,EACA4jB,EACAmqB,GAEF5jD,KAAKuiD,YAAYjY,YAAYvP,GAC7B/6B,KAAK2pC,QAAQ/S,MACX/gB,EAAK3M,WACLs6C,EACA,SAAC5c,EAAQoW,GACP,IAAMoG,EAAqB,OAAXxc,EACXwc,GACH15C,GAAK,aAAemM,EAAO,YAAc+wB,GAG3C,IAAMyc,EAAc97C,EAAKy6C,gBAAgBjrB,aACvC6sB,GACCR,GAEGrvB,EACiB,EAArBsvB,EAAY1iD,OAAa4G,EAAK+6C,mBAAmBzsC,GAAQA,EAC3DtO,EAAKg7C,YAAYC,0BAA0BzuB,EAAcsvB,GACzD97C,EAAK+7C,uBAAuB5oC,EAAYksB,EAAQoW,KAIpDlrC,GAAK0xC,EAAiB,SAAChZ,GACrB,IAAMzW,EAAexsB,EAAKg8C,mBAAmB1tC,EAAKT,MAAMo1B,IACxDjjC,EAAK+6C,mBAAmBvuB,KAI1B/zB,KAAKuiD,YAAYC,0BAA0B3sC,EAAM,MAU7C0rC,oCAAR,WAAA,WACEvhD,KAAKitC,KAAK,sBAEV,IAAMrd,EAAe5vB,KAAKgjD,uBACpBc,EzC7W8B,SACtC30B,EACAS,GAEA,IAAMm0B,EAAe,IAAIr1B,GAOzB,OANAS,EAAKK,YAAY,IAAI/b,GAAK,IAAK,SAASoC,EAAMmG,GAC5C+nC,EAAa90B,SACXpZ,EACAia,GAA6B9T,EAAM4T,MAGhCm0B,EyCkW4BC,CAC/BhkD,KAAK6sC,cACLjd,GAEEmL,EAAkB,GAEtB+oB,EAAyBt0B,YAAY/b,GAAKkd,MAAO,SAAC9a,EAAMsS,GACtD4S,EAASA,EAAO/3B,OACduE,EAAKy6C,gBAAgBK,qBAAqBxsC,EAAMsS,IAElD,IAAM4L,EAAexsB,EAAKg8C,mBAAmB1tC,GAC7CtO,EAAK+6C,mBAAmBvuB,KAG1B/zB,KAAK6sC,cAAgB,IAAIne,GACzB1uB,KAAKuiD,YAAYC,0BAA0B/uC,GAAKkd,MAAOoK,IAGzDwmB,gCAAA,SACE1rC,EACA6E,GAFF,WAIE1a,KAAK2pC,QAAQ9uB,mBAAmBhF,EAAK3M,WAAY,SAAC09B,EAAQoW,GACzC,OAAXpW,GACFr/B,EAAKslC,cAAczd,OAAOvZ,GAE5BtO,EAAK+7C,uBAAuB5oC,EAAYksB,EAAQoW,MAIpDuE,6BAAA,SACE1rC,EACA1T,EACAuY,GAHF,WAKQ2B,EAAUc,GAAahb,GAC7BnC,KAAK2pC,QAAQsa,gBACXpuC,EAAK3M,WACLmT,EAAQjO,KAAgB,GACxB,SAACw4B,EAAQoW,GACQ,OAAXpW,GACFr/B,EAAKslC,cAAc5d,SAASpZ,EAAMwG,GAEpC9U,EAAK+7C,uBAAuB5oC,EAAYksB,EAAQoW,MAKtDuE,yCAAA,SACE1rC,EACA1T,EACAgW,EACAuC,GAJF,WAMQ2B,EAAUc,GAAahb,EAAOgW,GACpCnY,KAAK2pC,QAAQsa,gBACXpuC,EAAK3M,WACLmT,EAAQjO,KAAgB,GACxB,SAACw4B,EAAQoW,GACQ,OAAXpW,GACFr/B,EAAKslC,cAAc5d,SAASpZ,EAAMwG,GAEpC9U,EAAK+7C,uBAAuB5oC,EAAYksB,EAAQoW,MAKtDuE,gCAAA,SACE1rC,EACA2tC,EACA9oC,GAHF,WAKE,GAAIjQ,EAAQ+4C,GAKV,OAJA71C,EACE,4EAEF3N,KAAKsjD,uBAAuB5oC,EAAY,MAI1C1a,KAAK2pC,QAAQua,kBACXruC,EAAK3M,WACLs6C,EACA,SAAC5c,EAAQoW,GACQ,OAAXpW,GACF90B,GAAK0xC,EAAiB,SAAChmC,EAAmBE,GACxC,IAAMC,EAAeR,GAAaO,GAClCnW,EAAKslC,cAAc5d,SAASpZ,EAAKT,MAAMoI,GAAYG,KAGvDpW,EAAK+7C,uBAAuB5oC,EAAYksB,EAAQoW,MAKtDuE,sCAAA,SAAyB13B,EAAcP,GACrC,IAAIyR,EAEFA,EAD4B,UAA1BlR,EAAMhU,KAAKvB,WACJtU,KAAK6iD,cAAc7kB,qBAC1BnU,EACAP,GAGOtpB,KAAKgiD,gBAAgBhkB,qBAC5BnU,EACAP,GAGJtpB,KAAKuiD,YAAY4B,kBAAkBt6B,EAAMhU,KAAMklB,IAGjDwmB,yCAAA,SACE13B,EACAP,GAIA,IAAIyR,EAEFA,EAD4B,UAA1BlR,EAAMhU,KAAKvB,WACJtU,KAAK6iD,cAAcrkB,wBAC1B3U,EACAP,GAGOtpB,KAAKgiD,gBAAgBxjB,wBAC5B3U,EACAP,GAGJtpB,KAAKuiD,YAAY4B,kBAAkBt6B,EAAMhU,KAAMklB,IAGjDwmB,uBAAA,WACMvhD,KAAKokD,uBACPpkD,KAAKokD,sBAAsBjF,UAAUmC,KAIzCC,oBAAA,WACMvhD,KAAKokD,uBACPpkD,KAAKokD,sBAAsBC,OAAO/C,KAItCC,mBAAA,SAAM+C,GACJ,gBADIA,MACmB,oBAAZ7gD,QAAX,CAEA,IAAI8lC,EAIFA,EAHE+a,GACGtkD,KAAKwpC,iBACRxpC,KAAKwpC,eAAiB,IAAIT,GAAc/oC,KAAK2vC,SACvC3vC,KAAKwpC,eAAet5B,OAEpBlQ,KAAK2vC,OAAOz/B,MAGtB,IAAMq0C,EAAc/kD,OAAO+J,KAAKggC,GAAOib,OACrC,SAACC,EAAeC,GACd,OAAAvyC,KAAK2D,IAAI4uC,EAAa/jD,OAAQ8jD,IAChC,GAGF3yC,GAAKy3B,EAAO,SAACH,EAAcjnC,GAGzB,IAFA,IAAIwiD,EAAavb,EAER5oC,EAAI4oC,EAAKzoC,OAAQH,EAAI+jD,EAAc,EAAG/jD,IAC7CmkD,GAAc,IAEhBlhD,QAAQkK,IAAIg3C,EAAaxiD,OAI7Bo/C,mCAAA,SAAsBqD,GACpB5kD,KAAK2vC,OAAOC,iBAAiBgV,GAC7B5kD,KAAK6kD,eAAeC,YAAYF,IAG1BrD,kBAAR,eAAa,aAAA/4C,mBAAAA,IAAAwH,kBACX,IAAIK,EAAS,GACTrQ,KAAKokD,wBACP/zC,EAASrQ,KAAKokD,sBAAsBlzC,GAAK,KAE3CvD,kBAAI0C,GAAWL,KAGjBuxC,oCAAA,SACEj6C,EACAs/B,EACAoW,GAEI11C,GACF0L,GAAe,WACb,GAAc,MAAV4zB,EACFt/B,EAAS,UACJ,CACL,IAAMa,GAAQy+B,GAAU,SAASI,cAC7BhjC,EAAUmE,EACV60C,IAAah5C,GAAW,KAAOg5C,GAEnC,IAAMl6C,EAAQ,IAAIoB,MAAMF,GACvBlB,EAAcqF,KAAOA,EACtBb,EAASxE,OAMjBtD,sBAAI+hD,6BAAJ,WACE,OAAOvhD,KAAK+kD,aAAe/kD,KAAK+kD,WAAa,IAAIC,GAAShlD,4CAviB5D,YACS62C,EACPoO,EACOC,GAHT,IAKMC,SAYJ,GAhBOnlD,eAAA62C,EAEA72C,SAAAklD,EA5BTllD,qBAAkB,EAKVA,oBAAuC,KACvCA,iBAAc,IAAI+pC,GAClB/pC,kBAAe,EAOfA,kCAEG,KAIHA,mBAAgB,IAAI0uB,GAG5B1uB,2BAAqD,KAYjDmlD,EAHmB,oBAAZvR,SACPA,QAAQE,IAAI1iC,IAEQ,IAAIi3B,GAA0B6c,GAE9B,IAAIpd,GAA0Bod,GAGpDllD,KAAK2vC,OAASjH,GAAa+H,cAAcoG,GAErCoO,GrEihBC,IAZc,iBAAXn9C,QACNA,OAAkB,WAClBA,OAAkB,UAAa,WACjC,IAOUs9C,OACR,4FqE/gBAplD,KAAK2pC,QAAU,IAAI2W,GACjBtgD,KAAK62C,UACL72C,KAAKm9C,cAAcvtC,KAAK5P,MACxBmlD,GAIFlyC,WAAWjT,KAAK29C,iBAAiB/tC,KAAK5P,MAAM,GAAO,OAC9C,CACL,IAAMqlD,EAAeH,EAAI/c,QAAsC,6BAE/D,GAAI,MAAOkd,EAAuD,CAChE,GAA4B,iBAAjBA,EACT,MAAM,IAAInhD,MACR,sEAGJ,IACE4F,EAAUu7C,GACV,MAAO/iD,GACP,MAAM,IAAI4B,MAAM,kCAAoC5B,IAIxDtC,KAAKokD,sBAAwB,IAAI/J,GAC/Br6C,KAAK62C,UACL72C,KAAKm9C,cAAcvtC,KAAK5P,MACxBA,KAAK29C,iBAAiB/tC,KAAK5P,MAC3BA,KAAKq/C,oBAAoBzvC,KAAK5P,MAC9BmlD,EACAE,GAGFrlD,KAAK2pC,QAAU3pC,KAAKokD,sBAGtBe,EAAkBG,uBAAuB,SAAAt7C,GACvCzC,EAAKoiC,QAAQ4b,iBAAiBv7C,KAKhChK,KAAK6kD,eAAiBnc,GAAa8c,oBACjC3O,EACA,WAAM,OAAA,IAAIxN,GAAc9hC,EAAKooC,OAAQpoC,EAAKoiC,WAG5C3pC,KAAKylD,qBAGLzlD,KAAKwhD,UAAY,IAAI7Z,GACrB3nC,KAAK6iD,cAAgB,IAAIvgB,GAAS,CAChC8C,eAAgB,SAACvb,EAAOoZ,EAAK4X,EAAengC,GAC1C,IAAIgrC,EAAsB,GACpB1pC,EAAOzU,EAAKi6C,UAAUpuB,QAAQvJ,EAAMhU,MAY1C,OATKmG,EAAKvR,YACRi7C,EAAan+C,EAAKs7C,cAAcR,qBAC9Bx4B,EAAMhU,KACNmG,GAEF/I,WAAW,WACTyH,EAAW,OACV,IAEEgrC,GAETlgB,cAAe,eAEjBxlC,KAAK0iD,YAAY,aAAa,GAE9B1iD,KAAKgiD,gBAAkB,IAAI1f,GAAS,CAClC8C,eAAgB,SAACvb,EAAOoZ,EAAK4X,EAAengC,GAM1C,OALAnT,EAAKoiC,QAAQ8V,OAAO51B,EAAOgxB,EAAe5X,EAAK,SAAC2D,EAAQn+B,GACtD,IAAMsyB,EAASrgB,EAAWksB,EAAQn+B,GAClClB,EAAKg7C,YAAYC,0BAA0B34B,EAAMhU,KAAMklB,KAGlD,IAETyK,cAAe,SAAC3b,EAAOoZ,GACrB17B,EAAKoiC,QAAQgc,SAAS97B,EAAOoZ,MC3JrC,QA0CE2iB,0BAAA,WACE,OAAO5lD,KAAK6lD,YAMdD,wBAAA,WACE,OAAO5lD,KAAK8lD,UAOdF,qBAAA,SAAQ5pC,GACN,OACEhc,KAAK+oB,OAAO5M,QAAQnc,KAAK+lD,eAAgB/pC,IAAS,GAClDhc,KAAK+oB,OAAO5M,QAAQH,EAAMhc,KAAKgmD,eAAiB,GAOpDJ,yBAAA,SACEz9B,EACAlf,EACAooB,EACA0C,EACAhtB,EACAitB,GAKA,OAHKh0B,KAAK48B,QAAQ,IAAI7gB,GAAU9S,EAAKooB,MACnCA,EAAWxM,GAAapH,YAEnBzd,KAAKimD,eAAeloC,YACzBoK,EACAlf,EACAooB,EACA0C,EACAhtB,EACAitB,IAOJ4xB,4BAAA,SACE/xB,EACAW,EACAR,GAEIQ,EAAQxX,eAEVwX,EAAU3P,GAAapH,YAEzB,IAAIuV,EAAWwB,EAAQD,UAAUv0B,KAAK+oB,QAEtCiK,EAAWA,EAASpV,eAAeiH,GAAapH,YAChD,IAAMyoC,EAAOlmD,KAMb,OALAw0B,EAAQ9O,aAAa1G,GAAgB,SAAS/V,EAAKyU,GAC5CwoC,EAAKtpB,QAAQ,IAAI7gB,GAAU9S,EAAKyU,MACnCsV,EAAWA,EAASnV,qBAAqB5U,EAAK4b,GAAapH,eAGxDzd,KAAKimD,eAAe/tB,eACzBrE,EACAb,EACAgB,IAOJ4xB,4BAAA,SAAe/xB,EAAe1O,GAE5B,OAAO0O,GAMT+xB,0BAAA,WACE,OAAO,GAMTA,8BAAA,WACE,OAAO5lD,KAAKimD,gBAMdL,sBAAA,WACE,OAAO5lD,KAAK+oB,QAQC68B,iBAAf,SAA6BjvC,GAC3B,GAAIA,EAAO6U,WAAY,CACrB,IAAM26B,EAAYxvC,EAAOmV,oBACzB,OAAOnV,EAAOoT,WAAWq8B,SAASzvC,EAAO8U,qBAAsB06B,GAE/D,OAAOxvC,EAAOoT,WAAWxD,WASdq/B,eAAf,SAA2BjvC,GACzB,GAAIA,EAAO+U,SAAU,CACnB,IAAM26B,EAAU1vC,EAAOoV,kBACvB,OAAOpV,EAAOoT,WAAWq8B,SAASzvC,EAAOgV,mBAAoB06B,GAE7D,OAAO1vC,EAAOoT,WAAWpD,eAzI7B,YAAYhQ,GACV3W,KAAKimD,eAAiB,IAAInyB,GAAcnd,EAAOoT,YAC/C/pB,KAAK+oB,OAASpS,EAAOoT,WACrB/pB,KAAK6lD,WAAaD,GAAaU,cAAc3vC,GAC7C3W,KAAK8lD,SAAWF,GAAaW,YAAY5vC,GClC7C,QA0CE6vC,yBAAA,SACEr+B,EACAlf,EACAooB,EACA0C,EACAhtB,EACAitB,GAKA,OAHKh0B,KAAKymD,cAAc7pB,QAAQ,IAAI7gB,GAAU9S,EAAKooB,MACjDA,EAAWxM,GAAapH,YAEtB0K,EAAKlD,kBAAkBhc,GAAK8V,OAAOsS,GAE9BlJ,EACEA,EAAKc,cAAgBjpB,KAAK0mD,OAC5B1mD,KAAKymD,cACTxtB,mBACAlb,YACCoK,EACAlf,EACAooB,EACA0C,EACAhtB,EACAitB,GAGGh0B,KAAK2mD,sBACVx+B,EACAlf,EACAooB,EACAtqB,EACAitB,IAQNwyB,4BAAA,SACE3yB,EACAW,EACAR,GAEA,IAAIhB,EACJ,GAAIwB,EAAQxX,cAAgBwX,EAAQ/pB,UAElCuoB,EAAWnO,GAAapH,WAAW8W,UAAUv0B,KAAK+oB,aAElD,GACgB,EAAd/oB,KAAK0mD,OAAalyB,EAAQvL,eAC1BuL,EAAQP,UAAUj0B,KAAK+oB,QACvB,CAEAiK,EAAWnO,GAAapH,WAAW8W,UAAUv0B,KAAK+oB,QAElD,IAAIjnB,SAEFA,EADE9B,KAAK4mD,SACKpyB,EAAyB9N,uBACnC1mB,KAAKymD,cAAcT,aACnBhmD,KAAK+oB,QAGKyL,EAAyBlO,gBACnCtmB,KAAKymD,cAAcV,eACnB/lD,KAAK+oB,QAIT,IADA,IAAIhJ,EAAQ,EACLje,EAAS+kD,WAAa9mC,EAAQ/f,KAAK0mD,QAAQ,CAChD,IAAMjlD,EAAOK,EAASoiB,UAStB,KAPIlkB,KAAK4mD,SAEL5mD,KAAK+oB,OAAO5M,QAAQnc,KAAKymD,cAAcV,eAAgBtkD,IAAS,EAGhEzB,KAAK+oB,OAAO5M,QAAQ1a,EAAMzB,KAAKymD,cAAcT,eAAiB,GAOhE,MAJAhzB,EAAWA,EAASnV,qBAAqBpc,EAAKmM,KAAMnM,EAAKua,MACzD+D,SAMC,CAILiT,GAFAA,EAAWwB,EAAQD,UAAUv0B,KAAK+oB,SAEdnL,eAClBiH,GAAapH,YAEf,IAAI+I,SACAI,SACA9R,SAEJ,GADIhT,SACA9B,KAAK4mD,SAAU,CACjB9kD,EAAWkxB,EAAS8zB,mBAAmB9mD,KAAK+oB,QAC5CvC,EAAYxmB,KAAKymD,cAAcT,aAC/Bp/B,EAAU5mB,KAAKymD,cAAcV,eAC7B,IAAMgB,EAAe/mD,KAAK+oB,OAAO3E,aACjCtP,EAAM,SAACvJ,EAAchM,GAAiB,OAAAwnD,EAAaxnD,EAAGgM,SAEtDzJ,EAAWkxB,EAAShP,YAAYhkB,KAAK+oB,QACrCvC,EAAYxmB,KAAKymD,cAAcV,eAC/Bn/B,EAAU5mB,KAAKymD,cAAcT,aAC7BlxC,EAAM9U,KAAK+oB,OAAO3E,aAGhBrE,EAAQ,EAEZ,IAFA,IACIinC,GAAiB,EACdllD,EAAS+kD,WACVplD,EAAOK,EAASoiB,WACf8iC,GAAkBlyC,EAAI0R,EAAW/kB,IAAS,IAE7CulD,GAAiB,GAGjBA,GAAkBjnC,EAAQ/f,KAAK0mD,QAAU5xC,EAAIrT,EAAMmlB,IAAY,EAE/D7G,IAEAiT,EAAWA,EAASnV,qBAClBpc,EAAKmM,KACLiX,GAAapH,YAMvB,OAAOzd,KAAKymD,cACTxtB,mBACAf,eAAerE,EAASb,EAAUgB,IAMvCwyB,4BAAA,SAAe3yB,EAAe1O,GAE5B,OAAO0O,GAMT2yB,0BAAA,WACE,OAAO,GAMTA,8BAAA,WACE,OAAOxmD,KAAKymD,cAAcxtB,oBAM5ButB,sBAAA,WACE,OAAOxmD,KAAK+oB,QAYNy9B,mCAAR,SACEr+B,EACA0G,EACAmC,EACAjqB,EACAkgD,GAGA,IAAInyC,EACJ,GAAI9U,KAAK4mD,SAAU,CACjB,IAAMM,EAAWlnD,KAAK+oB,OAAO3E,aAC7BtP,EAAM,SAACvJ,EAAchM,GAAiB,OAAA2nD,EAAS3nD,EAAGgM,SAElDuJ,EAAM9U,KAAK+oB,OAAO3E,aAEpB,IAAMsW,EAAgBvS,EACtBrkB,EAAO42B,EAAczR,eAAiBjpB,KAAK0mD,OAAQ,IACnD,IAAMS,EAAoB,IAAIprC,GAAU8S,EAAUmC,GAC5Co2B,EAAiBpnD,KAAK4mD,SACxBlsB,EAAc2sB,cAAcrnD,KAAK+oB,QAChC2R,EAAc4sB,aAAatnD,KAAK+oB,QAC/Bw+B,EAAUvnD,KAAKymD,cAAc7pB,QAAQuqB,GAC3C,GAAIzsB,EAAc9H,SAAS/D,GAAW,CAOpC,IANA,IAAM24B,EAAe9sB,EAAczV,kBAAkB4J,GACjDgD,EAAY9qB,EAAO0gD,mBACrBznD,KAAK+oB,OACLq+B,EACApnD,KAAK4mD,UAGQ,MAAb/0B,IACCA,EAAUjkB,MAAQihB,GAAY6L,EAAc9H,SAASf,EAAUjkB,QAKhEikB,EAAY9qB,EAAO0gD,mBACjBznD,KAAK+oB,OACL8I,EACA7xB,KAAK4mD,UAGT,IAAMc,EACS,MAAb71B,EAAoB,EAAI/c,EAAI+c,EAAWs1B,GAGzC,GADEI,IAAYv2B,EAAUvmB,WAA4B,GAAfi9C,EAOnC,OALyB,MAArBT,GACFA,EAAkB9yB,iBAChBd,GAAOiB,mBAAmBzF,EAAUmC,EAAWw2B,IAG5C9sB,EAAc7c,qBAAqBgR,EAAUmC,GAE3B,MAArBi2B,GACFA,EAAkB9yB,iBAChBd,GAAOe,mBAAmBvF,EAAU24B,IAGxC,IAAM3vB,EAAgB6C,EAAc7c,qBAClCgR,EACAhK,GAAapH,YAIf,OADe,MAAboU,GAAqB7xB,KAAKymD,cAAc7pB,QAAQ/K,IAEvB,MAArBo1B,GACFA,EAAkB9yB,iBAChBd,GAAOgB,iBAAiBxC,EAAUjkB,KAAMikB,EAAU7V,OAG/C6b,EAAcha,qBACnBgU,EAAUjkB,KACVikB,EAAU7V,OAGL6b,EAGN,OAAI7G,EAAUvmB,UAEZ0d,EACEo/B,GACqC,GAA1CzyC,EAAIsyC,EAAgBD,IACG,MAArBF,IACFA,EAAkB9yB,iBAChBd,GAAOe,mBAAmBgzB,EAAex5C,KAAMw5C,EAAeprC,OAEhEirC,EAAkB9yB,iBAChBd,GAAOgB,iBAAiBxF,EAAUmC,KAG/B0J,EACJ7c,qBAAqBgR,EAAUmC,GAC/BnT,qBAAqBupC,EAAex5C,KAAMiX,GAAapH,aAKrD0K,OA5RX,YAAYxR,GACV3W,KAAKymD,cAAgB,IAAIb,GAAajvC,GACtC3W,KAAK+oB,OAASpS,EAAOoT,WACrB/pB,KAAK0mD,OAAS/vC,EAAOgxC,WACrB3nD,KAAK4mD,UAAYjwC,EAAOixC,iBCpC5B,QA6DEC,sBAAA,WACE,OAAO7nD,KAAK8nD,WAMdD,4BAAA,WACE,MAAuB,KAAnB7nD,KAAK+nD,UAKA/nD,KAAK8nD,UAGV9nD,KAAK+nD,YAAcF,GAAYG,yBAAyBC,gBAS9DJ,gCAAA,WAEE,OADA/jD,EAAO9D,KAAK8nD,UAAW,oCAChB9nD,KAAKkoD,kBAQdL,+BAAA,WAEE,OADA/jD,EAAO9D,KAAK8nD,UAAW,oCACnB9nD,KAAKmoD,cACAnoD,KAAKooD,gBAEL92C,IAOXu2C,oBAAA,WACE,OAAO7nD,KAAKqoD,SAOdR,8BAAA,WAEE,OADA/jD,EAAO9D,KAAKqoD,QAAS,kCACdroD,KAAKsoD,gBAQdT,6BAAA,WAEE,OADA/jD,EAAO9D,KAAKqoD,QAAS,kCACjBroD,KAAKuoD,YACAvoD,KAAKwoD,cAELj3C,IAOXs2C,sBAAA,WACE,OAAO7nD,KAAKyoD,WAMdZ,8BAAA,WACE,OAAO7nD,KAAKyoD,WAAgC,KAAnBzoD,KAAK+nD,WAOhCF,sBAAA,WAEE,OADA/jD,EAAO9D,KAAKyoD,UAAW,oCAChBzoD,KAAK0mD,QAMdmB,sBAAA,WACE,OAAO7nD,KAAK+oB,QAON8+B,mBAAR,WACE,IAAMznC,EAAO,IAAIynC,GAajB,OAZAznC,EAAKqoC,UAAYzoD,KAAKyoD,UACtBroC,EAAKsmC,OAAS1mD,KAAK0mD,OACnBtmC,EAAK0nC,UAAY9nD,KAAK8nD,UACtB1nC,EAAK8nC,iBAAmBloD,KAAKkoD,iBAC7B9nC,EAAK+nC,cAAgBnoD,KAAKmoD,cAC1B/nC,EAAKgoC,gBAAkBpoD,KAAKooD,gBAC5BhoC,EAAKioC,QAAUroD,KAAKqoD,QACpBjoC,EAAKkoC,eAAiBtoD,KAAKsoD,eAC3BloC,EAAKmoC,YAAcvoD,KAAKuoD,YACxBnoC,EAAKooC,cAAgBxoD,KAAKwoD,cAC1BpoC,EAAK2I,OAAS/oB,KAAK+oB,OACnB3I,EAAK2nC,UAAY/nD,KAAK+nD,UACf3nC,GAOTynC,mBAAA,SAAMa,GACJ,IAAM96B,EAAY5tB,KAAK2oD,QAIvB,OAHA/6B,EAAU66B,WAAY,EACtB76B,EAAU84B,OAASgC,EACnB96B,EAAUm6B,UAAY,GACfn6B,GAOTi6B,0BAAA,SAAaa,GACX,IAAM96B,EAAY5tB,KAAK2oD,QAIvB,OAHA/6B,EAAU66B,WAAY,EACtB76B,EAAU84B,OAASgC,EACnB96B,EAAUm6B,UAAYF,GAAYG,yBAAyBC,eACpDr6B,GAOTi6B,yBAAA,SAAYa,GACV,IAAM96B,EAAY5tB,KAAK2oD,QAIvB,OAHA/6B,EAAU66B,WAAY,EACtB76B,EAAU84B,OAASgC,EACnB96B,EAAUm6B,UAAYF,GAAYG,yBAAyBY,gBACpDh7B,GAQTi6B,qBAAA,SAAQnrC,EAAiBzT,GACvB,IAAM2kB,EAAY5tB,KAAK2oD,QAavB,OAZA/6B,EAAUk6B,WAAY,OACH3gD,IAAfuV,IACFA,EAAa,MAEfkR,EAAUs6B,iBAAmBxrC,EAClB,MAAPzT,GACF2kB,EAAUu6B,eAAgB,EAC1Bv6B,EAAUw6B,gBAAkBn/C,IAE5B2kB,EAAUu6B,eAAgB,EAC1Bv6B,EAAUw6B,gBAAkB,IAEvBx6B,GAQTi6B,mBAAA,SAAMnrC,EAAiBzT,GACrB,IAAM2kB,EAAY5tB,KAAK2oD,QAavB,OAZA/6B,EAAUy6B,SAAU,OACDlhD,IAAfuV,IACFA,EAAa,MAEfkR,EAAU06B,eAAiB5rC,OACfvV,IAAR8B,GACF2kB,EAAU26B,aAAc,EACxB36B,EAAU46B,cAAgBv/C,IAE1B2kB,EAAU26B,aAAc,EACxB36B,EAAU46B,cAAgB,IAErB56B,GAOTi6B,qBAAA,SAAQ7pC,GACN,IAAM4P,EAAY5tB,KAAK2oD,QAEvB,OADA/6B,EAAU7E,OAAS/K,EACZ4P,GAMTi6B,4BAAA,WACE,IAAMgB,EAA0BhB,GAAYG,yBACtCz9C,EAA4B,GAalC,GAZIvK,KAAK8nD,YACPv9C,EAAIs+C,EAAwBC,mBAAqB9oD,KAAKkoD,iBAClDloD,KAAKmoD,gBACP59C,EAAIs+C,EAAwBE,kBAAoB/oD,KAAKooD,kBAGrDpoD,KAAKqoD,UACP99C,EAAIs+C,EAAwBG,iBAAmBhpD,KAAKsoD,eAChDtoD,KAAKuoD,cACPh+C,EAAIs+C,EAAwBI,gBAAkBjpD,KAAKwoD,gBAGnDxoD,KAAKyoD,UAAW,CAClBl+C,EAAIs+C,EAAwBK,OAASlpD,KAAK0mD,OAC1C,IAAIyC,EAAWnpD,KAAK+nD,UACH,KAAboB,IAEAA,EADEnpD,KAAK4nD,iBACIiB,EAAwBZ,eAExBY,EAAwBD,iBAGvCr+C,EAAIs+C,EAAwBO,WAAaD,EAM3C,OAHInpD,KAAK+oB,SAAW/J,KAClBzU,EAAIs+C,EAAwBQ,OAASrpD,KAAK+oB,OAAO7f,YAE5CqB,GAMTs9C,0BAAA,WACE,QAAS7nD,KAAK8nD,WAAa9nD,KAAKqoD,SAAWroD,KAAKyoD,YAMlDZ,uBAAA,WACE,OAAO7nD,KAAKm8B,gBAAkBn8B,KAAK+oB,QAAU/J,IAM/C6oC,2BAAA,WACE,OAAI7nD,KAAKm8B,eACA,IAAIrI,GAAc9zB,KAAK+pB,YACrB/pB,KAAKgsB,WACP,IAAIw6B,GAAcxmD,MAElB,IAAI4lD,GAAa5lD,OAS5B6nD,yCAAA,WACE,IAOIh6B,EAPEy7B,EAAiBzB,GAAY0B,sBAC7BC,EAAuC,GAE7C,OAAIxpD,KAAKumC,cAMP1Y,EADE7tB,KAAK+oB,SAAW/J,GACRsqC,EAAetqC,eAChBhf,KAAK+oB,SAAWhB,GACfuhC,EAAevhC,YAChB/nB,KAAK+oB,SAAWnM,GACf0sC,EAAe1sC,WAEzB9Y,EAAO9D,KAAK+oB,kBAAkBb,GAAW,4BAC/BloB,KAAK+oB,OAAO7f,YAExBsgD,EAAGF,EAAeG,UAAY3/C,EAAU+jB,GAEpC7tB,KAAK8nD,YACP0B,EAAGF,EAAeI,UAAY5/C,EAAU9J,KAAKkoD,kBACzCloD,KAAKmoD,gBACPqB,EAAGF,EAAeI,WAAa,IAAM5/C,EAAU9J,KAAKooD,mBAIpDpoD,KAAKqoD,UACPmB,EAAGF,EAAeK,QAAU7/C,EAAU9J,KAAKsoD,gBACvCtoD,KAAKuoD,cACPiB,EAAGF,EAAeK,SAAW,IAAM7/C,EAAU9J,KAAKwoD,iBAIlDxoD,KAAKyoD,YACHzoD,KAAK4nD,iBACP4B,EAAGF,EAAeM,gBAAkB5pD,KAAK0mD,OAEzC8C,EAAGF,EAAeO,eAAiB7pD,KAAK0mD,SAlCnC8C,GAxUa3B,4BAA2B,CACjDiB,kBAAmB,KACnBC,iBAAkB,KAClBC,gBAAiB,KACjBC,eAAgB,KAChBC,MAAO,IACPE,UAAW,KACXnB,eAAgB,IAChBW,gBAAiB,IACjBS,MAAO,KASexB,yBAAwB,CAC9C4B,SAAU,UACVzqC,eAAgB,YAChB+I,YAAa,SACbnL,UAAW,OACX8sC,SAAU,UACVC,OAAQ,QACRC,eAAgB,eAChBC,cAAe,eAQDhC,WAAU,IAAIA,OAxDhC,cACU7nD,gBAAY,EACZA,gBAAY,EACZA,oBAAgB,EAChBA,cAAU,EACVA,kBAAc,EAEdA,YAAS,EACTA,eAAY,GACZA,sBAA+B,KAC/BA,qBAAkB,GAClBA,oBAA6B,KAC7BA,mBAAgB,GAEhBA,YAASgf,cCNY9W,QAAAmjB,IA2B7By+B,oBAAA,WAGE,OAFA39C,EAAiB,gBAAiB,EAAG,EAAGzL,UAAUC,QAE9CX,KAAK6V,KAAKpL,UAAkB,KACpBzK,KAAK6V,KAAK6C,WAOxBoxC,mBAAA,SAAMj2C,GAUJ,OATA1H,EAAiB,kBAAmB,EAAG,EAAGzL,UAAUC,QAC1B,iBAAfkT,EACTA,EAAa3N,OAAO2N,GACTA,aAAsBJ,KACJ,OAAzBzT,KAAK6V,KAAKvB,WpE+SkB,SACpClI,EACAM,EACAmH,EACAlH,GAIEkH,EAFEA,GAEWA,EAAW9K,QAAQ,mBAAoB,KAGtDmQ,GAAmB9M,EAAQM,EAAgBmH,EAAYlH,GoEzTjDo9C,CAAuB,kBAAmB,EAAGl2C,GAAY,GACtDqF,GAAmB,kBAAmB,EAAGrF,GAAY,IAGrD,IAAIi2C,GAAU9pD,KAAKosB,KAAMpsB,KAAK6V,KAAKT,MAAMvB,KAIlDi2C,uBAAA,WACE39C,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QAErD,IAAMqpD,EAAahqD,KAAK6V,KAAK0jB,SAC7B,OAAsB,OAAfywB,EAAsB,KAAO,IAAIF,GAAU9pD,KAAKosB,KAAM49B,IAI/DF,qBAAA,WACE39C,EAAiB,iBAAkB,EAAG,EAAGzL,UAAUC,QAGnD,IADA,IAAIyoB,EAAMppB,KACiB,OAApBopB,EAAIC,aACTD,EAAMA,EAAIC,YAEZ,OAAOD,GAIT0gC,0BAAA,WACE,OAAO9pD,KAAKosB,KAAK69B,UAQnBH,iBAAA,SAAI/G,EAAaroC,GACfvO,EAAiB,gBAAiB,EAAG,EAAGzL,UAAUC,QAClDwY,GAAqB,gBAAiBnZ,KAAK6V,MAC3CuC,GAAwB,gBAAiB,EAAG2qC,EAAQ/iD,KAAK6V,MAAM,GAC/DhJ,EAAiB,gBAAiB,EAAG6N,GAAY,GAEjD,IAAMC,EAAW,IAAItT,EAOrB,OANArH,KAAKosB,KAAK89B,gBACRlqD,KAAK6V,KACLktC,EACc,KACdpoC,EAASG,aAAaJ,IAEjBC,EAASjT,SAQlBoiD,oBAAA,SACE7uC,EACAP,GAKA,GAHAvO,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QACrDwY,GAAqB,mBAAoBnZ,KAAK6V,MAE1ClW,MAAMoF,QAAQkW,GAAgB,CAEhC,IADA,IAAMC,EAAyC,GACtC1a,EAAI,EAAGA,EAAIya,EAActa,SAAUH,EAC1C0a,EAAiB,GAAK1a,GAAKya,EAAcza,GAE3Cya,EAAgBC,EAChBxR,GACE,wMAMJ6O,GACE,mBACA,EACA0C,EACAjb,KAAK6V,MACL,GAEFhJ,EAAiB,mBAAoB,EAAG6N,GAAY,GACpD,IAAMC,EAAW,IAAItT,EAMrB,OALArH,KAAKosB,KAAKrgB,OACR/L,KAAK6V,KACLoF,EACAN,EAASG,aAAaJ,IAEjBC,EAASjT,SASlBoiD,6BAAA,SACE/G,EACA59B,EACAzK,GAcA,GAZAvO,EAAiB,4BAA6B,EAAG,EAAGzL,UAAUC,QAC9DwY,GAAqB,4BAA6BnZ,KAAK6V,MACvDuC,GACE,4BACA,EACA2qC,EACA/iD,KAAK6V,MACL,GAEFiD,GAAiB,4BAA6B,EAAGqM,GAAa,GAC9DtY,EAAiB,4BAA6B,EAAG6N,GAAY,GAEvC,YAAlB1a,KAAKgpB,UAA4C,UAAlBhpB,KAAKgpB,SACtC,KAAM,qCACJhpB,KAAKgpB,SACL,0BAEJ,IAAMrO,EAAW,IAAItT,EAOrB,OANArH,KAAKosB,KAAK89B,gBACRlqD,KAAK6V,KACLktC,EACA59B,EACAxK,EAASG,aAAaJ,IAEjBC,EAASjT,SAOlBoiD,oBAAA,SAAOpvC,GAKL,OAJAvO,EAAiB,mBAAoB,EAAG,EAAGzL,UAAUC,QACrDwY,GAAqB,mBAAoBnZ,KAAK6V,MAC9ChJ,EAAiB,mBAAoB,EAAG6N,GAAY,GAE7C1a,KAAK8P,IAAI,KAAM4K,IASxBovC,yBAAA,SACEK,EACAzvC,EACA0vC,GAUA,GARAj+C,EAAiB,wBAAyB,EAAG,EAAGzL,UAAUC,QAC1DwY,GAAqB,wBAAyBnZ,KAAK6V,MACnDhJ,EAAiB,wBAAyB,EAAGs9C,GAAmB,GAChEt9C,EAAiB,wBAAyB,EAAG6N,GAAY,GpEwM9B,SAC7BtO,EACAM,EACA29C,EACA19C,GAEA,KAAIA,QAAqBxF,IAATkjD,IACI,kBAATA,EACT,MAAM,IAAInmD,MACRoU,EAAelM,EAAQM,EAAgBC,GAAY,sBoE9MrD29C,CAAgB,wBAAyB,EAAGF,GAAc,GAEpC,YAAlBpqD,KAAKgpB,UAA4C,UAAlBhpB,KAAKgpB,SACtC,KAAM,iCACJhpB,KAAKgpB,SACL,+BAEiB7hB,IAAjBijD,IAA4BA,GAAe,GAE/C,IAAMzvC,EAAW,IAAItT,EA0BrB,MAzB0B,mBAAfqT,GACTC,EAASjT,QAAQC,MAAM,cAiBzB3H,KAAKosB,KAAKm+B,iBACRvqD,KAAK6V,KACLs0C,EAhBsB,SACtBrnD,EACAuY,EACAC,GAEIxY,EACF6X,EAASnT,OAAO1E,GAEhB6X,EAASlT,QAAQ,IAAI2T,GAAkBC,EAAWC,IAE1B,mBAAfZ,GACTA,EAAW5X,EAAOuY,EAAWC,IAO/B8uC,GAGKzvC,EAASjT,SAQlBoiD,yBAAA,SACE3xC,EACAuC,GAEAvO,EAAiB,wBAAyB,EAAG,EAAGzL,UAAUC,QAC1DwY,GAAqB,wBAAyBnZ,KAAK6V,MACnDiD,GAAiB,wBAAyB,EAAGX,GAAU,GACvDtL,EAAiB,wBAAyB,EAAG6N,GAAY,GAEzD,IAAMC,EAAW,IAAItT,EAOrB,OANArH,KAAKosB,KAAK89B,gBACRlqD,KAAK6V,KAAKT,MAAM,aAChB+C,EACA,KACAwC,EAASG,aAAaJ,IAEjBC,EAASjT,SAQlBoiD,kBAAA,SAAK3nD,EAAauY,GAChBvO,EAAiB,iBAAkB,EAAG,EAAGzL,UAAUC,QACnDwY,GAAqB,iBAAkBnZ,KAAK6V,MAC5CuC,GAAwB,iBAAkB,EAAGjW,EAAOnC,KAAK6V,MAAM,GAC/DhJ,EAAiB,iBAAkB,EAAG6N,GAAY,GAElD,IAWIhT,EAXE6F,EAAMvN,KAAKosB,KAAKs1B,aAChB9zC,EAAO+N,GAAWpO,GAOlBi9C,EAAmBxqD,KAAKoV,MAAMxH,GAC9B68C,EAAUzqD,KAAKoV,MAAMxH,GAgB3B,OAZElG,EADW,MAATvF,EACQqoD,EAAiB16C,IAAI3N,EAAOuY,GAAYutB,KAAK,WAAM,OAAAwiB,IAEnD7iD,QAAQH,QAAQgjD,GAG5BD,EAAiBviB,KAAOvgC,EAAQugC,KAAKr4B,KAAKlI,GAC1C8iD,EAAiB7iD,MAAQD,EAAQugC,KAAKr4B,KAAKlI,OAASP,GAE1B,mBAAfuT,GACThT,EAAQC,MAAM,cAGT6iD,GAMTV,0BAAA,WAEE,OADA3wC,GAAqB,yBAA0BnZ,KAAK6V,MAC7C,IAAI4E,GAAaza,KAAKosB,KAAMpsB,KAAK6V,OAG1CrW,sBAAIsqD,6BAAJ,WACE,OAAO9pD,KAAK0qD,gDAGdlrD,sBAAIsqD,wBAAJ,WACE,OAAO9pD,KAAKgpB,0CAGdxpB,sBAAIsqD,2BAAJ,WACE,OAAO9pD,KAAKqpB,6CAGd7pB,sBAAIsqD,yBAAJ,WACE,OAAO9pD,KAAK2qD,+CAxTd,YAAYv+B,EAAYvW,GACtB,KAAMuW,aAAgBm1B,IACpB,MAAM,IAAIr9C,MACR,oEAKJkE,aAAMgkB,EAAMvW,EAAMgyC,GAAY+C,SAAS,SA0T3Cv/B,GAAMZ,uBAAyBq/B,GAC/BpsB,GAAUjT,uBAAyBq/B,GCrWnC,ICgBYe,GAAAA,MDhBZ,WAGE7qD,cAA4C,GAC5CA,gBAAa,EACbA,WAAkB,UA2BlB8qD,qBAAA,SAAQC,GAKN,IAHA,IAEEtpD,EAFEoU,EAAOk1C,aAAmBt3C,GAAOs3C,EAAU,IAAIt3C,GAAKs3C,GACpD31C,EAAQpV,KAEwB,QAA5ByB,EAAOoU,EAAKvB,aAElBc,EAAQ,IAAI01C,GAAKrpD,EAAM2T,EADL5K,EAAQ4K,EAAMqT,MAAMkG,SAAUltB,IAAS,IAAIupD,IAE7Dn1C,EAAOA,EAAKpB,WAGd,OAAOW,GAQT01C,sBAAA,WACE,OAAO9qD,KAAKyoB,MAAMtmB,OAQpB2oD,sBAAA,SAAS3oD,GACP2B,OAAwB,IAAV3B,EAAuB,iCACrCnC,KAAKyoB,MAAMtmB,MAAQA,EACnBnC,KAAKirD,kBAMPH,mBAAA,WACE9qD,KAAKyoB,MAAMtmB,MAAQ,KACnBnC,KAAKyoB,MAAMkG,SAAW,GACtB3uB,KAAKyoB,MAAMyiC,WAAa,EACxBlrD,KAAKirD,kBAMPH,yBAAA,WACE,OAA+B,EAAxB9qD,KAAKyoB,MAAMyiC,YAMpBJ,qBAAA,WACE,OAA2B,OAApB9qD,KAAKoe,aAAwBpe,KAAKmrD,eAQ3CL,0BAAA,SAAa7sC,GAAb,WACEnM,GAAK9R,KAAKyoB,MAAMkG,SAAU,SAACvZ,EAAe2N,GACxC9E,EAAO,IAAI6sC,GAAQ11C,EAAO7N,EAAMwb,OAapC+nC,+BAAA,SACE7sC,EACAmtC,EACAC,GAEID,IAAgBC,GAAeptC,EAAOje,MAE1CA,KAAK0lB,aAAa,SAAStQ,GACzBA,EAAMk2C,kBAAkBrtC,GAAyB,EAAMotC,KAGrDD,GAAeC,GAAeptC,EAAOje,OAW3C8qD,6BAAA,SACE7sC,EACAmtC,GAGA,IADA,IAAIpvC,EAAOovC,EAAcprD,KAAOA,KAAKu5B,SACrB,OAATvd,GAAe,CACpB,GAAIiC,EAAOjC,GACT,OAAO,EAETA,EAAOA,EAAKud,SAEd,OAAO,GAUTuxB,iDAAA,SAAoC7sC,GAClCje,KAAK0lB,aAAa,SAAStQ,GACA,OAArBA,EAAMgJ,WAAqBH,EAAO7I,GACjCA,EAAMm2C,oCAAoCttC,MAOnD6sC,kBAAA,WACE,OAAO,IAAIr3C,GACQ,OAAjBzT,KAAKwrD,QACDxrD,KAAKyrD,MACLzrD,KAAKwrD,QAAQ31C,OAAS,IAAM7V,KAAKyrD,QAOzCX,kBAAA,WACE,OAAO9qD,KAAKyrD,OAMdX,oBAAA,WACE,OAAO9qD,KAAKwrD,SAQNV,4BAAR,WACuB,OAAjB9qD,KAAKwrD,SAAkBxrD,KAAKwrD,QAAQE,aAAa1rD,KAAKyrD,MAAOzrD,OAU3D8qD,0BAAR,SAAqBttC,EAAmBpI,GACtC,IAAMu2C,EAAav2C,EAAM3K,UACnBmhD,EAActhD,EAAStK,KAAKyoB,MAAMkG,SAAUnR,GAC9CmuC,GAAcC,UACT5rD,KAAKyoB,MAAMkG,SAASnR,GAC3Bxd,KAAKyoB,MAAMyiC,aACXlrD,KAAKirD,kBACKU,GAAeC,IACzB5rD,KAAKyoB,MAAMkG,SAASnR,GAAapI,EAAMqT,MACvCzoB,KAAKyoB,MAAMyiC,aACXlrD,KAAKirD,uBA/LT,YACUQ,EACAD,EACA/iC,gBAFAgjC,mBACAD,qBACA/iC,MAAyBuiC,IAFzBhrD,WAAAyrD,EACAzrD,aAAAwrD,EACAxrD,WAAAyoB,GCPAoiC,GAAAA,GAAAA,wBAQVA,qBAIAA,+BAIAA,6CAGAA,mCAUDtJ,GAAasK,yBAA2B,GAuCxCtK,GAAKrhD,UAAkBulD,mBAAqB,WAO3CzlD,KAAK8rD,sBAAwB,IAAIhB,IAsBnCvJ,GAAKrhD,UAAUqqD,iBAAmB,SAChC10C,EACAs0C,EACAzvC,EACA0vC,GAEApqD,KAAKitC,KAAK,kBAAoBp3B,GAGR,SAAhBk2C,KAAN,IACMC,EAAW,IAAIlC,GAAU9pD,KAAM6V,GACrCm2C,EAAS3+B,GAAG,QAAS0+B,GACrB,IAKME,EAA2B,CAC/Bp2C,OACA9J,OAAQo+C,EACRzvC,aAGAksB,OAAQ,KAGRslB,MAAO76C,KAGP+4C,aAAcA,EAGd+B,WAAY,EAGZC,UAvBgB,WAChBJ,EAAS5+B,IAAI,QAAS2+B,IAyBtBM,YAAa,KAEbC,eAAgB,KAEhBC,qBAAsB,KAEtBC,yBAA0B,KAE1BC,8BAA+B,MAI3BC,EAAe1sD,KAAK2sD,gBAAgB92C,GAC1Co2C,EAAYM,qBAAuBG,EACnC,IAAM3J,EAASkJ,EAAYlgD,OAAO2gD,EAAat+C,OAC/C,QAAejH,IAAX47C,GAKF,GAHAkJ,EAAYG,YACZH,EAAYO,yBAA2B,KACvCP,EAAYQ,8BAAgC,KACxCR,EAAYvxC,WAAY,CAE1B,IAAMY,EAAW,IAAIkN,GACnByjC,EAAYM,qBACZ,IAAIzC,GAAU9pD,KAAMisD,EAAYp2C,MAChCmJ,IAEFitC,EAAYvxC,WAAW,MAAM,EAAOY,QAEjC,CACLjD,GACE,qCACA0qC,EACAkJ,EAAYp2C,MAIdo2C,EAAYrlB,OAASikB,GAAkB+B,IACvC,IAAMC,EAAY7sD,KAAK8rD,sBAAsBgB,QAAQj3C,GAC/Ck3C,EAAYF,EAAUzuC,YAAc,GAC1C2uC,EAAU1qD,KAAK4pD,GAEfY,EAAUG,SAASD,GAKnB,IAAIE,SACJ,GACoB,iBAAXlK,GACI,OAAXA,GACAz4C,EAASy4C,EAAQ,aAEjBkK,EAAkBziD,EAAQu4C,EAAQ,aAClCj/C,EACEoU,GAAgB+0C,GAChB,yHAOFA,GAFEjtD,KAAKgiD,gBAAgB5pB,uBAAuBviB,IAC5CgP,GAAapH,YACeR,cAAc7O,MAE9C6+C,EAAoDA,EAEpD,IAAMr9B,EAAe5vB,KAAKgjD,uBACpBC,EAAoB9lC,GAAa4lC,EAAQkK,GACzC5wC,EAAUyT,GACdmzB,EACArzB,GAEFq8B,EAAYO,yBAA2BvJ,EACvCgJ,EAAYQ,8BAAgCpwC,EAC5C4vC,EAAYK,eAAiBtsD,KAAKkjD,kBAElC,IAAMnoB,EAAS/6B,KAAKgiD,gBAAgBmB,mBAClCttC,EACAwG,EACA4vC,EAAYK,eACZL,EAAY7B,cAEdpqD,KAAKuiD,YAAYC,0BAA0B3sC,EAAMklB,GAEjD/6B,KAAKktD,2BAUR3L,GAAKrhD,UAAkBysD,gBAAkB,SACxC92C,EACAs3C,GAEA,OACEntD,KAAKgiD,gBAAgB5pB,uBAAuBviB,EAAMs3C,IAClDtoC,GAAapH,YAchB8jC,GAAKrhD,UAAkBgtD,uBAAyB,SAC/ClxC,GAD+C,WAQ/C,gBAPAA,EAA4Bhc,KAAK8rD,uBAG5B9vC,GACHhc,KAAKotD,qCAAqCpxC,GAGpB,OAApBA,EAAKoC,WAAqB,CAC5B,IAAMivC,EAAQrtD,KAAKstD,uBAAuBtxC,GAC1ClY,EAAsB,EAAfupD,EAAM1sD,OAAY,yCAEV0sD,EAAMniC,MACnB,SAAC+gC,GAA6B,OAAAA,EAAYrlB,SAAWikB,GAAkB+B,OAKvE5sD,KAAKutD,sBAAsBvxC,EAAKnG,OAAQw3C,QAEjCrxC,EAAKmvC,eACdnvC,EAAK0J,aAAa,SAAAhI,GAChBnW,EAAK2lD,uBAAuBxvC,MAYjC6jC,GAAKrhD,UAAkBqtD,sBAAwB,SAC9C13C,EACAw3C,GASA,IAX8C,WAKxCG,EAAeH,EAAM3iD,IAAI,SAAS+iD,GACtC,OAAOA,EAAInB,iBAEPoB,EAAc1tD,KAAK2sD,gBAAgB92C,EAAM23C,GAC3CG,EAAaD,EACXE,EAAaF,EAAY5nC,OACtBtlB,EAAI,EAAGA,EAAI6sD,EAAM1sD,OAAQH,IAAK,CACrC,IAAMitD,EAAMJ,EAAM7sD,GAClBsD,EACE2pD,EAAI7mB,SAAWikB,GAAkB+B,IACjC,iEAEFa,EAAI7mB,OAASikB,GAAkBgD,KAC/BJ,EAAItB,aACJ,IAAM33C,EAAef,GAAKe,aAAaqB,EAAM43C,EAAI53C,MAEjD83C,EAAaA,EAAW5vC,YACtBvJ,EACAi5C,EAAIjB,0BAIR,IAAMsB,EAAaH,EAAWv/C,KAAI,GAC5B2/C,EAAal4C,EAGnB7V,KAAK2pC,QAAQ4V,IACXwO,EAAW7kD,WACX4kD,EACA,SAAClnB,GACCr/B,EAAK0lC,KAAK,2BAA4B,CACpCp3B,KAAMk4C,EAAW7kD,WACjB09B,WAGF,IAAI7L,EAAkB,GACtB,GAAe,OAAX6L,EAAiB,CAInB,IADA,IAAMla,EAAY,GACTlsB,EAAI,EAAGA,EAAI6sD,EAAM1sD,OAAQH,IAAK,CAKrC,GAJA6sD,EAAM7sD,GAAGomC,OAASikB,GAAkBmD,UACpCjzB,EAASA,EAAO/3B,OACduE,EAAKy6C,gBAAgBjrB,aAAas2B,EAAM7sD,GAAG8rD,iBAEzCe,EAAM7sD,GAAGka,WAAY,CAEvB,IAAMsB,EAAOqxC,EAAM7sD,GAAGisD,8BAChBrjC,EAAM,IAAI0gC,GAAUviD,EAAM8lD,EAAM7sD,GAAGqV,MACnCyF,EAAW,IAAIkN,GAAaxM,EAAMoN,EAAKpK,IAC7C0N,EAAUrqB,KACRgrD,EAAM7sD,GAAGka,WAAW9K,KAAK,KAAM,MAAM,EAAM0L,IAG/C+xC,EAAM7sD,GAAG4rD,YAIX7kD,EAAK6lD,qCACH7lD,EAAKukD,sBAAsBgB,QAAQj3C,IAGrCtO,EAAK2lD,yBAEL3lD,EAAKg7C,YAAYC,0BAA0B3sC,EAAMklB,GAGjD,IAASv6B,EAAI,EAAGA,EAAIksB,EAAU/rB,OAAQH,IACpCwS,GAAe0Z,EAAUlsB,QAEtB,CAEL,GAAe,cAAXomC,EACF,IAASpmC,EAAI,EAAGA,EAAI6sD,EAAM1sD,OAAQH,IAC5B6sD,EAAM7sD,GAAGomC,SAAWikB,GAAkBoD,iBACxCZ,EAAM7sD,GAAGomC,OAASikB,GAAkBqD,YACjCb,EAAM7sD,GAAGomC,OAASikB,GAAkB+B,QAEtC,CACLljD,GACE,kBAAoBqkD,EAAW7kD,WAAa,YAAc09B,GAE5D,IAASpmC,EAAI,EAAGA,EAAI6sD,EAAM1sD,OAAQH,IAChC6sD,EAAM7sD,GAAGomC,OAASikB,GAAkBqD,YACpCb,EAAM7sD,GAAG6rD,YAAczlB,EAI3Br/B,EAAK+6C,mBAAmBzsC,KAG5B+3C,IAgBHrM,GAAKrhD,UAAkBoiD,mBAAqB,SAAS9X,GACpD,IAAM2jB,EAA0BnuD,KAAKouD,4BAA4B5jB,GAC3D30B,EAAOs4C,EAAwBt4C,OAE/Bw3C,EAAQrtD,KAAKstD,uBAAuBa,GAG1C,OAFAnuD,KAAKquD,uBAAuBhB,EAAOx3C,GAE5BA,GAUR0rC,GAAKrhD,UAAkBmuD,uBAAyB,SAC/ChB,EACAx3C,GAEA,GAAqB,IAAjBw3C,EAAM1sD,OAAV,CAeA,IATA,IAgGcyrD,EAhGR1/B,EAAY,GACdqO,EAAkB,GAKhByyB,EAHcH,EAAM/xB,OAAO,SAASkkB,GACxC,OAAOA,EAAE5Y,SAAWikB,GAAkB+B,MAEPliD,IAAI,SAAS80C,GAC5C,OAAOA,EAAE8M,iBAEF9rD,EAAI,EAAGA,EAAI6sD,EAAM1sD,OAAQH,IAAK,CACrC,IAAMyrD,EAAcoB,EAAM7sD,GACpBgU,EAAef,GAAKe,aAAaqB,EAAMo2C,EAAYp2C,MACrDy4C,GAAmB,EACrBjC,SAMF,GALAvoD,EACmB,OAAjB0Q,EACA,iEAGEy3C,EAAYrlB,SAAWikB,GAAkBqD,YAC3CI,GAAmB,EACnBjC,EAAcJ,EAAYI,YAC1BtxB,EAASA,EAAO/3B,OACdhD,KAAKgiD,gBAAgBjrB,aAAak1B,EAAYK,gBAAgB,SAE3D,GAAIL,EAAYrlB,SAAWikB,GAAkB+B,IAClD,GAAIX,EAAYE,YAAe5K,GAAasK,yBAC1CyC,GAAmB,EACnBjC,EAAc,WACdtxB,EAASA,EAAO/3B,OACdhD,KAAKgiD,gBAAgBjrB,aAAak1B,EAAYK,gBAAgB,QAE3D,CAEL,IAAMiC,EAAcvuD,KAAK2sD,gBACvBV,EAAYp2C,KACZ23C,GAEFvB,EAAYM,qBAAuBgC,EACnC,IAAMhsB,EAAU8qB,EAAM7sD,GAAGuL,OAAOwiD,EAAYngD,OAC5C,QAAgBjH,IAAZo7B,EAAuB,CACzBlqB,GACE,qCACAkqB,EACA0pB,EAAYp2C,MAEd,IAAI24C,EAAcrxC,GAAaolB,GAEV,iBAAZA,GACI,MAAXA,GACAj4B,EAASi4B,EAAS,eAGlBisB,EAAcA,EAAY5wC,eAAe2wC,EAAYtxC,gBAGvD,IAAMwxC,EAAaxC,EAAYK,eACzB18B,EAAe5vB,KAAKgjD,uBACpB0L,EAAkB5+B,GACtB0+B,EACA5+B,GAGFq8B,EAAYO,yBAA2BgC,EACvCvC,EAAYQ,8BAAgCiC,EAC5CzC,EAAYK,eAAiBtsD,KAAKkjD,kBAElCsK,EAAantB,OAAOmtB,EAAap2C,QAAQq3C,GAAa,GAStD1zB,GARAA,EAASA,EAAO/3B,OACdhD,KAAKgiD,gBAAgBmB,mBACnB8I,EAAYp2C,KACZ64C,EACAzC,EAAYK,eACZL,EAAY7B,gBAGApnD,OACdhD,KAAKgiD,gBAAgBjrB,aAAa03B,GAAY,SAGhDH,GAAmB,EACnBjC,EAAc,SACdtxB,EAASA,EAAO/3B,OACdhD,KAAKgiD,gBAAgBjrB,aAAak1B,EAAYK,gBAAgB,IAOtE,GAFAtsD,KAAKuiD,YAAYC,0BAA0B3sC,EAAMklB,GACjDA,EAAS,GACLuzB,IAEFjB,EAAM7sD,GAAGomC,OAASikB,GAAkBmD,UAI1B5B,EAEPiB,EAAM7sD,GAAG4rD,UADVn5C,WAAWm5C,EAAWj6C,KAAKI,MAAM,IAG/B86C,EAAM7sD,GAAGka,YACX,GAAoB,WAAhB2xC,EAA0B,CAC5B,IAAMjjC,EAAM,IAAI0gC,GAAU9pD,KAAMqtD,EAAM7sD,GAAGqV,MAEnC84C,EAAiCtB,EAAM7sD,GAAG+rD,qBAC1CjxC,EAAW,IAAIkN,GAAammC,EAAWvlC,EAAKpK,IAClD0N,EAAUrqB,KAAKgrD,EAAM7sD,GAAGka,WAAW9K,KAAK,KAAM,MAAM,EAAO0L,SAE3DoR,EAAUrqB,KACRgrD,EAAM7sD,GAAGka,WAAW9K,KAAK,KAAM,IAAI1L,MAAMmoD,IAAc,EAAO,OAQxErsD,KAAKotD,qCAAqCptD,KAAK8rD,uBAG/C,IAAStrD,EAAI,EAAGA,EAAIksB,EAAU/rB,OAAQH,IACpCwS,GAAe0Z,EAAUlsB,IAI3BR,KAAKktD,2BAWN3L,GAAKrhD,UAAkBkuD,4BAA8B,SACpDv4C,GAMA,IAJA,IAAIiI,EAGA8wC,EAAkB5uD,KAAK8rD,sBAEK,QAA7BhuC,EAAQjI,EAAKvB,aACiB,OAA/Bs6C,EAAgBxwC,YAEhBwwC,EAAkBA,EAAgB9B,QAAQhvC,GAC1CjI,EAAOA,EAAKpB,WAGd,OAAOm6C,GAURrN,GAAKrhD,UAAkBotD,uBAAyB,SAC/CsB,GAGA,IAAMC,EAAkC,GAQxC,OAPA7uD,KAAK8uD,mCAAmCF,EAAiBC,GAGzDA,EAAiBh9C,KAAK,SAAStG,EAAGhM,GAChC,OAAOgM,EAAE2gD,MAAQ3sD,EAAE2sD,QAGd2C,GAQRtN,GAAKrhD,UAAkB4uD,mCAAqC,SAC3D9yC,EACAqxC,GAF2D,WAIrDN,EAAY/wC,EAAKoC,WACvB,GAAkB,OAAd2uC,EACF,IAAK,IAAIvsD,EAAI,EAAGA,EAAIusD,EAAUpsD,OAAQH,IACpC6sD,EAAMhrD,KAAK0qD,EAAUvsD,IAIzBwb,EAAK0J,aAAa,SAAAtQ,GAChB7N,EAAKunD,mCAAmC15C,EAAOi4C,MAUlD9L,GAAKrhD,UAAkBktD,qCAAuC,SAC7DpxC,GAD6D,WAGvDqxC,EAAQrxC,EAAKoC,WACnB,GAAIivC,EAAO,CAET,IADA,IAAI0B,EAAK,EACAl6B,EAAO,EAAGA,EAAOw4B,EAAM1sD,OAAQk0B,IAClCw4B,EAAMx4B,GAAM+R,SAAWikB,GAAkBmD,YAC3CX,EAAM0B,GAAM1B,EAAMx4B,GAClBk6B,KAGJ1B,EAAM1sD,OAASouD,EACf/yC,EAAKgxC,SAAwB,EAAfK,EAAM1sD,OAAa0sD,EAAQ,MAG3CrxC,EAAK0J,aAAa,SAAAhI,GAChBnW,EAAK6lD,qCAAqC1vC,MAY7C6jC,GAAKrhD,UAAkBqjD,mBAAqB,SAAS1tC,GAAT,WACrCke,EAAe/zB,KAAKouD,4BAA4Bv4C,GAAMA,OAEtD+4C,EAAkB5uD,KAAK8rD,sBAAsBgB,QAAQj3C,GAY3D,OAVA+4C,EAAgBI,gBAAgB,SAAChzC,GAC/BzU,EAAK0nD,yBAAyBjzC,KAGhChc,KAAKivD,yBAAyBL,GAE9BA,EAAgBtD,kBAAkB,SAACtvC,GACjCzU,EAAK0nD,yBAAyBjzC,KAGzB+X,GASRwtB,GAAKrhD,UAAkB+uD,yBAA2B,SACjDjzC,GAEA,IAAMqxC,EAAQrxC,EAAKoC,WACnB,GAAc,OAAVivC,EAAgB,CASlB,IANA,IAAM3gC,EAAY,GAIdqO,EAAkB,GAClBm0B,GAAY,EACP1uD,EAAI,EAAGA,EAAI6sD,EAAM1sD,OAAQH,IAChC,GAAI6sD,EAAM7sD,GAAGomC,SAAWikB,GAAkBoD,uBAEnC,GAAIZ,EAAM7sD,GAAGomC,SAAWikB,GAAkBgD,KAC/C/pD,EACEorD,IAAa1uD,EAAI,EACjB,mDAIF6sD,EAFA6B,EAAW1uD,GAEFomC,OAASikB,GAAkBoD,iBACpCZ,EAAM7sD,GAAG6rD,YAAc,WAWvB,GATAvoD,EACEupD,EAAM7sD,GAAGomC,SAAWikB,GAAkB+B,IACtC,0CAGFS,EAAM7sD,GAAG4rD,YACTrxB,EAASA,EAAO/3B,OACdhD,KAAKgiD,gBAAgBjrB,aAAas2B,EAAM7sD,GAAG8rD,gBAAgB,IAEzDe,EAAM7sD,GAAGka,WAAY,CAEvBgS,EAAUrqB,KACRgrD,EAAM7sD,GAAGka,WAAW9K,KAAK,KAAM,IAAI1L,MAAM,QAAQ,EAFb,QAO1B,IAAdgrD,EAEFlzC,EAAKgxC,SAAS,MAGdK,EAAM1sD,OAASuuD,EAAW,EAI5BlvD,KAAKuiD,YAAYC,0BAA0BxmC,EAAKnG,OAAQklB,GACxD,IAASv6B,EAAI,EAAGA,EAAIksB,EAAU/rB,OAAQH,IACpCwS,GAAe0Z,EAAUlsB,MC1uB/B,IAEI2uD,GAFEC,GAAsB,kBAuBnBC,eAAP,WAIE,OAFEF,GADGA,IACe,IAAIE,IAM1BA,uBAAA,WACE,IAAK,IAAMC,KAAWtvD,KAAKuvD,OACzB,IAAK,IAAMC,KAASxvD,KAAKuvD,OAAOD,GAC9BtvD,KAAKuvD,OAAOD,GAASE,GAAOrQ,aAKlCkQ,oBAAA,WACE,IAAK,IAAMC,KAAWtvD,KAAKuvD,OACzB,IAAK,IAAMC,KAASxvD,KAAKuvD,OAAOD,GAC9BtvD,KAAKuvD,OAAOD,GAASE,GAAOnL,UAWlCgL,6BAAA,SAAgBnK,EAAkBjT,GAChC,IAAIud,EAA4Bvd,GAAOiT,EAAI/c,QAAQinB,SACrCjoD,IAAVqoD,GACFl/C,GACE,8DACE8+C,GACA,kDAIN,IAAI73C,EAAYF,GAAcm4C,GAC1B53C,EAAWL,EAAUK,SAErB63C,OAAqCtoD,EAoBzC,MAnBuB,oBAAZysC,UACT6b,EAAiB7b,QAAQE,IAAI1iC,KAE3Bq+C,IACFD,EAAQ,UAAUC,SAAqB73C,EAASb,UAEhDa,GADAL,EAAYF,GAAcm4C,IACL53C,UAGvBwB,GAAY,gCAAiC,EAAG7B,GAC3CA,EAAU1B,KAAKpL,WAClB6F,GACE,4FAKStQ,KAAK0vD,WAAW93C,EAAUstC,GAE3B+E,UAQdoF,wBAAA,SAAWjjC,GACT,IAAMujC,EAAWnlD,EAAQxK,KAAKuvD,OAAQnjC,EAAK84B,IAAIt3C,MAE1C+hD,GAAYnlD,EAAQmlD,EAAUvjC,EAAKyqB,UAAU5/B,iBAAmBmV,GACnE9b,GACE,YAAY8b,EAAK84B,IAAIt3C,SAAQwe,EAAKyqB,yCAGtCzqB,EAAK+yB,mBACEwQ,EAASvjC,EAAKyqB,UAAU5/B,gBAWjCo4C,wBAAA,SAAWz3C,EAAoBstC,GAC7B,IAAIyK,EAAWnlD,EAAQxK,KAAKuvD,OAAQrK,EAAIt3C,MAEnC+hD,IACHA,EAAW,GACX3vD,KAAKuvD,OAAOrK,EAAIt3C,MAAQ+hD,GAG1B,IAAIvjC,EAAO5hB,EAAQmlD,EAAU/3C,EAASX,eAStC,OARImV,GACF9b,GACE,2HAGJ8b,EAAO,IAAIm1B,GAAK3pC,EAAU5X,KAAK4vD,eAAgB1K,GAC/CyK,EAAS/3C,EAASX,eAAiBmV,GASrCijC,6BAAA,SAAgBpK,GACdjlD,KAAK4vD,eAAiB3K,OApI1B,cAIUjlD,YAIJ,GAMIA,qBAA0B,EChBpC,QA2BER,sBAAIwlD,wBAAJ,WACE,OAAOhlD,KAAK4a,MAAMsqC,qCAepBF,iBAAA,SAAInvC,GAIF,OAHA7V,KAAK6vD,cAAc,OACnB1jD,EAAiB,eAAgB,EAAG,EAAGzL,UAAUC,QAE7CkV,aAAgBi0C,GACX9pD,KAAK8vD,WAAWj6C,EAAK3M,iBAGd/B,IAAT0O,EAAqB7V,KAAKuhB,MAAMnM,MAAMS,GAAQ7V,KAAKuhB,OAU5DyjC,wBAAA,SAAW/S,GAET,IAAM8d,EAAU,sBAChB/vD,KAAK6vD,cAAcE,GACnB5jD,EAAiB4jD,EAAS,EAAG,EAAGrvD,UAAUC,QAC1C,IAAMqvD,EAAY34C,GAAc46B,GAChC74B,GAAY22C,EAAS,EAAGC,GAExB,IAAMp4C,EAAWo4C,EAAUp4C,SAa3B,OAZIA,EAASzB,OAAWnW,KAAK4a,MAAci8B,UAAuB1gC,MAChE7F,GACEy/C,EACE,2DAEAn4C,EAASzB,KACT,iBACEnW,KAAK4a,MAAci8B,UAAuB1gC,KAC5C,KAICnW,KAAKopB,IAAI4mC,EAAUn6C,KAAK3M,aAMzB87C,2BAAR,SAAsB+K,GACD,OAAf/vD,KAAK4a,OACPtK,GAAM,eAAiBy/C,EAAU,4BAKrC/K,uBAAA,WACE74C,EAAiB,qBAAsB,EAAG,EAAGzL,UAAUC,QACvDX,KAAK6vD,cAAc,aACnB7vD,KAAK4a,MAAMukC,aAGb6F,sBAAA,WACE74C,EAAiB,oBAAqB,EAAG,EAAGzL,UAAUC,QACtDX,KAAK6vD,cAAc,YACnB7vD,KAAK4a,MAAMypC,UApGGW,eAAc,CAC5BiL,UAAW,CACTC,MAAO,kBAQX,YAAoBt1C,IAAA5a,WAAA4a,aACK2mC,IACrBjxC,GACE,wEAKJtQ,KAAKuhB,MAAQ,IAAIuoC,GAAUlvC,EAAOnH,GAAKkd,OAEvC3wB,KAAKmwD,SAAW,IAAIC,GAAkBpwD,MAoF1C,QAKQowD,oBAAN,kB/F/EK,SAAmBrvD,EAASsvD,EAAYC,EAAGC,GAC9C,OAAO,IAAWD,EAANA,GAAU1oD,SAAU,SAAUH,EAASD,GAC/C,SAASgpD,EAAUruD,GAAS,IAAMI,EAAKguD,EAAU9uD,KAAKU,IAAW,MAAOG,GAAKkF,EAAOlF,IACpF,SAASmuD,EAAStuD,GAAS,IAAMI,EAAKguD,EAAiB,MAAEpuD,IAAW,MAAOG,GAAKkF,EAAOlF,IACvF,SAASC,EAAKid,GAAUA,EAAOtd,KAAOuF,EAAQ+X,EAAOrd,OAAS,IAAImuD,EAAE,SAAU7oD,GAAWA,EAAQ+X,EAAOrd,SAAW8lC,KAAKuoB,EAAWC,GACnIluD,GAAMguD,EAAYA,EAAU1vD,MAAME,EAASsvD,GAAc,KAAK5uD,0E+F2EjEzB,KAAKiqD,SAAiB4F,cAAc,UACrCR,GAAYpP,cAAcyQ,WAAY1wD,KAAKiqD,SAAiBrvC,OAE3D5a,KAAKiqD,SAAiBrvC,MAAQ,KAC9B5a,KAAKiqD,SAAiB1oC,MAAQ,KAC/BvhB,KAAKiqD,SAASkG,SAAW,KACzBnwD,KAAKiqD,SAAW,kBAVlB,YAAmBA,GAAAjqD,cAAAiqD,EClHrB,uCAAgC,WAC9B1W,GAAoBod,gBACpBlkB,GAAsBmkB,8BAGO,WAC7BnkB,GAAsBkkB,uCAIa,WACnC,OAAOpd,GAAiC,wCAGF,SACtCnqB,EACA9hB,GAEC8hB,EAAIgD,KAAKg4B,sBAA8BtE,uBAAyBx4C,SAG9C,SAAS8hB,EAAgBk7B,GAC5Cl7B,EAAIgD,KAAKmd,MAAM+a,0BAGoB,SAASl7B,EAAgBw7B,GAC5Dx7B,EAAIgD,KAAKykC,sBAAsBjM,oBAGF,SAASx7B,GACtC,OAAOA,EAAIgD,KAAKw1B,qCAGiB,SACjCx4B,EACA9hB,GAEA,OAAO8hB,EAAIgD,KAAK0kC,qBAAqBxpD,MC3C1BypD,GAAiB1W,GAM7BA,GAAqBn6C,UAAkB8wD,aAAe,SACrDn9C,EACA6G,GAEA1a,KAAK26C,YAAY,IAAK,CAAE/6C,EAAGiU,GAAc6G,IAO1C2/B,GAAqBn6C,UAAkB+wD,KAAO,SAC7CxoD,EACAyoD,GAEAlxD,KAAK26C,YAAY,OAAQ,CAAEr7C,EAAGmJ,GAAQyoD,IAIjC,IlB3BuB1X,GmBaGrsC,GDcpBgkD,GAAqB5a,GA2BrB6a,GAAmBl7C,wEArBN,SAASm7C,GACjC,IAAMC,EAASjX,GAAqBn6C,UAAUq/C,IAY9C,OAXAlF,GAAqBn6C,UAAUq/C,IAAM,SACnC1rC,EACApL,EACA8oD,EACAC,QAEiBrqD,IAAbqqD,IACFA,EAAWH,KAEbC,EAAO1wD,KAAKZ,KAAM6T,EAAYpL,EAAM8oD,EAAgBC,IAE/C,WACLnX,GAAqBn6C,UAAUq/C,IAAM+R,wCAaV,SAASznC,GACtC,OAAOA,EAAM2E,mCAQgB,SAASy2B,GACtCoK,GAAYpP,cAAcgF,gBAAgBA,MC3DtCwM,GAAczM,GAASyM,YnBXCjY,ImBaGrsC,GA4BhBukD,IA1BQ7tD,YnBdvBA,GAAc21C,GmBiBKrsC,GAAgCgjD,SAASwB,gBAC1D,WACA,SAACzM,EAAK0M,EAAQ3f,GAAQ,OAAAod,GAAYpP,cAAc4R,gBAAgB3M,EAAKjT,IAErE,CACE6X,aACAz+B,SACA25B,YACAx8B,gBACAjZ,gBACA4gD,YACAsB,eACAK,gBAEF,MACA"}